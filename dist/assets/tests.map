{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","collections/tests/adapters/application.jshint.js","collections/tests/adapters/collection.jshint.js","collections/tests/adapters/group.jshint.js","collections/tests/adapters/item.jshint.js","collections/tests/adapters/node.jshint.js","collections/tests/adapters/preprint.jshint.js","collections/tests/adapters/registration.jshint.js","collections/tests/adapters/user.jshint.js","collections/tests/app.jshint.js","collections/tests/authenticators/osf-token.jshint.js","collections/tests/components/add-node/component.jshint.js","collections/tests/components/add-website/component.jshint.js","collections/tests/components/browse-list/component.jshint.js","collections/tests/components/button-widget/component.jshint.js","collections/tests/components/collection-item/component.jshint.js","collections/tests/components/collection-nav/component.jshint.js","collections/tests/components/file-uploader/component.jshint.js","collections/tests/components/group-detail/component.jshint.js","collections/tests/components/item-detail-page/component.jshint.js","collections/tests/components/landing-board/component.jshint.js","collections/tests/components/landing-copyright/component.jshint.js","collections/tests/components/landing-default/component.jshint.js","collections/tests/components/landing-hero/component.jshint.js","collections/tests/components/landing-list/component.jshint.js","collections/tests/components/navbar-auth-dropdown/component.jshint.js","collections/tests/components/paragraph-display/component.jshint.js","collections/tests/components/preprint-basics/component.jshint.js","collections/tests/components/preprint-form-authors/component.jshint.js","collections/tests/components/preprint-form-body/component.jshint.js","collections/tests/components/preprint-form-header/component.jshint.js","collections/tests/components/preprint-form-section/component.jshint.js","collections/tests/components/subject-picker/component.jshint.js","collections/tests/components/text-field/component.jshint.js","collections/tests/components/validated-input/component.jshint.js","collections/tests/controllers/application.jshint.js","collections/tests/controllers/collection.jshint.js","collections/tests/controllers/collection/add.jshint.js","collections/tests/controllers/collection/browse.jshint.js","collections/tests/controllers/collection/edit.jshint.js","collections/tests/controllers/collection/group.jshint.js","collections/tests/controllers/collection/group/index.jshint.js","collections/tests/controllers/collection/group/item.jshint.js","collections/tests/controllers/collection/index.jshint.js","collections/tests/controllers/collection/item.jshint.js","collections/tests/controllers/collection/search.jshint.js","collections/tests/controllers/create.jshint.js","collections/tests/controllers/index.jshint.js","collections/tests/ember-sinon-qunit/test.js","collections/tests/factories/citation.js","collections/tests/factories/collection.js","collections/tests/factories/comment-report.js","collections/tests/factories/comment.js","collections/tests/factories/contributor.js","collections/tests/factories/draft-registration.js","collections/tests/factories/file-provider.js","collections/tests/factories/file-version.js","collections/tests/factories/file.js","collections/tests/factories/institution.js","collections/tests/factories/license.js","collections/tests/factories/log.js","collections/tests/factories/metaschema.js","collections/tests/factories/node-link.js","collections/tests/factories/node.js","collections/tests/factories/preprint-provider.js","collections/tests/factories/preprint.js","collections/tests/factories/registration.js","collections/tests/factories/taxonomy.js","collections/tests/factories/user.js","collections/tests/factories/wiki.js","collections/tests/helpers/conditions-for-contrib-removal.jshint.js","collections/tests/helpers/contributor-is-current-user.jshint.js","collections/tests/helpers/destroy-app.js","collections/tests/helpers/destroy-app.jshint.js","collections/tests/helpers/ember-i18n/test-helpers.js","collections/tests/helpers/ember-simple-auth.js","collections/tests/helpers/ember-sortable/test-helpers.js","collections/tests/helpers/filter-replace.jshint.js","collections/tests/helpers/get-ancestor-descriptor.jshint.js","collections/tests/helpers/if-filter.jshint.js","collections/tests/helpers/is-section-editable.jshint.js","collections/tests/helpers/min-admins.jshint.js","collections/tests/helpers/min-bibliographic.jshint.js","collections/tests/helpers/module-for-acceptance.js","collections/tests/helpers/module-for-acceptance.jshint.js","collections/tests/helpers/number-format.jshint.js","collections/tests/helpers/permission-map.jshint.js","collections/tests/helpers/permission-to-remove-contributor.jshint.js","collections/tests/helpers/permission-to-remove-contributors.jshint.js","collections/tests/helpers/resolver.js","collections/tests/helpers/resolver.jshint.js","collections/tests/helpers/route-prefix.jshint.js","collections/tests/helpers/safe-markup.jshint.js","collections/tests/helpers/slice-array.jshint.js","collections/tests/helpers/start-app.js","collections/tests/helpers/start-app.jshint.js","collections/tests/helpers/user-is-contributor.jshint.js","collections/tests/initializers/promise.jshint.js","collections/tests/integration/components/add-node/component-test.js","collections/tests/integration/components/add-node/component-test.jshint.js","collections/tests/integration/components/add-project/component-test.js","collections/tests/integration/components/add-project/component-test.jshint.js","collections/tests/integration/components/add-website/component-test.js","collections/tests/integration/components/add-website/component-test.jshint.js","collections/tests/integration/components/browse-list/component-test.js","collections/tests/integration/components/browse-list/component-test.jshint.js","collections/tests/integration/components/collection-item/component-test.js","collections/tests/integration/components/collection-item/component-test.jshint.js","collections/tests/integration/components/collection-nav/component-test.js","collections/tests/integration/components/collection-nav/component-test.jshint.js","collections/tests/integration/components/group-detail/component-test.js","collections/tests/integration/components/group-detail/component-test.jshint.js","collections/tests/integration/components/item-detail-page/component-test.js","collections/tests/integration/components/item-detail-page/component-test.jshint.js","collections/tests/integration/components/landing-board/component-test.js","collections/tests/integration/components/landing-board/component-test.jshint.js","collections/tests/integration/components/landing-copyright/component-test.js","collections/tests/integration/components/landing-copyright/component-test.jshint.js","collections/tests/integration/components/landing-default/component-test.js","collections/tests/integration/components/landing-default/component-test.jshint.js","collections/tests/integration/components/landing-hero/component-test.js","collections/tests/integration/components/landing-hero/component-test.jshint.js","collections/tests/integration/components/landing-list/component-test.js","collections/tests/integration/components/landing-list/component-test.jshint.js","collections/tests/integration/components/navbar-auth-dropdown/component-test.js","collections/tests/integration/components/navbar-auth-dropdown/component-test.jshint.js","collections/tests/integration/components/preprint-basics/component-test.js","collections/tests/integration/components/preprint-basics/component-test.jshint.js","collections/tests/integration/components/preprint-form-authors/component-test.js","collections/tests/integration/components/preprint-form-authors/component-test.jshint.js","collections/tests/integration/components/preprint-form-body/component-test.js","collections/tests/integration/components/preprint-form-body/component-test.jshint.js","collections/tests/integration/components/preprint-form-header/component-test.js","collections/tests/integration/components/preprint-form-header/component-test.jshint.js","collections/tests/integration/components/preprint-form-section/component-test.js","collections/tests/integration/components/preprint-form-section/component-test.jshint.js","collections/tests/integration/components/subject-picker/component-test.js","collections/tests/integration/components/subject-picker/component-test.jshint.js","collections/tests/integration/components/validated-input/component-test.js","collections/tests/integration/components/validated-input/component-test.jshint.js","collections/tests/locales/en/config.jshint.js","collections/tests/locales/en/translations.jshint.js","collections/tests/locales/es/config.jshint.js","collections/tests/locales/es/translations.jshint.js","collections/tests/models/collection.jshint.js","collections/tests/models/group.jshint.js","collections/tests/models/item.jshint.js","collections/tests/models/user.jshint.js","collections/tests/resolver.jshint.js","collections/tests/router.jshint.js","collections/tests/routes/application.jshint.js","collections/tests/routes/collection.jshint.js","collections/tests/routes/collection/add.jshint.js","collections/tests/routes/collection/browse.jshint.js","collections/tests/routes/collection/edit.jshint.js","collections/tests/routes/collection/group.jshint.js","collections/tests/routes/collection/group/index.jshint.js","collections/tests/routes/collection/group/item.jshint.js","collections/tests/routes/collection/index.jshint.js","collections/tests/routes/collection/item.jshint.js","collections/tests/routes/collection/search.jshint.js","collections/tests/routes/create.jshint.js","collections/tests/routes/index.jshint.js","collections/tests/routes/not-found.jshint.js","collections/tests/serializers/application.jshint.js","collections/tests/serializers/collection.jshint.js","collections/tests/serializers/item.jshint.js","collections/tests/serializers/user.jshint.js","collections/tests/services/theme.jshint.js","collections/tests/test-helper.js","collections/tests/test-helper.jshint.js","collections/tests/transforms/object.jshint.js","collections/tests/unit/controllers/collection/add-test.js","collections/tests/unit/controllers/collection/add-test.jshint.js","collections/tests/unit/controllers/collection/search-test.js","collections/tests/unit/controllers/collection/search-test.jshint.js","collections/tests/unit/helpers/conditions-for-contrib-removal-test.js","collections/tests/unit/helpers/conditions-for-contrib-removal-test.jshint.js","collections/tests/unit/helpers/contributor-is-current-user-test.js","collections/tests/unit/helpers/contributor-is-current-user-test.jshint.js","collections/tests/unit/helpers/filter-replace-test.js","collections/tests/unit/helpers/filter-replace-test.jshint.js","collections/tests/unit/helpers/get-ancestor-descriptor-test.js","collections/tests/unit/helpers/get-ancestor-descriptor-test.jshint.js","collections/tests/unit/helpers/if-filter-test.js","collections/tests/unit/helpers/if-filter-test.jshint.js","collections/tests/unit/helpers/is-section-editable-test.js","collections/tests/unit/helpers/is-section-editable-test.jshint.js","collections/tests/unit/helpers/min-admins-test.js","collections/tests/unit/helpers/min-admins-test.jshint.js","collections/tests/unit/helpers/min-bibliographic-test.js","collections/tests/unit/helpers/min-bibliographic-test.jshint.js","collections/tests/unit/helpers/number-format-test.js","collections/tests/unit/helpers/number-format-test.jshint.js","collections/tests/unit/helpers/permission-map-test.js","collections/tests/unit/helpers/permission-map-test.jshint.js","collections/tests/unit/helpers/permission-to-remove-contributor-test.js","collections/tests/unit/helpers/permission-to-remove-contributor-test.jshint.js","collections/tests/unit/helpers/permission-to-remove-contributors-test.js","collections/tests/unit/helpers/permission-to-remove-contributors-test.jshint.js","collections/tests/unit/helpers/route-prefix-test.js","collections/tests/unit/helpers/route-prefix-test.jshint.js","collections/tests/unit/helpers/safe-markup-test.js","collections/tests/unit/helpers/safe-markup-test.jshint.js","collections/tests/unit/helpers/slice-array-test.js","collections/tests/unit/helpers/slice-array-test.jshint.js","collections/tests/unit/helpers/user-is-contributor-test.js","collections/tests/unit/helpers/user-is-contributor-test.jshint.js","collections/tests/unit/models/collection-test.js","collections/tests/unit/models/collection-test.jshint.js","collections/tests/unit/models/group-test.js","collections/tests/unit/models/group-test.jshint.js","collections/tests/unit/models/item-test.js","collections/tests/unit/models/item-test.jshint.js","collections/tests/unit/routes/application-test.js","collections/tests/unit/routes/application-test.jshint.js","collections/tests/unit/routes/collection-test.js","collections/tests/unit/routes/collection-test.jshint.js","collections/tests/unit/routes/collection/add-test.js","collections/tests/unit/routes/collection/add-test.jshint.js","collections/tests/unit/routes/collection/browse-test.js","collections/tests/unit/routes/collection/browse-test.jshint.js","collections/tests/unit/routes/collection/edit-test.js","collections/tests/unit/routes/collection/edit-test.jshint.js","collections/tests/unit/routes/collection/group-test.js","collections/tests/unit/routes/collection/group-test.jshint.js","collections/tests/unit/routes/collection/group/index-test.js","collections/tests/unit/routes/collection/group/index-test.jshint.js","collections/tests/unit/routes/collection/group/item-test.js","collections/tests/unit/routes/collection/group/item-test.jshint.js","collections/tests/unit/routes/collection/index-test.js","collections/tests/unit/routes/collection/index-test.jshint.js","collections/tests/unit/routes/collection/item-test.js","collections/tests/unit/routes/collection/item-test.jshint.js","collections/tests/unit/routes/collection/search-test.js","collections/tests/unit/routes/collection/search-test.jshint.js","collections/tests/unit/routes/create-test.js","collections/tests/unit/routes/create-test.jshint.js","collections/tests/unit/routes/index-test.js","collections/tests/unit/routes/index-test.jshint.js","collections/tests/unit/routes/not-found-test.js","collections/tests/unit/routes/not-found-test.jshint.js","collections/tests/unit/serializers/application-test.js","collections/tests/unit/serializers/application-test.jshint.js","collections/tests/unit/serializers/collection-test.js","collections/tests/unit/serializers/collection-test.jshint.js","collections/tests/unit/transforms/object-test.js","collections/tests/unit/transforms/object-test.jshint.js","collections/tests/utils/itemClasses.jshint.js","collections/tests/utils/sampleLandingSettings.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('collections/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/collection.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/collection.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/collection.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/group.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/group.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/group.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/item.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/node.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/node.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/node.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/preprint.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/preprint.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/preprint.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/registration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/registration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/registration.js should pass jshint.');\n  });\n});","define('collections/tests/adapters/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass jshint.');\n  });\n});","define('collections/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('collections/tests/authenticators/osf-token.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/osf-token.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/osf-token.js should pass jshint.');\n  });\n});","define('collections/tests/components/add-node/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/add-node/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-node/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/add-website/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/add-website/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-website/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/browse-list/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/browse-list/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/browse-list/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/button-widget/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/button-widget/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/button-widget/component.js should pass jshint.\\ncomponents/button-widget/component.js: line 7, col 70, Missing semicolon.\\ncomponents/button-widget/component.js: line 14, col 50, Missing semicolon.\\ncomponents/button-widget/component.js: line 24, col 15, Expected \\':\\' and instead saw \\'pressButton\\'.\\ncomponents/button-widget/component.js: line 24, col 29, Expected \\'}\\' to match \\'{\\' from line 23 and instead saw \\'{\\'.\\ncomponents/button-widget/component.js: line 25, col 13, Expected \\'}\\' to match \\'{\\' from line 4 and instead saw \\'const\\'.\\ncomponents/button-widget/component.js: line 25, col 19, Expected \\')\\' and instead saw \\'parameters\\'.\\ncomponents/button-widget/component.js: line 25, col 30, Bad assignment.\\ncomponents/button-widget/component.js: line 27, col 30, Expected \\'}\\' to match \\'{\\' from line 26 and instead saw \\'this\\'.\\ncomponents/button-widget/component.js: line 28, col 22, Expected \\')\\' and instead saw \\':\\'.\\ncomponents/button-widget/component.js: line 28, col 34, Expected an assignment or function call and instead saw an expression.\\ncomponents/button-widget/component.js: line 28, col 35, Missing semicolon.\\ncomponents/button-widget/component.js: line 28, col 34, Unrecoverable syntax error. (82% scanned).\\n\\n12 errors');\n  });\n});","define('collections/tests/components/collection-item/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/collection-item/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/collection-item/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/collection-nav/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/collection-nav/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/collection-nav/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/file-uploader/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/file-uploader/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/file-uploader/component.js should pass jshint.\\ncomponents/file-uploader/component.js: line 12, col 59, Missing semicolon.\\ncomponents/file-uploader/component.js: line 13, col 69, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('collections/tests/components/group-detail/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/group-detail/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/group-detail/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/item-detail-page/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/item-detail-page/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/item-detail-page/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/landing-board/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/landing-board/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/landing-board/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/landing-copyright/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/landing-copyright/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/landing-copyright/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/landing-default/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/landing-default/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/landing-default/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/landing-hero/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/landing-hero/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/landing-hero/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/landing-list/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/landing-list/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/landing-list/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/navbar-auth-dropdown/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/navbar-auth-dropdown/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/navbar-auth-dropdown/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/paragraph-display/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/paragraph-display/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/paragraph-display/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/preprint-basics/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/preprint-basics/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/preprint-basics/component.js should pass jshint.\\ncomponents/preprint-basics/component.js: line 82, col 156, Missing semicolon.\\ncomponents/preprint-basics/component.js: line 140, col 44, \\'result\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('collections/tests/components/preprint-form-authors/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/preprint-form-authors/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/preprint-form-authors/component.js should pass jshint.\\ncomponents/preprint-form-authors/component.js: line 37, col 11, Missing semicolon.\\n\\n1 error');\n  });\n});","define('collections/tests/components/preprint-form-body/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/preprint-form-body/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/preprint-form-body/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/preprint-form-header/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/preprint-form-header/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/preprint-form-header/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/preprint-form-section/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/preprint-form-section/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/preprint-form-section/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/subject-picker/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/subject-picker/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/subject-picker/component.js should pass jshint.\\ncomponents/subject-picker/component.js: line 5, col 18, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 6, col 33, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 7, col 32, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 10, col 42, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 12, col 38, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 164, col 21, Expected \\'{\\' and instead saw \\'wipe\\'.\\ncomponents/subject-picker/component.js: line 169, col 71, Expected \\'{\\' and instead saw \\'continue\\'.\\ncomponents/subject-picker/component.js: line 183, col 60, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 198, col 39, Expected \\'{\\' and instead saw \\'continue\\'.\\ncomponents/subject-picker/component.js: line 205, col 21, Expected \\'{\\' and instead saw \\'this\\'.\\ncomponents/subject-picker/component.js: line 210, col 29, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/subject-picker/component.js: line 213, col 17, Expected \\'{\\' and instead saw \\'this\\'.\\ncomponents/subject-picker/component.js: line 225, col 44, \\'result\\' is defined but never used.\\ncomponents/subject-picker/component.js: line 223, col 17, \\'currentSubjects\\' is defined but never used.\\n\\n14 errors');\n  });\n});","define('collections/tests/components/text-field/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/text-field/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/text-field/component.js should pass jshint.');\n  });\n});","define('collections/tests/components/validated-input/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/validated-input/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/validated-input/component.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/add.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/add.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/collection/add.js should pass jshint.\\ncontrollers/collection/add.js: line 11, col 10, Expected \\'{\\' and instead saw \\'var\\'.\\ncontrollers/collection/add.js: line 11, col 14, \\'expires\\' is already defined.\\ncontrollers/collection/add.js: line 12, col 38, \\'expires\\' used out of scope.\\ncontrollers/collection/add.js: line 20, col 29, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/collection/add.js: line 20, col 34, Expected \\'{\\' and instead saw \\'c\\'.\\ncontrollers/collection/add.js: line 21, col 33, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/collection/add.js: line 21, col 37, Expected \\'{\\' and instead saw \\'return\\'.\\ncontrollers/collection/add.js: line 80, col 58, Expected \\'{\\' and instead saw \\'return\\'.\\ncontrollers/collection/add.js: line 85, col 13, Expected an assignment or function call and instead saw an expression.\\ncontrollers/collection/add.js: line 85, col 18, Missing semicolon.\\ncontrollers/collection/add.js: line 88, col 72, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/collection/add.js: line 90, col 43, Missing semicolon.\\ncontrollers/collection/add.js: line 131, col 65, Missing semicolon.\\ncontrollers/collection/add.js: line 154, col 9, Expected an assignment or function call and instead saw an expression.\\ncontrollers/collection/add.js: line 154, col 14, Missing semicolon.\\ncontrollers/collection/add.js: line 157, col 68, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/collection/add.js: line 159, col 39, Missing semicolon.\\ncontrollers/collection/add.js: line 191, col 42, \\'parameters\\' is defined but never used.\\ncontrollers/collection/add.js: line 199, col 43, \\'parameters\\' is defined but never used.\\ncontrollers/collection/add.js: line 205, col 42, \\'parameters\\' is defined but never used.\\ncontrollers/collection/add.js: line 214, col 42, \\'parameters\\' is defined but never used.\\ncontrollers/collection/add.js: line 227, col 23, Expected \\'}\\' to match \\'{\\' from line 43 and instead saw \\'function\\'.\\ncontrollers/collection/add.js: line 227, col 31, Bad invocation.\\ncontrollers/collection/add.js: line 227, col 70, Expected \\')\\' and instead saw \\'{\\'.\\ncontrollers/collection/add.js: line 227, col 71, Missing semicolon.\\ncontrollers/collection/add.js: line 228, col 52, Expected \\'{\\' and instead saw \\'return\\'.\\ncontrollers/collection/add.js: line 229, col 52, Expected \\'{\\' and instead saw \\'return\\'.\\ncontrollers/collection/add.js: line 230, col 48, Expected \\'{\\' and instead saw \\'node\\'.\\ncontrollers/collection/add.js: line 240, col 34, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/collection/add.js: line 245, col 26, Missing semicolon.\\ncontrollers/collection/add.js: line 245, col 36, Expected an assignment or function call and instead saw an expression.\\ncontrollers/collection/add.js: line 246, col 21, Missing semicolon.\\ncontrollers/collection/add.js: line 246, col 16, Unrecoverable syntax error. (54% scanned).\\n\\n33 errors');\n  });\n});","define('collections/tests/controllers/collection/browse.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/browse.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/browse.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/edit.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/group.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/group.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/group.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/group/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/group/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/group/index.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/group/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/group/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/group/item.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/index.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/item.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/collection/search.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/collection/search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/collection/search.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/create.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/create.js should pass jshint.');\n  });\n});","define('collections/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('collections/tests/ember-sinon-qunit/test', ['exports', 'ember', 'sinon', 'qunit', 'ember-qunit'], function (exports, _ember, _sinon, _qunit, _emberQunit) {\n  exports['default'] = test;\n\n  _sinon['default'].expectation.fail = _sinon['default'].assert.fail = function (msg) {\n    _qunit['default'].ok(false, msg);\n  };\n\n  _sinon['default'].assert.pass = function (assertion) {\n    _qunit['default'].ok(true, assertion);\n  };\n\n  _sinon['default'].config = {\n    injectIntoThis: false,\n    injectInto: null,\n    properties: ['spy', 'stub', 'mock', 'sandbox'],\n    useFakeTimers: false,\n    useFakeServer: false\n  };\n\n  function test(testName, callback) {\n    function sinonWrapper() {\n      var context = this;\n      if (_ember['default'].isBlank(context)) {\n        context = {};\n      }\n      _sinon['default'].config.injectInto = context;\n\n      return _sinon['default'].test(callback).apply(context, arguments);\n    }\n\n    return (0, _emberQunit.test)(testName, sinonWrapper);\n  }\n});","define('collections/tests/factories/citation', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('citation', {\n        'default': {\n            citation: function citation() {\n                return _faker['default'].lorem.words(10);\n            }\n        }\n    });\n});","define('collections/tests/factories/collection', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('collection', {\n        'default': {\n            title: function title() {\n                return _faker['default'].lorem.words(3);\n            },\n            dateCreated: function dateCreated() {\n                return _faker['default'].date.past(1);\n            },\n            dateModified: function dateModified() {\n                return _faker['default'].date.recent(1);\n            },\n            bookmarks: false\n        },\n        traits: {\n            hasNodes: {\n                linkedNodes: _emberDataFactoryGuy['default'].hasMany('node', 3)\n            },\n            hasRegistrations: {\n                linkedRegistrations: _emberDataFactoryGuy['default'].hasMany('registration', 3)\n            },\n            isBookmark: {\n                bookmarks: true\n            }\n        }\n    });\n});","define('collections/tests/factories/comment-report', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('comment-report', {\n        'default': {\n            category: function category() {\n                return _faker['default'].random.arrayElement(['hate', 'spam', 'violence']);\n            },\n            text: _emberDataFactoryGuy['default'].belongsTo('comment')\n        }\n    });\n});","define('collections/tests/factories/comment', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('comment', {\n        'default': {\n            content: function content() {\n                return _faker['default'].lorem.sentence();\n            },\n\n            dateCreated: function dateCreated() {\n                return _faker['default'].date.past(1);\n            },\n            dateModified: function dateModified() {\n                return _faker['default'].date.recent(1);\n            },\n\n            modified: true,\n            deleted: false,\n\n            isAbuse: false,\n            hasChildren: false,\n\n            canEdit: true\n        },\n        traits: {\n            // List of possible \"page\" values h/t Saman- must be one of these values. Mutually exclusive.\n            isWiki: {\n                page: 'wiki'\n            },\n            isNode: {\n                page: 'node'\n            },\n            isFile: {\n                page: 'files'\n            },\n            // TODO: Add a hasReplies trait in the future to support replies- can we make reply page type match the specified parent type?\n            // Not sure if reply needs to have same page type for hasReplies to be useful. Can always make manual replies with relevant type\n            hasReplies: {\n                replies: _emberDataFactoryGuy['default'].hasMany('comment', 3)\n            }\n        }\n    });\n});","define('collections/tests/factories/contributor', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('contributor', {\n        'default': {\n            bibliographic: function bibliographic() {\n                return _faker['default'].random.boolean();\n            },\n            permission: function permission() {\n                return _faker['default'].random.arrayElement(['read', 'write', 'admin']);\n            },\n            // nodeID: // TODO: Field not defined in serializer. Find out meaning and add to factory.\n            users: _emberDataFactoryGuy['default'].belongsTo('user'),\n            index: function index() {\n                return _faker['default'].random.number();\n            },\n            fullName: function fullName() {\n                return _faker['default'].lorem.words(2);\n            },\n            email: function email() {\n                return _faker['default'].internet.email();\n            },\n            node: _emberDataFactoryGuy['default'].belongsTo('node')\n        }\n    });\n});","define('collections/tests/factories/draft-registration', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('draft-registration', {\n        'default': {\n            registrationSupplement: function registrationSupplement() {\n                return _faker['default'].lorem.words(1);\n            },\n            datetimeInitiated: function datetimeInitiated() {\n                return _faker['default'].date.past(1);\n            },\n            datetimeUpdated: function datetimeUpdated() {\n                return _faker['default'].date.recent();\n            },\n            branchedFrom: _emberDataFactoryGuy['default'].belongsTo('node'),\n            initiator: _emberDataFactoryGuy['default'].belongsTo('user'),\n            registrationSchema: _emberDataFactoryGuy['default'].belongsTo('metaschema')\n        }\n    });\n});","define('collections/tests/factories/file-provider', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n    _emberDataFactoryGuy['default'].define('file-provider', {\n        'default': {\n            name: 'osfstorage',\n            kind: 'folder',\n            path: '/',\n            provider: 'osfstorage',\n            node: _emberDataFactoryGuy['default'].belongsTo('node')\n        },\n        traits: {\n            hasFiles: {\n                files: function files() {\n                    return _emberDataFactoryGuy['default'].hasMany('file', 3);\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/file-version', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('file-version', {\n        'default': {\n            size: function size() {\n                return _faker['default'].random.number();\n            },\n            contentType: 'text/plain' }\n    });\n});\n// faker.system may not come with older versions of lib","define('collections/tests/factories/file', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('file', {\n        'default': {\n            name: function name() {\n                return _faker['default'].lorem.words(1) + '.txt';\n            },\n            kind: 'file',\n            path: '/1234567890', // Faker.system.filePath may not yet be implemented\n            size: function size() {\n                return _faker['default'].random.number();\n            },\n            provider: 'osfstorage',\n            materializedPath: function materializedPath() {\n                return '/' + _faker['default'].lorem.words(1) + '.png';\n            },\n            lastTouched: null,\n\n            dateModified: function dateModified() {\n                return _faker['default'].date.recent(1);\n            },\n            dateCreated: function dateCreated() {\n                return _faker['default'].date.past(1);\n            },\n\n            isProvider: false,\n            checkout: null,\n\n            links: {\n                upload: '/this/is/an/upload/url',\n                download: '/this/is/a/download/url',\n                move: '/this/is/a/move/url',\n                'delete': '/this/is/a/delete/url',\n                new_folder: '/this/is/a/new_folder/url'\n            }\n        },\n        traits: {\n            // Folder specific\n            isFolder: {\n                kind: 'folder',\n                materializedPath: function materializedPath() {\n                    return '/' + _faker['default'].lorem.words(1);\n                },\n                files: function files() {\n                    return _emberDataFactoryGuy['default'].hasMany('file', 3);\n                }\n            },\n            // File specific\n            hasVersions: {\n                kind: 'file',\n                versions: function versions() {\n                    return _emberDataFactoryGuy['default'].hasMany('file-version', 3);\n                }\n            },\n            hasComments: {\n                kind: 'file',\n                comments: function comments() {\n                    return _emberDataFactoryGuy['default'].hasMany('comment', 3);\n                }\n            },\n            hasTags: {\n                kind: 'file',\n                tags: function tags() {\n                    return [_faker['default'].lorem.words(1), _faker['default'].lorem.words(1), _faker['default'].lorem.words(1)];\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/institution', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('institution', {\n        'default': {\n            name: function name() {\n                return _faker['default'].lorem.words(3);\n            },\n            description: function description() {\n                return _faker['default'].lorem.sentences(3);\n            },\n            logoPath: '/img.jpg',\n            authUrl: function authUrl() {\n                return _faker['default'].internet.url();\n            }\n        },\n        traits: {\n            // TODO: Add children relations, if that field turns out to be needed after all (henrique)\n            hasNodes: {\n                nodes: function nodes() {\n                    return _emberDataFactoryGuy['default'].hasMany('node', 3);\n                }\n            },\n            hasRegistrations: {\n                registrations: function registrations() {\n                    return _emberDataFactoryGuy['default'].hasMany('registration', 3);\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/license', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('license', {\n        'default': {\n            name: function name() {\n                return _faker['default'].lorem.words(1);\n            },\n            text: function text() {\n                return _faker['default'].lorem.words(15);\n            }\n        }\n    });\n});","define('collections/tests/factories/log', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('log', {\n        'default': {\n            date: function date() {\n                return _faker['default'].date.past(1);\n            },\n            // Extracted from Nodelog.actions as of May 24, 2016\n            action: function action() {\n                return _faker['default'].random.arrayElement(['checked_in', 'checked_out', 'file_tag_removed', 'file_tag_added', 'created_from', 'project_created', 'project_registered', 'project_deleted', 'node_created', 'node_forked', 'node_removed', 'pointer_created', 'pointer_forked', 'pointer_removed', 'wiki_updated', 'wiki_deleted', 'wiki_renamed', 'made_wiki_public', 'made_wiki_private', 'contributor_added', 'contributor_removed', 'contributors_reordered', 'permissions_updated', 'made_private', 'made_public', 'tag_added', 'tag_removed', 'edit_title', 'edit_description', 'updated_fields', 'addon_file_moved', 'addon_file_copied', 'folder_created', 'file_added', 'file_updated', 'file_removed', 'file_restored', 'addon_added', 'addon_removed', 'comment_added', 'comment_removed', 'comment_updated', 'made_contributor_visible', 'made_contributor_invisible', 'external_ids_added', 'embargo_approved', 'embargo_cancelled', 'embargo_completed', 'embargo_initiated', 'retraction_approved', 'retraction_cancelled', 'retraction_initiated', 'registration_cancelled', 'registration_initiated', 'registration_approved', 'prereg_registration_initiated', 'citation_added', 'citation_edited', 'citation_removed', 'primary_institution_changed', 'primary_institution_removed']);\n            },\n            params: {} }\n    });\n});\n// Correct info from this field will depend on the log type\n// TODO: Figure out node vs originalnode vs linkedNode vs templateNode, and add sample traits with correct values","define('collections/tests/factories/metaschema', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('metaschema', {\n        'default': {\n            name: function name() {\n                return _faker['default'].lorem.words(1);\n            },\n            schemaVersion: function schemaVersion() {\n                return _faker['default'].random.number();\n            },\n            schema: {}\n        }\n    });\n});","define('collections/tests/factories/node-link', ['exports', 'ember-data-factory-guy'], function (exports, _emberDataFactoryGuy) {\n\n    _emberDataFactoryGuy['default'].define('node-link', {\n        'default': {\n            targetNode: _emberDataFactoryGuy['default'].belongsTo('node')\n        }\n    });\n});","define('collections/tests/factories/node', ['exports', 'ember-data-factory-guy', 'faker', 'ember-osf/const/permissions'], function (exports, _emberDataFactoryGuy, _faker, _emberOsfConstPermissions) {\n\n    _emberDataFactoryGuy['default'].define('node', {\n        'default': {\n            title: function title() {\n                return _faker['default'].lorem.words(4);\n            },\n            description: function description() {\n                return _faker['default'].lorem.paragraphs(2, '\\n');\n            },\n            // Extracted from Node model CATEGORY_MAP as of May 24, 2016\n            category: function category() {\n                return _faker['default'].random.arrayElement(['analysis', 'communication', 'data', 'hypothesis', 'instrumentation', 'methods and measures', 'procedure', 'project', 'software', 'other', '']);\n            },\n\n            currentUserPermissions: function currentUserPermissions() {\n                return _faker['default'].random.arrayElement([_emberOsfConstPermissions['default'].READ, _emberOsfConstPermissions['default'].WRITE, _emberOsfConstPermissions['default'].ADMIN]);\n            },\n\n            fork: false,\n            collection: false,\n            registration: false,\n            'public': function _public() {\n                return _faker['default'].random.boolean();\n            },\n\n            dateCreated: function dateCreated() {\n                return _faker['default'].date.past(1);\n            },\n            dateModified: function dateModified() {\n                return _faker['default'].date.recent(1);\n            }\n        },\n        traits: {\n            hasParent: { // Is a child of a public node\n                parent: function parent() {\n                    return _emberDataFactoryGuy['default'].belongsTo('node');\n                }\n            },\n            hasChildren: { // Has one layer of child projects\n                children: _emberDataFactoryGuy['default'].hasMany('node', 3)\n            },\n            hasInstitution: {\n                affiliatedInstitutions: _emberDataFactoryGuy['default'].hasMany('institution', 1)\n            },\n            hasComments: {\n                comments: _emberDataFactoryGuy['default'].hasMany('comment', 3)\n            },\n            hasContributors: {\n                contributors: _emberDataFactoryGuy['default'].hasMany('contributor', 3)\n            },\n            hasFiles: {\n                files: _emberDataFactoryGuy['default'].hasMany('file-provider', 3, 'hasFiles')\n            },\n            hasRegistrations: {\n                registrations: _emberDataFactoryGuy['default'].hasMany('registration', 1)\n            },\n            hasLogs: {\n                logs: _emberDataFactoryGuy['default'].hasMany('log', 5)\n            },\n            hasTags: {\n                tags: function tags() {\n                    return [_faker['default'].lorem.words(1), _faker['default'].lorem.words(1), _faker['default'].lorem.words(1)];\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/preprint-provider', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('preprint-provider', {\n        'default': {\n            name: function name() {\n                return _faker['default'].lorem.words(1);\n            },\n            logoPath: function logoPath() {\n                return '/static/img/preprint_providers/' + _faker['default'].lorem.words(1) + '.png';\n            },\n            bannerPath: function bannerPath() {\n                return '/static/img/preprint_providers/' + _faker['default'].lorem.words(1) + '.png';\n            },\n            description: function description() {\n                return _faker['default'].lorem.words(3);\n            },\n            advisoryBoard: function advisoryBoard() {\n                return _faker['default'].lorem.paragraphs(2);\n            },\n            emailContact: 'contact+fake@osf.io',\n            emailSupport: 'support+fake@osf.io',\n            headerText: function headerText() {\n                return _faker['default'].lorem.words(3);\n            },\n            taxonomy: _emberDataFactoryGuy['default'].hasMany('taxonomy', 20)\n        },\n        traits: {\n            isOSF: {\n                id: 'osf'\n            },\n            hasPreprints: {\n                preprints: _emberDataFactoryGuy['default'].hasMany('preprint', 5)\n            },\n            hasLicenses: {\n                licensesAcceptable: _emberDataFactoryGuy['default'].hasMany('license', 3)\n            }\n        }\n    });\n});","define('collections/tests/factories/preprint', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('preprint', {\n        'default': {\n            dateCreated: function dateCreated() {\n                return _faker['default'].date.past(2);\n            },\n            datePublished: function datePublished() {\n                return _faker['default'].date.past(1);\n            },\n            dateModified: function dateModified() {\n                return _faker['default'].date.recent();\n            },\n            doi: function doi() {\n                return '10.1000/' + String(_faker['default'].random.number());\n            },\n            node: _emberDataFactoryGuy['default'].belongsTo('node'),\n            license: _emberDataFactoryGuy['default'].belongsTo('license'),\n            primaryFile: _emberDataFactoryGuy['default'].belongsTo('file'),\n            provider: _emberDataFactoryGuy['default'].belongsTo('preprint-provider'),\n            isPublished: false,\n            isPreprintOrphan: false\n        },\n        traits: {\n            hasBeenPublished: {\n                isPublished: true\n            }\n        }\n    });\n});","define('collections/tests/factories/registration', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('registration', {\n        'default': {\n            dateRegistered: function dateRegistered() {\n                return _faker['default'].date.past(1);\n            },\n            pendingRegistrationApproval: false,\n\n            embargoEndDate: function embargoEndDate() {\n                return _faker['default'].date.future(1);\n            },\n            pendingEmbargoApproval: false,\n\n            withdrawn: false,\n            pendingWithdrawal: false,\n\n            // TODO: Implement with sample data for faker, possibly traits for different reg types\n            registrationSupplement: null,\n            registeredMeta: null,\n\n            registeredFrom: function registeredFrom() {\n                return _emberDataFactoryGuy['default'].belongsTo('node');\n            },\n            registeredBy: function registeredBy() {\n                return _emberDataFactoryGuy['default'].belongsTo('user');\n            },\n\n            contributors: function contributors() {\n                return _emberDataFactoryGuy['default'].hasMany('contributor', 3);\n            }\n        },\n        traits: {\n            hasComments: {\n                comments: function comments() {\n                    return _emberDataFactoryGuy['default'].hasMany('comment', 3);\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/taxonomy', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('taxonomy', {\n        'default': {\n            text: function text() {\n                return _faker['default'].lorem.words(2);\n            },\n            child_count: function child_count() {\n                return _faker['default'].random.number();\n            },\n            parents: null\n        },\n        traits: {\n            hasParents: {\n                parents: function parents() {\n                    return [String(_faker['default'].random.number())];\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/user', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('user', {\n        'default': {\n            fullName: function fullName() {\n                return _faker['default'].name.findName();\n            },\n            givenName: function givenName() {\n                return _faker['default'].name.firstName();\n            },\n            familyName: function familyName() {\n                return _faker['default'].name.lastName();\n            },\n            dateRegistered: function dateRegistered() {\n                return _faker['default'].date.past(1);\n            }\n        },\n        traits: {\n            // TODO: Consider writing tests that would force pagination of relationships (!)\n            hasProjects: {\n                nodes: function nodes() {\n                    return _emberDataFactoryGuy['default'].hasMany('node', 3);\n                }\n            },\n            hasRegistrations: {\n                registrations: function registrations() {\n                    return _emberDataFactoryGuy['default'].hasMany('registration', 3);\n                }\n            },\n            hasInstitutions: {\n                affiliatedInstitutions: function affiliatedInstitutions() {\n                    return _emberDataFactoryGuy['default'].hasMany('institution', 2);\n                }\n            }\n        }\n    });\n});","define('collections/tests/factories/wiki', ['exports', 'ember-data-factory-guy', 'faker'], function (exports, _emberDataFactoryGuy, _faker) {\n\n    _emberDataFactoryGuy['default'].define('wiki', {\n        defaults: {\n            kind: 'file',\n            name: function name() {\n                return _faker['default'].lorem.words(2);\n            },\n            dateModified: function dateModified() {\n                return _faker['default'].date.recent();\n            },\n            contentType: 'text/markdown',\n            path: function path() {\n                return '/' + _faker['default'].lorem.words(1);\n            },\n            currentUserCanComment: function currentUserCanComment() {\n                return _faker['default'].random.boolean();\n            },\n            materializedPath: function materializedPath() {\n                return '/' + _faker['default'].lorem.words(1);\n            },\n            size: function size() {\n                return _faker['default'].random.number();\n            },\n            node: _emberDataFactoryGuy['default'].belongsTo('node')\n        }\n    });\n});","define('collections/tests/helpers/conditions-for-contrib-removal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/conditions-for-contrib-removal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/conditions-for-contrib-removal.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/contributor-is-current-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/contributor-is-current-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/contributor-is-current-user.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('collections/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('collections/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('collections/tests/helpers/ember-sortable/test-helpers', ['exports', 'ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function (exports, _emberSortableHelpersDrag, _emberSortableHelpersReorder) {});","define('collections/tests/helpers/filter-replace.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/filter-replace.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/filter-replace.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/get-ancestor-descriptor.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/get-ancestor-descriptor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/get-ancestor-descriptor.js should pass jshint.\\nhelpers/get-ancestor-descriptor.js: line 33, col 40, Expected \\'{\\' and instead saw \\'rootId\\'.\\nhelpers/get-ancestor-descriptor.js: line 34, col 42, Expected \\'{\\' and instead saw \\'parentId\\'.\\nhelpers/get-ancestor-descriptor.js: line 35, col 48, Expected \\'{\\' and instead saw \\'parentParentId\\'.\\n\\n3 errors');\n  });\n});","define('collections/tests/helpers/if-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/if-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/if-filter.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/is-section-editable.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/is-section-editable.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-section-editable.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/min-admins.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/min-admins.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/min-admins.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/min-bibliographic.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/min-bibliographic.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/min-bibliographic.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'collections/tests/helpers/start-app', 'collections/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _collectionsTestsHelpersStartApp, _collectionsTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _collectionsTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _collectionsTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('collections/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/number-format.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/number-format.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/number-format.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/permission-map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/permission-map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/permission-map.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/permission-to-remove-contributor.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/permission-to-remove-contributor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/permission-to-remove-contributor.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/permission-to-remove-contributors.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/permission-to-remove-contributors.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/permission-to-remove-contributors.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/resolver', ['exports', 'collections/resolver', 'collections/config/environment'], function (exports, _collectionsResolver, _collectionsConfigEnvironment) {\n\n  var resolver = _collectionsResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _collectionsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _collectionsConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('collections/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/route-prefix.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/route-prefix.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/route-prefix.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/safe-markup.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/safe-markup.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/safe-markup.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/slice-array.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/slice-array.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/slice-array.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/start-app', ['exports', 'ember', 'collections/app', 'collections/config/environment'], function (exports, _ember, _collectionsApp, _collectionsConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _collectionsConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _collectionsApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('collections/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('collections/tests/helpers/user-is-contributor.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/user-is-contributor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/user-is-contributor.js should pass jshint.');\n  });\n});","define('collections/tests/initializers/promise.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/promise.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/promise.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/add-node/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('add-node', 'Integration | Component | add node', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'add-node', ['loc', [null, [1, 0], [1, 12]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'add-node', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/add-node/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/add-node/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-node/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/add-project/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('add-project', 'Integration | Component | add project', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'add-project', ['loc', [null, [1, 0], [1, 15]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'add-project', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/add-project/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/add-project/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-project/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/add-website/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('add-website', 'Integration | Component | add website', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'add-website', ['loc', [null, [1, 0], [1, 15]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'add-website', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/add-website/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/add-website/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-website/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/browse-list/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('browse-list', 'Integration | Component | browse list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'browse-list', ['loc', [null, [1, 0], [1, 15]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'browse-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/browse-list/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/browse-list/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/browse-list/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/collection-item/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('collection-item', 'Integration | Component | collection item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'collection-item', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'collection-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/collection-item/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/collection-item/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/collection-item/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/collection-nav/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('collection-nav', 'Integration | Component | collection nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'collection-nav', ['loc', [null, [1, 0], [1, 18]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'collection-nav', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/collection-nav/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/collection-nav/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/collection-nav/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/group-detail/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('group-detail', 'Integration | Component | group detail', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'group-detail', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'group-detail', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/group-detail/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/group-detail/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/group-detail/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/item-detail-page/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('item-detail-page', 'Integration | Component | item detail page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'item-detail-page', ['loc', [null, [1, 0], [1, 20]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'item-detail-page', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/item-detail-page/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/item-detail-page/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-detail-page/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/landing-board/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('landing-board', 'Integration | Component | landing board', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'landing-board', ['loc', [null, [1, 0], [1, 17]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'landing-board', [], [], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/landing-board/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/landing-board/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/landing-board/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/landing-copyright/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('landing-copyright', 'Integration | Component | landing copyright', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'landing-copyright', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'landing-copyright', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/landing-copyright/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/landing-copyright/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/landing-copyright/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/landing-default/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('landing-default', 'Integration | Component | landing default', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'landing-default', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'landing-default', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/landing-default/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/landing-default/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/landing-default/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/landing-hero/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('landing-hero', 'Integration | Component | landing hero', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'landing-hero', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'landing-hero', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/landing-hero/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/landing-hero/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/landing-hero/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/landing-list/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('landing-list', 'Integration | Component | landing list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'landing-list', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'landing-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/landing-list/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/landing-list/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/landing-list/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/navbar-auth-dropdown/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('navbar-auth-dropdown', 'Integration | Component | navbar auth dropdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'navbar-auth-dropdown', ['loc', [null, [1, 0], [1, 24]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'navbar-auth-dropdown', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/navbar-auth-dropdown/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/navbar-auth-dropdown/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/navbar-auth-dropdown/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/preprint-basics/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('preprint-basics', 'Integration | Component | preprint basics', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'preprint-basics', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'preprint-basics', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/preprint-basics/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/preprint-basics/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/preprint-basics/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/preprint-form-authors/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('preprint-form-authors', 'Integration | Component | preprint form authors', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'preprint-form-authors', ['loc', [null, [1, 0], [1, 25]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'preprint-form-authors', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/preprint-form-authors/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/preprint-form-authors/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/preprint-form-authors/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/preprint-form-body/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('preprint-form-body', 'Integration | Component | preprint form body', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'preprint-form-body', ['loc', [null, [1, 0], [1, 22]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'preprint-form-body', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/preprint-form-body/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/preprint-form-body/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/preprint-form-body/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/preprint-form-header/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('preprint-form-header', 'Integration | Component | preprint form header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'preprint-form-header', ['loc', [null, [1, 0], [1, 24]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'preprint-form-header', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/preprint-form-header/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/preprint-form-header/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/preprint-form-header/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/preprint-form-section/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('preprint-form-section', 'Integration | Component | preprint form section', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'preprint-form-section', ['loc', [null, [1, 0], [1, 25]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'preprint-form-section', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/preprint-form-section/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/preprint-form-section/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/preprint-form-section/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/subject-picker/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('subject-picker', 'Integration | Component | subject picker', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'subject-picker', ['loc', [null, [1, 0], [1, 18]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'subject-picker', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/subject-picker/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/subject-picker/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/subject-picker/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/integration/components/validated-input/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('validated-input', 'Integration | Component | validated input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'validated-input', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'validated-input', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('collections/tests/integration/components/validated-input/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/validated-input/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validated-input/component-test.js should pass jshint.');\n  });\n});","define('collections/tests/locales/en/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/en/config.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/config.js should pass jshint.');\n  });\n});","define('collections/tests/locales/en/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('collections/tests/locales/es/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/es/config.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/config.js should pass jshint.');\n  });\n});","define('collections/tests/locales/es/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/es/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/translations.js should pass jshint.');\n  });\n});","define('collections/tests/models/collection.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/collection.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/collection.js should pass jshint.');\n  });\n});","define('collections/tests/models/group.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/group.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/group.js should pass jshint.');\n  });\n});","define('collections/tests/models/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/item.js should pass jshint.');\n  });\n});","define('collections/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('collections/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('collections/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('collections/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/add.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/add.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/collection/add.js should pass jshint.\\nroutes/collection/add.js: line 727, col 9, Forgotten \\'debugger\\' statement?\\n\\n1 error');\n  });\n});","define('collections/tests/routes/collection/browse.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/browse.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/browse.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/edit.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/group.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/group.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/group.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/group/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/group/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/group/index.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/group/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/group/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/group/item.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/index.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/item.js should pass jshint.');\n  });\n});","define('collections/tests/routes/collection/search.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/collection/search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/collection/search.js should pass jshint.');\n  });\n});","define('collections/tests/routes/create.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create.js should pass jshint.');\n  });\n});","define('collections/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('collections/tests/routes/not-found.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/not-found.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/not-found.js should pass jshint.');\n  });\n});","define('collections/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('collections/tests/serializers/collection.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/collection.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/collection.js should pass jshint.');\n  });\n});","define('collections/tests/serializers/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/item.js should pass jshint.');\n  });\n});","define('collections/tests/serializers/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/user.js should pass jshint.');\n  });\n});","define('collections/tests/services/theme.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/theme.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/theme.js should pass jshint.\\nservices/theme.js: line 32, col 13, Expected \\'{\\' and instead saw \\'return\\'.\\nservices/theme.js: line 79, col 13, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n2 errors');\n  });\n});","define('collections/tests/test-helper', ['exports', 'collections/tests/helpers/resolver', 'ember-qunit'], function (exports, _collectionsTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_collectionsTestsHelpersResolver['default']);\n});","define('collections/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('collections/tests/transforms/object.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/object.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/object.js should pass jshint.');\n  });\n});","define('collections/tests/unit/controllers/collection/add-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:collection/add', 'Unit | Controller | collection/add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('collections/tests/unit/controllers/collection/add-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/collection/add-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/collection/add-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/controllers/collection/search-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:collection/search', 'Unit | Controller | collection/search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('collections/tests/unit/controllers/collection/search-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/collection/search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/collection/search-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/conditions-for-contrib-removal-test', ['exports', 'collections/helpers/conditions-for-contrib-removal', 'qunit'], function (exports, _collectionsHelpersConditionsForContribRemoval, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | conditions for contrib removal');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersConditionsForContribRemoval.conditionsForContribRemoval)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/conditions-for-contrib-removal-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/conditions-for-contrib-removal-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/conditions-for-contrib-removal-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/contributor-is-current-user-test', ['exports', 'collections/helpers/contributor-is-current-user', 'qunit'], function (exports, _collectionsHelpersContributorIsCurrentUser, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | contributor is current user');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersContributorIsCurrentUser.contributorIsCurrentUser)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/contributor-is-current-user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/contributor-is-current-user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/contributor-is-current-user-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/filter-replace-test', ['exports', 'collections/helpers/filter-replace', 'qunit'], function (exports, _collectionsHelpersFilterReplace, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | filter replace');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersFilterReplace.filterReplace)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/filter-replace-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/filter-replace-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/filter-replace-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/get-ancestor-descriptor-test', ['exports', 'collections/helpers/get-ancestor-descriptor', 'qunit'], function (exports, _collectionsHelpersGetAncestorDescriptor, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | get ancestor descriptor');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersGetAncestorDescriptor.getAncestorDescriptor)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/get-ancestor-descriptor-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/get-ancestor-descriptor-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/get-ancestor-descriptor-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/if-filter-test', ['exports', 'collections/helpers/if-filter', 'qunit'], function (exports, _collectionsHelpersIfFilter, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | if filter');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersIfFilter.ifFilter)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/if-filter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/if-filter-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/if-filter-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/is-section-editable-test', ['exports', 'collections/helpers/is-section-editable', 'qunit'], function (exports, _collectionsHelpersIsSectionEditable, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | is section editable');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersIsSectionEditable.isSectionEditable)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/is-section-editable-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/is-section-editable-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/is-section-editable-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/min-admins-test', ['exports', 'collections/helpers/min-admins', 'qunit'], function (exports, _collectionsHelpersMinAdmins, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | min admins');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersMinAdmins.minAdmins)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/min-admins-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/min-admins-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/min-admins-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/min-bibliographic-test', ['exports', 'collections/helpers/min-bibliographic', 'qunit'], function (exports, _collectionsHelpersMinBibliographic, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | min bibliographic');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersMinBibliographic.minBibliographic)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/min-bibliographic-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/min-bibliographic-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/min-bibliographic-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/number-format-test', ['exports', 'collections/helpers/number-format', 'qunit'], function (exports, _collectionsHelpersNumberFormat, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | number format');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersNumberFormat.numberFormat)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/number-format-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/number-format-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/number-format-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/permission-map-test', ['exports', 'collections/helpers/permission-map', 'qunit'], function (exports, _collectionsHelpersPermissionMap, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | permission map');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersPermissionMap.permissionMap)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/permission-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/permission-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/permission-map-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/permission-to-remove-contributor-test', ['exports', 'collections/helpers/permission-to-remove-contributor', 'qunit'], function (exports, _collectionsHelpersPermissionToRemoveContributor, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | permission to remove contributor');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersPermissionToRemoveContributor.permissionToRemoveContributor)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/permission-to-remove-contributor-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/permission-to-remove-contributor-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/permission-to-remove-contributor-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/permission-to-remove-contributors-test', ['exports', 'collections/helpers/permission-to-remove-contributors', 'qunit'], function (exports, _collectionsHelpersPermissionToRemoveContributors, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | permission to remove contributors');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersPermissionToRemoveContributors.permissionToRemoveContributors)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/permission-to-remove-contributors-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/permission-to-remove-contributors-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/permission-to-remove-contributors-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/route-prefix-test', ['exports', 'collections/helpers/route-prefix', 'qunit'], function (exports, _collectionsHelpersRoutePrefix, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | route prefix');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersRoutePrefix.routePrefix)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/route-prefix-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/route-prefix-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/route-prefix-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/safe-markup-test', ['exports', 'collections/helpers/safe-markup', 'qunit'], function (exports, _collectionsHelpersSafeMarkup, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | safe markup');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersSafeMarkup.safeMarkup)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/safe-markup-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/safe-markup-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/safe-markup-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/slice-array-test', ['exports', 'collections/helpers/slice-array', 'qunit'], function (exports, _collectionsHelpersSliceArray, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | slice array');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersSliceArray.sliceArray)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/slice-array-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/slice-array-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/slice-array-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/helpers/user-is-contributor-test', ['exports', 'collections/helpers/user-is-contributor', 'qunit'], function (exports, _collectionsHelpersUserIsContributor, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | user is contributor');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _collectionsHelpersUserIsContributor.userIsContributor)([42]);\n    assert.ok(result);\n  });\n});","define('collections/tests/unit/helpers/user-is-contributor-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/user-is-contributor-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/user-is-contributor-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/models/collection-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('collection', 'Unit | Model | collection', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('collections/tests/unit/models/collection-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/collection-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/collection-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/models/group-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('group', 'Unit | Model | group', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('collections/tests/unit/models/group-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/group-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/group-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/models/item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('item', 'Unit | Model | item', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('collections/tests/unit/models/item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/item-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection', 'Unit | Route | collection', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/add-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/add', 'Unit | Route | collection/add', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/add-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/add-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/add-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/browse-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/browse', 'Unit | Route | collection/browse', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/browse-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/browse-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/browse-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/edit', 'Unit | Route | collection/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/edit-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/group-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/group', 'Unit | Route | collection/group', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/group-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/group-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/group-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/group/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/group/index', 'Unit | Route | collection/group/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/group/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/group/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/group/index-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/group/item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/group/item', 'Unit | Route | collection/group/item', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/group/item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/group/item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/group/item-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/index', 'Unit | Route | collection/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/index-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/item', 'Unit | Route | collection/item', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/item-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/collection/search-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:collection/search', 'Unit | Route | collection/search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/collection/search-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/collection/search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/collection/search-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/create-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:create', 'Unit | Route | create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/create-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/create-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/routes/not-found-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:not-found', 'Unit | Route | not found', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('collections/tests/unit/routes/not-found-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/not-found-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/not-found-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('collections/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/serializers/collection-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('collection', 'Unit | Serializer | collection', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:collection']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('collections/tests/unit/serializers/collection-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/collection-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/collection-test.js should pass jshint.');\n  });\n});","define('collections/tests/unit/transforms/object-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:object', 'Unit | Transform | object', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('collections/tests/unit/transforms/object-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/object-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/object-test.js should pass jshint.');\n  });\n});","define('collections/tests/utils/itemClasses.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/itemClasses.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/itemClasses.js should pass jshint.');\n  });\n});","define('collections/tests/utils/sampleLandingSettings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/sampleLandingSettings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/sampleLandingSettings.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('collections/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllllIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllllllIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllllllIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}