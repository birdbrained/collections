"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('collections/adapters/application', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONAPIAdapter.extend({});
});
define('collections/adapters/citation', ['exports', 'ember-osf/adapters/citation'], function (exports, _emberOsfAdaptersCitation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersCitation['default'];
    }
  });
});
define('collections/adapters/collection', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].JSONAPIAdapter.extend({
        session: _ember['default'].inject.service(),
        host: 'http://localhost:8000',
        namespace: 'api',
        ajax: function ajax(url, method, hash) {
            hash = hash || {};
            hash.crossOrigin = true;
            hash.xhrFields = { withCredentials: true };
            hash.headers = hash.headers || {};
            hash.headers['X-CSRFTOKEN'] = this.get('session.data.authenticated.csrfToken');
            return this._super(url, method, hash);
        },
        buildURL: function buildURL() {
            var base = this._super.apply(this, arguments);
            return base + '/';
        }
    });
});
define('collections/adapters/comment-report', ['exports', 'ember-osf/adapters/comment-report'], function (exports, _emberOsfAdaptersCommentReport) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersCommentReport['default'];
    }
  });
});
define('collections/adapters/comment', ['exports', 'ember-osf/adapters/comment'], function (exports, _emberOsfAdaptersComment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersComment['default'];
    }
  });
});
define('collections/adapters/contributor', ['exports', 'ember-osf/adapters/contributor'], function (exports, _emberOsfAdaptersContributor) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersContributor['default'];
    }
  });
});
define('collections/adapters/draft-registration', ['exports', 'ember-osf/adapters/draft-registration'], function (exports, _emberOsfAdaptersDraftRegistration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersDraftRegistration['default'];
    }
  });
});
define('collections/adapters/file-contents', ['exports', 'ember-osf/adapters/file-contents'], function (exports, _emberOsfAdaptersFileContents) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersFileContents['default'];
    }
  });
});
define('collections/adapters/file-provider', ['exports', 'ember-osf/adapters/file-provider'], function (exports, _emberOsfAdaptersFileProvider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersFileProvider['default'];
    }
  });
});
define('collections/adapters/file-version', ['exports', 'ember-osf/adapters/file-version'], function (exports, _emberOsfAdaptersFileVersion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersFileVersion['default'];
    }
  });
});
define('collections/adapters/file', ['exports', 'ember-osf/adapters/file'], function (exports, _emberOsfAdaptersFile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersFile['default'];
    }
  });
});
define('collections/adapters/group', ['exports', 'collections/adapters/collection'], function (exports, _collectionsAdaptersCollection) {
  exports['default'] = _collectionsAdaptersCollection['default'].extend({});
});
define('collections/adapters/institution', ['exports', 'ember-osf/adapters/institution'], function (exports, _emberOsfAdaptersInstitution) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersInstitution['default'];
    }
  });
});
define('collections/adapters/item', ['exports', 'collections/adapters/collection'], function (exports, _collectionsAdaptersCollection) {
  exports['default'] = _collectionsAdaptersCollection['default'].extend({});
});
define('collections/adapters/license', ['exports', 'ember-osf/adapters/license'], function (exports, _emberOsfAdaptersLicense) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersLicense['default'];
    }
  });
});
define('collections/adapters/log', ['exports', 'ember-osf/adapters/log'], function (exports, _emberOsfAdaptersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersLog['default'];
    }
  });
});
define('collections/adapters/metaschema', ['exports', 'ember-osf/adapters/metaschema'], function (exports, _emberOsfAdaptersMetaschema) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersMetaschema['default'];
    }
  });
});
define('collections/adapters/node-link', ['exports', 'ember-osf/adapters/node-link'], function (exports, _emberOsfAdaptersNodeLink) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersNodeLink['default'];
    }
  });
});
define('collections/adapters/node', ['exports', 'ember', 'ember-data', 'collections/config/environment'], function (exports, _ember, _emberData, _collectionsConfigEnvironment) {

    function getToken() {
        var token;
        var session = window.localStorage['ember_simple_auth:session'];
        if (session) {
            token = JSON.parse(session)['authenticated'];
            if ('attributes' in token) {
                return token['attributes']['accessToken'];
            }
            return token;
        }
    }

    exports['default'] = _emberData['default'].JSONAPIAdapter.extend({
        session: _ember['default'].inject.service(),
        host: _collectionsConfigEnvironment['default'].osfHostUrl,
        namespace: 'v2',
        ajax: function ajax(url, method, hash) {
            hash = hash || {};
            hash.crossOrigin = true;
            hash.xhrFields = { withCredentials: false };
            hash.headers = hash.headers || {};
            hash.headers['AUTHORIZATION'] = 'Bearer ' + getToken();
            hash.headers['X-CSRFTOKEN'] = this.get('session.data.authenticated.csrfToken');
            return this._super(url, method, hash);
        },
        buildURL: function buildURL() {
            var base = this._super.apply(this, arguments);
            return base + '/';
        }
    });
});
define('collections/adapters/osf-adapter', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersOsfAdapter['default'];
    }
  });
});
define('collections/adapters/preprint-provider', ['exports', 'ember-osf/adapters/preprint-provider'], function (exports, _emberOsfAdaptersPreprintProvider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersPreprintProvider['default'];
    }
  });
});
define('collections/adapters/preprint', ['exports', 'collections/adapters/node'], function (exports, _collectionsAdaptersNode) {
  exports['default'] = _collectionsAdaptersNode['default'].extend({});
});
define('collections/adapters/registration', ['exports', 'collections/adapters/node'], function (exports, _collectionsAdaptersNode) {
  exports['default'] = _collectionsAdaptersNode['default'].extend({});
});
define('collections/adapters/taxonomy', ['exports', 'ember-osf/adapters/taxonomy'], function (exports, _emberOsfAdaptersTaxonomy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAdaptersTaxonomy['default'];
    }
  });
});
define('collections/adapters/user', ['exports', 'collections/adapters/collection'], function (exports, _collectionsAdaptersCollection) {
  exports['default'] = _collectionsAdaptersCollection['default'].extend({});
});
define('collections/app', ['exports', 'ember', 'collections/resolver', 'ember-load-initializers', 'collections/config/environment'], function (exports, _ember, _collectionsResolver, _emberLoadInitializers, _collectionsConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _collectionsConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _collectionsConfigEnvironment['default'].podModulePrefix,
    Resolver: _collectionsResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _collectionsConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('collections/authenticators/osf-cookie', ['exports', 'ember-osf/authenticators/osf-cookie'], function (exports, _emberOsfAuthenticatorsOsfCookie) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAuthenticatorsOsfCookie['default'];
    }
  });
});
define('collections/authenticators/osf-token', ['exports', 'ember', 'collections/config/environment', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _collectionsConfigEnvironment, _emberSimpleAuthAuthenticatorsBase) {
    exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
        session: _ember['default'].inject.service(),

        csrfToken: function csrfToken() {
            if (!document.cookie && document.cookie === '') {
                return null;
            }
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i].trim();
                if (cookie.substring(0, _collectionsConfigEnvironment['default'].csrfCookie.length + 1) === _collectionsConfigEnvironment['default'].csrfCookie + '=') {
                    return decodeURIComponent(cookie.substring(_collectionsConfigEnvironment['default'].csrfCookie.length + 1));
                }
            }
        },

        restore: function restore() {
            return this.authenticate(false);
        },

        authenticate: function authenticate() {
            var _this = this;

            var redirectToLogin = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

            return new _ember['default'].RSVP.Promise(function (resolve, reject) {
                _this.getUserInfo().then(function (response) {
                    response = response.data.attributes;
                    if (!response || !response.token) {
                        if (redirectToLogin) {
                            return window.location = _collectionsConfigEnvironment['default'].apiBaseUrl + '/accounts/osf/login/?' + _ember['default'].$.param({ next: 'http://localhost:4200/' });
                        }
                        reject('not logged in');
                    } else {
                        resolve({
                            user: response,
                            csrfToken: _this.csrfToken(),
                            attributes: {
                                accessToken: response.token
                            }
                        });
                    }
                });
            });
        },

        invalidate: function invalidate() {
            return _ember['default'].$.ajax({
                method: 'POST',
                url: _collectionsConfigEnvironment['default'].apiBaseUrl + '/accounts/logout/',
                crossDomain: true,
                xhrFields: { withCredentials: true },
                headers: {
                    'X-CSRFTOKEN': this.get('session.data.authenticated.csrfToken')
                }
            });
        },

        getUserInfo: function getUserInfo() {
            return _ember['default'].$.ajax({
                url: _collectionsConfigEnvironment['default'].APP.apiURL + '/userinfo/',
                crossDomain: true,
                xhrFields: { withCredentials: true }
            });
        }
    });
});
define('collections/authorizers/osf-cookie', ['exports', 'ember-osf/authorizers/osf-cookie'], function (exports, _emberOsfAuthorizersOsfCookie) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAuthorizersOsfCookie['default'];
    }
  });
});
define('collections/authorizers/osf-token', ['exports', 'ember-osf/authorizers/osf-token'], function (exports, _emberOsfAuthorizersOsfToken) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfAuthorizersOsfToken['default'];
    }
  });
});
define('collections/components/add-node/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        newItemNode: _ember['default'].Object.create(),
        store: _ember['default'].inject.service(),
        searchGuid: '',
        searchFilter: '',
        loadingItem: false,
        showAddItemDetails: false,
        findItemError: null,
        results: null,
        showResults: false,
        displayItemType: _ember['default'].computed('type', function () {
            return this.get('type') === 'node' ? 'projects' : this.get('type') + 's';
        }),
        recordType: _ember['default'].computed('type', function () {
            var collectionType = this.get('type');
            return collectionType === 'project' || collectionType === 'preprint' ? 'node' : collectionType;
        }),

        clearFilters: function clearFilters() {
            this.set('searchGuid', '');
            this.set('searchFilter', '');
        },
        clearView: function clearView() {
            this.set('loadingItem', false);
            this.set('showAddItemDetails', false);
            this.set('findItemError', null);
            this.set('results', null);
            this.set('showResults', false);
        },
        buildNodeObject: function buildNodeObject(item) {
            this.get('newItemNode').setProperties({
                title: item.get('title'),
                description: item.get('description'),
                type: this.get('type'), // set by the app based on selection of tab
                source_id: item.get('id'),
                link: item.get('links.html')
            });
        },
        didUpdateAttrs: function didUpdateAttrs() {
            this.clearView();
            this.clearFilters();
        },
        actions: {
            findNode: function findNode() {
                var _this = this;

                if (!this.get('searchGuid')) {
                    return;
                }
                this.clearView();
                this.set('loadingItem', true);
                // We need to add type variable here because there is no model for project in ember-osf but 'node
                var type = this.get('type') === 'project' ? 'node' : this.get('type');
                this.get('store').findRecord(type, this.get('searchGuid')).then(function (item) {
                    if (_this.get('type') === 'preprint') {
                        item.get('node').then(function (node) {
                            item.set('title', node.get('title'));
                            _this.buildNodeObject(node);
                        });
                    } else {
                        _this.buildNodeObject(item);
                    }
                    _this.set('showAddItemDetails', true);
                    _this.set('loadingItem', false);
                })['catch'](function (error) {
                    _this.clearView();
                    _this.clearFilters();
                    _this.set('findItemError', error.errors);
                });
            },
            addItem: function addItem(node) {
                var _this2 = this;

                if (node) {
                    this.buildNodeObject(node);
                }
                var nodeObject = this.get('newItemNode');
                var item = this.get('store').createRecord('item', {
                    title: nodeObject.get('title'),
                    type: nodeObject.get('type'),
                    metadata: '',
                    status: 'pending',
                    url: nodeObject.get('link'),
                    source_id: nodeObject.get('source_id'),
                    collection: this.get('model')
                });
                item.save().then(function () {
                    _this2.get('transition')('collection.browse', _this2.get('model.id'));
                });
                this.clearView();
                this.clearFilters();
            },
            searchNode: function searchNode() {
                var _this3 = this;

                var filterText = this.get('searchFilter');
                if (!filterText) {
                    return;
                }
                this.clearView();
                this.set('loadingItem', true);
                var filter = {};
                filter['filter[title]'] = filterText;
                if (this.get('type') === 'preprint') {
                    filter['filter[preprint]'] = true;
                }
                this.get('store').query(this.get('recordType'), filter).then(function (results) {
                    _this3.set('results', results);
                    _this3.set('loadingItem', false);
                    _this3.set('showResults', true);
                })['catch'](function (error) {
                    _this3.clearView();
                    _this3.clearFilters();
                    _this3.set('findItemError', error.errors);
                });
            },
            enterPressSearch: function enterPressSearch() {
                this.get('actions').searchNode.call(this);
            },
            enterPressGuid: function enterPressGuid() {
                this.get('actions').findNode.call(this);
            }
        }

    });
});
define("collections/components/add-node/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 8
            },
            "end": {
              "line": 18,
              "column": 8
            }
          },
          "moduleName": "collections/components/add-node/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "p-lg text-center");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "loader");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "loader-inner ball-pulse ball-pulse-dark");
          var el4 = dom.createTextNode("\n                      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n             ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 16
                },
                "end": {
                  "line": 25,
                  "column": 16
                }
              },
              "moduleName": "collections/components/add-node/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "p-xs coll-search-result");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-link");
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "fa fa-plus");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" Add Item ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(element3, [2]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element3, 0, 0);
              morphs[1] = dom.createElementMorph(element4);
              return morphs;
            },
            statements: [["content", "result.title", ["loc", [null, [24, 57], [24, 73]]], 0, 0, 0, 0], ["element", "action", ["addItem", ["get", "result", ["loc", [null, [24, 122], [24, 128]]], 0, 0, 0, 0]], [], ["loc", [null, [24, 103], [24, 130]]], 0, 0]],
            locals: ["result"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 12
              },
              "end": {
                "line": 26,
                "column": 12
              }
            },
            "moduleName": "collections/components/add-node/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "text-muted m-t-sm");
            var el2 = dom.createTextNode(" Showing at most 10 items. Narrow search for better results. ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "results", ["loc", [null, [23, 24], [23, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 16], [25, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 12
              },
              "end": {
                "line": 28,
                "column": 12
              }
            },
            "moduleName": "collections/components/add-node/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "text-muted m-t-sm");
            var el2 = dom.createTextNode(" We couldn't find any ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" with this search. Please try another search. ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "displayItemType", ["loc", [null, [27, 67], [27, 86]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 8
            }
          },
          "moduleName": "collections/components/add-node/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "gt", [["get", "results.length", ["loc", [null, [21, 22], [21, 36]]], 0, 0, 0, 0], 0], [], ["loc", [null, [21, 18], [21, 39]]], 0, 0]], [], 0, 1, ["loc", [null, [21, 12], [28, 19]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 20
              },
              "end": {
                "line": 36,
                "column": 20
              }
            },
            "moduleName": "collections/components/add-node/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "error.detail", ["loc", [null, [35, 24], [35, 40]]], 0, 0, 0, 0]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 8
            }
          },
          "moduleName": "collections/components/add-node/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "p-lg text-center text-danger");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode(" Please try again or try another ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ID ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n             ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "findItemError", ["loc", [null, [34, 28], [34, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [34, 20], [36, 29]]]], ["content", "displayItemType", ["loc", [null, [38, 52], [38, 71]]], 0, 0, 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 8
            }
          },
          "moduleName": "collections/components/add-node/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "coll-find-details p-md");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createTextNode("Title ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "m-t-sm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createTextNode("Description ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "m-t-sm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createTextNode("Type ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "m-t-sm");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "row");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-xs-12 text-right");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-success");
          var el5 = dom.createTextNode("Add Item ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [13, 1, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
          morphs[3] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["content", "newItemNode.title", ["loc", [null, [45, 30], [45, 51]]], 0, 0, 0, 0], ["content", "newItemNode.description", ["loc", [null, [48, 30], [48, 57]]], 0, 0, 0, 0], ["content", "newItemNode.type", ["loc", [null, [51, 30], [51, 50]]], 0, 0, 0, 0], ["element", "action", ["addItem"], [], ["loc", [null, [55, 52], [55, 72]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "collections/components/add-node/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-add-item break-word");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container-fluid");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-8");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        var el6 = dom.createTextNode("Search ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-4");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        var el6 = dom.createTextNode("Preview");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0, 1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element6, [3]);
        var element10 = dom.childAt(element9, [2]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(element7, 0, 0);
        morphs[1] = dom.createAttrMorph(element8, 'class');
        morphs[2] = dom.createElementMorph(element8);
        morphs[3] = dom.createMorphAt(element8, 1, 1);
        morphs[4] = dom.createMorphAt(element9, 0, 0);
        morphs[5] = dom.createAttrMorph(element10, 'class');
        morphs[6] = dom.createElementMorph(element10);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(element5, 7, 7);
        morphs[10] = dom.createMorphAt(element5, 9, 9);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "searchFilter", ["loc", [null, [4, 69], [4, 81]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Search", "enter", "enterPressSearch"], ["loc", [null, [4, 34], [4, 129]]], 0, 0], ["attribute", "class", ["concat", ["btn btn-success m-t-sm ", ["subexpr", "unless", [["get", "searchFilter", ["loc", [null, [4, 176], [4, 188]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [4, 167], [4, 201]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["searchNode"], [], ["loc", [null, [4, 203], [4, 226]]], 0, 0], ["content", "displayItemType", ["loc", [null, [4, 234], [4, 253]]], 0, 0, 0, 0], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "searchGuid", ["loc", [null, [5, 69], [5, 79]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter guid", "enter", "enterPressGuid"], ["loc", [null, [5, 34], [5, 129]]], 0, 0], ["attribute", "class", ["concat", ["btn btn-success m-t-sm ", ["subexpr", "unless", [["get", "searchGuid", ["loc", [null, [5, 177], [5, 187]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [5, 168], [5, 200]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["findNode"], [], ["loc", [null, [5, 202], [5, 223]]], 0, 0], ["block", "if", [["get", "loadingItem", ["loc", [null, [8, 14], [8, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 8], [18, 15]]]], ["block", "if", [["get", "showResults", ["loc", [null, [20, 14], [20, 25]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [20, 8], [29, 15]]]], ["block", "if", [["get", "findItemError", ["loc", [null, [31, 14], [31, 27]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [31, 8], [40, 15]]]], ["block", "if", [["get", "showAddItemDetails", ["loc", [null, [42, 14], [42, 32]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [42, 8], [59, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define('collections/components/add-website/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        store: _ember['default'].inject.service(),
        urlTitle: '',
        urlAddress: '',
        urlDescription: '',
        urlSaveErrors: null,
        clearInputs: function clearInputs() {
            this.set('urlTitle', '');
            this.set('urlAddress', '');
            this.set('urlDescription', '');
        },
        actions: {
            addWebsite: function addWebsite() {
                var _this = this;

                var item = this.get('store').createRecord('item', {
                    title: this.get('urlTitle'),
                    type: 'website',
                    metadata: this.get('urlDescription'),
                    status: 'pending',
                    url: this.get('urlAddress'),
                    source_id: this.get('urlAddress'),
                    collection: this.get('model')
                });
                item.save().then(function () {
                    _this.get('transition')('collection.browse', _this.get('model.id'));
                })['catch'](function (error) {
                    _this.set('urlSaveErrors', error.errors);
                });
                this.clearInputs();
            }
        }
    });
});
define("collections/components/add-website/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "collections/components/add-website/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "text-danger");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.detail", ["loc", [null, [20, 37], [20, 53]]], 0, 0, 0, 0]],
        locals: ["error"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "collections/components/add-website/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "add-url m-t-lg");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        var el3 = dom.createTextNode(" Add a Website ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row m-t-md");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-sm-6");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-sm-6");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row m-t-md");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-sm-9");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-sm-3");
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-success");
        var el5 = dom.createTextNode("Add");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "text-center");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element2, [3, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[3] = dom.createElementMorph(element3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "urlTitle", ["loc", [null, [5, 47], [5, 55]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter Title"], ["loc", [null, [5, 12], [5, 83]]], 0, 0], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "urlAddress", ["loc", [null, [8, 47], [8, 57]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter Address"], ["loc", [null, [8, 12], [8, 87]]], 0, 0], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "urlDescription", ["loc", [null, [13, 50], [13, 64]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter Notes"], ["loc", [null, [13, 12], [13, 92]]], 0, 0], ["element", "action", ["addWebsite"], [], ["loc", [null, [15, 62], [15, 85]]], 0, 0], ["block", "each", [["get", "urlSaveErrors", ["loc", [null, [19, 16], [19, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [19, 8], [21, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('collections/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'collections/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _collectionsConfigEnvironment) {

  var name = _collectionsConfigEnvironment['default'].APP.name;
  var version = _collectionsConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('collections/components/author-link/component', ['exports', 'ember-osf/components/author-link/component'], function (exports, _emberOsfComponentsAuthorLinkComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsAuthorLinkComponent['default'];
    }
  });
});
define("collections/components/bread-crumbs", ["exports", "ember", "ember-breadcrumbs/components/bread-crumbs"], function (exports, _ember, _emberBreadcrumbsComponentsBreadCrumbs) {
  exports["default"] = _emberBreadcrumbsComponentsBreadCrumbs["default"];
});
define('collections/components/browse-list/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        session: _ember['default'].inject.service(),
        store: _ember['default'].inject.service(),
        organizeMode: false,
        groupView: false,
        cardView: true,
        selectedItems: _ember['default'].A(), // List of items selected for actions like delete
        showDeleteConfirmation: false, // Modal for deleting items
        showGroupConfirmation: false, // Modal for grouping
        addingGroup: false,
        groupTitle: '',
        // Build list
        groups: _ember['default'].computed('model.groups', function () {
            if (this.get('groupView')) {
                return;
            }
            var groups = this.get('model.groups');
            groups.forEach(function (group) {
                group.set('type', 'group');
            });
            return groups;
        }),
        list: _ember['default'].computed.union('groups', 'model.items'),
        actions: {
            toggleOrganizeMode: function toggleOrganizeMode() {
                this.send('emptySelectedList');
                this.toggleProperty('organizeMode');
            },
            toggleDeleteConfirmation: function toggleDeleteConfirmation() {
                this.toggleProperty('showDeleteConfirmation');
            },
            clearSelected: function clearSelected() {
                var selected = this.get('selectedItems');
                selected.clear();
            },
            clearModals: function clearModals() {
                this.set('showGroupConfirmation', false);
                this.set('showDeleteConfirmation', false);
                this.set('groupTitle', '');
                this.set('addingGroup', false);
            },
            deleteSelected: function deleteSelected() {
                var items = this.get('list');
                var selected = this.get('selectedItems');
                selected.forEach(function (item) {
                    return _ember['default'].run.once(function () {
                        return item.destroyRecord();
                    });
                });
                items.removeObjects(selected);
                this.send('clearSelected');
                this.send('clearModals');
                this.send('toggleOrganizeMode');
            },
            toggleGroupConfirmation: function toggleGroupConfirmation() {
                this.toggleProperty('showGroupConfirmation');
            },
            groupSelected: function groupSelected() {
                var _this = this;

                this.set('addingGroup', true);
                var selected = this.get('selectedItems');
                // Create new group
                var newGroup = this.get('store').createRecord('group', {
                    title: this.get('groupTitle'),
                    description: '',
                    collection: this.get('model')
                });
                newGroup.save().then(function (record) {
                    // For each item, set group to new group
                    selected.forEach(function (item) {
                        item.set('group', record);
                        item.save();
                    });

                    // remove items that were put into the group;
                    var list = _this.get('model.items');
                    list.removeObjects(selected);
                    _this.send('clearSelected');
                    _this.send('clearModals');
                    _this.send('toggleOrganizeMode');
                });
            },
            // Adds or removes item to the selectedItems list
            toggleSelectedList: function toggleSelectedList(selected, item) {
                var currentList = this.get('selectedItems');
                if (!selected) {
                    currentList.removeObject(item);
                } else {
                    currentList.addObject(item);
                }
            },
            emptySelectedList: function emptySelectedList() {
                this.get('selectedItems').clear();
                this.get('list').setEach('selected', false);
            },
            changeView: function changeView(cardView) {
                this.set('cardView', cardView);
            }
        }
    });
});
define("collections/components/browse-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 24
                },
                "end": {
                  "line": 9,
                  "column": 24
                }
              },
              "moduleName": "collections/components/browse-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-default");
              var el2 = dom.createTextNode("Group Selected");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element17 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element17, 'disabled');
              morphs[1] = dom.createElementMorph(element17);
              return morphs;
            },
            statements: [["attribute", "disabled", ["subexpr", "if", [["get", "selectedItems.length", ["loc", [null, [8, 74], [8, 94]]], 0, 0, 0, 0], "", "disabled"], [], ["loc", [null, [null, null], [8, 110]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["toggleGroupConfirmation"], [], ["loc", [null, [8, 111], [8, 147]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 20
              },
              "end": {
                "line": 11,
                "column": 20
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-danger");
            var el2 = dom.createTextNode("Delete selected ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element18 = dom.childAt(fragment, [2]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createAttrMorph(element18, 'disabled');
            morphs[2] = dom.createElementMorph(element18);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not", [["get", "groupView", ["loc", [null, [7, 35], [7, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 30], [7, 45]]], 0, 0]], [], 0, null, ["loc", [null, [7, 24], [9, 31]]]], ["attribute", "disabled", ["subexpr", "if", [["get", "selectedItems.length", ["loc", [null, [10, 69], [10, 89]]], 0, 0, 0, 0], "", "disabled"], [], ["loc", [null, [null, null], [10, 105]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["toggleDeleteConfirmation"], [], ["loc", [null, [10, 106], [10, 143]]], 0, 0]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 22
                },
                "end": {
                  "line": 17,
                  "column": 22
                }
              },
              "moduleName": "collections/components/browse-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-default");
              var el2 = dom.createTextNode("Cancel organizing ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element12);
              return morphs;
            },
            statements: [["element", "action", ["toggleOrganizeMode"], [], ["loc", [null, [16, 58], [16, 89]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 22
                },
                "end": {
                  "line": 19,
                  "column": 22
                }
              },
              "moduleName": "collections/components/browse-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-info");
              var el2 = dom.createTextNode("Organize Items ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element11 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element11);
              return morphs;
            },
            statements: [["element", "action", ["toggleOrganizeMode"], [], ["loc", [null, [18, 55], [18, 86]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 16
              },
              "end": {
                "line": 29,
                "column": 16
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "col-xs-6 text-right");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "btn-group");
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            var el4 = dom.createTextNode("\n                              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-th");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            var el4 = dom.createTextNode("\n                              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-list");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element13 = dom.childAt(fragment, [1]);
            var element14 = dom.childAt(element13, [3]);
            var element15 = dom.childAt(element14, [1]);
            var element16 = dom.childAt(element14, [3]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(element13, 1, 1);
            morphs[1] = dom.createAttrMorph(element15, 'class');
            morphs[2] = dom.createElementMorph(element15);
            morphs[3] = dom.createAttrMorph(element16, 'class');
            morphs[4] = dom.createElementMorph(element16);
            return morphs;
          },
          statements: [["block", "if", [["get", "organizeMode", ["loc", [null, [15, 28], [15, 40]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [15, 22], [19, 29]]]], ["attribute", "class", ["concat", ["btn ", ["subexpr", "if", [["get", "cardView", ["loc", [null, [21, 50], [21, 58]]], 0, 0, 0, 0], "btn-info", "btn-default"], [], ["loc", [null, [21, 45], [21, 85]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["changeView", true], [], ["loc", [null, [21, 87], [21, 115]]], 0, 0], ["attribute", "class", ["concat", ["btn ", ["subexpr", "unless", [["get", "cardView", ["loc", [null, [24, 54], [24, 62]]], 0, 0, 0, 0], "btn-info", "btn-default"], [], ["loc", [null, [24, 45], [24, 89]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["changeView", false], [], ["loc", [null, [24, 91], [24, 120]]], 0, 0]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 30,
              "column": 12
            }
          },
          "moduleName": "collections/components/browse-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-6");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "organizeMode", ["loc", [null, [6, 26], [6, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 20], [11, 27]]]], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [13, 22], [13, 45]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [13, 16], [29, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 20
                },
                "end": {
                  "line": 37,
                  "column": 20
                }
              },
              "moduleName": "collections/components/browse-list/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "collection-item", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [36, 47], [36, 51]]], 0, 0, 0, 0]], [], [], 0, 0], "cardView", ["subexpr", "@mut", [["get", "cardView", ["loc", [null, [36, 61], [36, 69]]], 0, 0, 0, 0]], [], [], 0, 0], "toggleSelectedList", ["subexpr", "action", ["toggleSelectedList"], [], ["loc", [null, [36, 89], [36, 118]]], 0, 0], "organizeMode", ["subexpr", "@mut", [["get", "organizeMode", ["loc", [null, [36, 132], [36, 144]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "col-sm-6 col-lg-4"], ["loc", [null, [36, 24], [36, 172]]], 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 16
              },
              "end": {
                "line": 38,
                "column": 16
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "list", ["loc", [null, [35, 28], [35, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [35, 20], [37, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 28
                },
                "end": {
                  "line": 51,
                  "column": 28
                }
              },
              "moduleName": "collections/components/browse-list/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "collection-item", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [50, 55], [50, 59]]], 0, 0, 0, 0]], [], [], 0, 0], "cardView", ["subexpr", "@mut", [["get", "cardView", ["loc", [null, [50, 69], [50, 77]]], 0, 0, 0, 0]], [], [], 0, 0], "tagName", "tr", "toggleSelectedList", ["subexpr", "action", ["toggleSelectedList"], [], ["loc", [null, [50, 110], [50, 139]]], 0, 0], "organizeMode", ["subexpr", "@mut", [["get", "organizeMode", ["loc", [null, [50, 153], [50, 165]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [50, 32], [50, 167]]], 0, 0]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 16
              },
              "end": {
                "line": 54,
                "column": 16
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "coll-table");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode("Title");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode("Type");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode("Status");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "list", ["loc", [null, [49, 36], [49, 40]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [49, 28], [51, 37]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 12
            },
            "end": {
              "line": 55,
              "column": 12
            }
          },
          "moduleName": "collections/components/browse-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "cardView", ["loc", [null, [34, 22], [34, 30]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [34, 16], [54, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 12
            },
            "end": {
              "line": 57,
              "column": 12
            }
          },
          "moduleName": "collections/components/browse-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "text-center text-muted p-xl");
          var el2 = dom.createTextNode(" You don't have any items yet. Go to \"Add content\" to add items");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 12
              },
              "end": {
                "line": 75,
                "column": 12
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.title", ["loc", [null, [74, 20], [74, 34]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 86,
              "column": 0
            }
          },
          "moduleName": "collections/components/browse-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal fade in");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "role", "dialog");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-dialog");
          dom.setAttribute(el2, "role", "document");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "modal-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-header");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "close");
          dom.setAttribute(el5, "aria-label", "Close");
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "aria-hidden", "true");
          var el7 = dom.createTextNode("×");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5, "class", "modal-title");
          var el6 = dom.createTextNode("Delete items?");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-body");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          var el6 = dom.createTextNode("The following items will be removed:");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("ul");
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-footer");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-default");
          var el6 = dom.createTextNode("Close");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-danger");
          var el6 = dom.createTextNode("Delete");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment(" /.modal-content ");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment(" /.modal-dialog ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" /.modal ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-backdrop fade in");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [0, 1, 1]);
          var element7 = dom.childAt(element6, [1, 1]);
          var element8 = dom.childAt(element6, [5]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element8, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element7);
          morphs[1] = dom.createMorphAt(dom.childAt(element6, [3, 3]), 1, 1);
          morphs[2] = dom.createElementMorph(element9);
          morphs[3] = dom.createElementMorph(element10);
          return morphs;
        },
        statements: [["element", "action", ["toggleDeleteConfirmation"], [], ["loc", [null, [67, 63], [67, 100]]], 0, 0], ["block", "each", [["get", "selectedItems", ["loc", [null, [73, 20], [73, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [73, 12], [75, 21]]]], ["element", "action", ["toggleDeleteConfirmation"], [], ["loc", [null, [79, 54], [79, 91]]], 0, 0], ["element", "action", ["deleteSelected"], [], ["loc", [null, [80, 53], [80, 80]]], 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 101,
                "column": 12
              },
              "end": {
                "line": 103,
                "column": 12
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.title", ["loc", [null, [102, 20], [102, 34]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 108,
                "column": 8
              },
              "end": {
                "line": 110,
                "column": 8
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "btn btn-success disabled");
            var el2 = dom.createTextNode("Grouping ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-spinner fa-pulse");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 8
              },
              "end": {
                "line": 112,
                "column": 8
              }
            },
            "moduleName": "collections/components/browse-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "btn btn-success");
            var el2 = dom.createTextNode("Group");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "disabled", ["subexpr", "unless", [["get", "groupTitle", ["loc", [null, [111, 76], [111, 86]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [null, null], [111, 99]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["groupSelected"], [], ["loc", [null, [111, 100], [111, 126]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 88,
              "column": 0
            },
            "end": {
              "line": 118,
              "column": 0
            }
          },
          "moduleName": "collections/components/browse-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal fade in");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "role", "dialog");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-dialog");
          dom.setAttribute(el2, "role", "document");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "modal-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-header");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "close");
          dom.setAttribute(el5, "aria-label", "Close");
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "aria-hidden", "true");
          var el7 = dom.createTextNode("×");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5, "class", "modal-title");
          var el6 = dom.createTextNode("Group selected items?");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-body");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          var el6 = dom.createTextNode(" Enter title for Group ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          dom.setAttribute(el5, "class", "m-t-md");
          var el6 = dom.createTextNode("The following items will be added to the group:");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("ul");
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-footer");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-default");
          var el6 = dom.createTextNode("Close");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment(" /.modal-content ");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment(" /.modal-dialog ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" /.modal ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-backdrop fade in");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0, 1, 1]);
          var element2 = dom.childAt(element1, [1, 1]);
          var element3 = dom.childAt(element1, [3]);
          var element4 = dom.childAt(element1, [5]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element3, 3, 3);
          morphs[2] = dom.createMorphAt(dom.childAt(element3, [7]), 1, 1);
          morphs[3] = dom.createElementMorph(element5);
          morphs[4] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["toggleGroupConfirmation"], [], ["loc", [null, [93, 63], [93, 99]]], 0, 0], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "groupTitle", ["loc", [null, [98, 43], [98, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "e.g. Microbiology studies", "enter", "groupSelected"], ["loc", [null, [98, 8], [98, 117]]], 0, 0], ["block", "each", [["get", "selectedItems", ["loc", [null, [101, 20], [101, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [101, 12], [103, 21]]]], ["element", "action", ["toggleGroupConfirmation"], [], ["loc", [null, [107, 54], [107, 90]]], 0, 0], ["block", "if", [["get", "addingGroup", ["loc", [null, [108, 14], [108, 25]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [108, 8], [112, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 119,
            "column": 0
          }
        },
        "moduleName": "collections/components/browse-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-items");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row m-b-lg");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element19 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element19, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element19, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "list", ["loc", [null, [4, 18], [4, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 12], [30, 19]]]], ["block", "if", [["get", "list", ["loc", [null, [33, 18], [33, 22]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [33, 12], [57, 19]]]], ["block", "if", [["get", "showDeleteConfirmation", ["loc", [null, [62, 6], [62, 28]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [62, 0], [86, 7]]]], ["block", "if", [["get", "showGroupConfirmation", ["loc", [null, [88, 6], [88, 27]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [88, 0], [118, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('collections/components/bs-accordion-item', ['exports', 'ember-bootstrap/components/bs-accordion-item'], function (exports, _emberBootstrapComponentsBsAccordionItem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsAccordionItem['default'];
    }
  });
});
define('collections/components/bs-accordion', ['exports', 'ember-bootstrap/components/bs-accordion'], function (exports, _emberBootstrapComponentsBsAccordion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsAccordion['default'];
    }
  });
});
define('collections/components/bs-alert', ['exports', 'ember-bootstrap/components/bs-alert'], function (exports, _emberBootstrapComponentsBsAlert) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsAlert['default'];
    }
  });
});
define('collections/components/bs-button-group', ['exports', 'ember-bootstrap/components/bs-button-group'], function (exports, _emberBootstrapComponentsBsButtonGroup) {
  exports['default'] = _emberBootstrapComponentsBsButtonGroup['default'];
});
define('collections/components/bs-button', ['exports', 'ember-bootstrap/components/bs-button'], function (exports, _emberBootstrapComponentsBsButton) {
  exports['default'] = _emberBootstrapComponentsBsButton['default'];
});
define('collections/components/bs-collapse', ['exports', 'ember-bootstrap/components/bs-collapse'], function (exports, _emberBootstrapComponentsBsCollapse) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsCollapse['default'];
    }
  });
});
define('collections/components/bs-dropdown-button', ['exports', 'ember-bootstrap/components/bs-dropdown-button'], function (exports, _emberBootstrapComponentsBsDropdownButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsDropdownButton['default'];
    }
  });
});
define('collections/components/bs-dropdown-menu', ['exports', 'ember-bootstrap/components/bs-dropdown-menu'], function (exports, _emberBootstrapComponentsBsDropdownMenu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsDropdownMenu['default'];
    }
  });
});
define('collections/components/bs-dropdown-toggle', ['exports', 'ember-bootstrap/components/bs-dropdown-toggle'], function (exports, _emberBootstrapComponentsBsDropdownToggle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsDropdownToggle['default'];
    }
  });
});
define('collections/components/bs-dropdown', ['exports', 'ember-bootstrap/components/bs-dropdown'], function (exports, _emberBootstrapComponentsBsDropdown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsDropdown['default'];
    }
  });
});
define('collections/components/bs-form-element', ['exports', 'ember-bootstrap/components/bs-form-element'], function (exports, _emberBootstrapComponentsBsFormElement) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsFormElement['default'];
    }
  });
});
define('collections/components/bs-form-group', ['exports', 'ember-bootstrap/components/bs-form-group'], function (exports, _emberBootstrapComponentsBsFormGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsFormGroup['default'];
    }
  });
});
define('collections/components/bs-form', ['exports', 'ember-bootstrap/components/bs-form'], function (exports, _emberBootstrapComponentsBsForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsForm['default'];
    }
  });
});
define('collections/components/bs-input', ['exports', 'ember-bootstrap/components/bs-input'], function (exports, _emberBootstrapComponentsBsInput) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsInput['default'];
    }
  });
});
define('collections/components/bs-modal-backdrop', ['exports', 'ember-bootstrap/components/bs-modal-backdrop'], function (exports, _emberBootstrapComponentsBsModalBackdrop) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsModalBackdrop['default'];
    }
  });
});
define('collections/components/bs-modal-body', ['exports', 'ember-bootstrap/components/bs-modal-body'], function (exports, _emberBootstrapComponentsBsModalBody) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsModalBody['default'];
    }
  });
});
define('collections/components/bs-modal-dialog', ['exports', 'ember-bootstrap/components/bs-modal-dialog'], function (exports, _emberBootstrapComponentsBsModalDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsModalDialog['default'];
    }
  });
});
define('collections/components/bs-modal-footer', ['exports', 'ember-bootstrap/components/bs-modal-footer'], function (exports, _emberBootstrapComponentsBsModalFooter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsModalFooter['default'];
    }
  });
});
define('collections/components/bs-modal-header', ['exports', 'ember-bootstrap/components/bs-modal-header'], function (exports, _emberBootstrapComponentsBsModalHeader) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsModalHeader['default'];
    }
  });
});
define('collections/components/bs-modal', ['exports', 'ember-bootstrap/components/bs-modal'], function (exports, _emberBootstrapComponentsBsModal) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsModal['default'];
    }
  });
});
define('collections/components/bs-progress-bar', ['exports', 'ember-bootstrap/components/bs-progress-bar'], function (exports, _emberBootstrapComponentsBsProgressBar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsProgressBar['default'];
    }
  });
});
define('collections/components/bs-progress', ['exports', 'ember-bootstrap/components/bs-progress'], function (exports, _emberBootstrapComponentsBsProgress) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsProgress['default'];
    }
  });
});
define('collections/components/bs-select', ['exports', 'ember-bootstrap/components/bs-select'], function (exports, _emberBootstrapComponentsBsSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsSelect['default'];
    }
  });
});
define('collections/components/bs-textarea', ['exports', 'ember-bootstrap/components/bs-textarea'], function (exports, _emberBootstrapComponentsBsTextarea) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapComponentsBsTextarea['default'];
    }
  });
});
define('collections/components/button-widget/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({

        didReceiveAttrs: function didReceiveAttrs() {
            this.set('widgetClasses', this.attrs.widget.value.cssClasses);
        },

        buttonString: 'Save',

        widgetClasses: ['section-submit-button'],
        widgetClassString: _ember['default'].computed('widgetClasses', function () {
            var classes = this.get('widgetClasses');
            if (classes === undefined || classes.constructor !== Array) {
                return '';
            }
            return classes.join(' ');
        }),

        actions: {
            pressButton: function pressButton() {
                var parameters;
                return regeneratorRuntime.async(function pressButton$(context$1$0) {
                    while (1) switch (context$1$0.prev = context$1$0.next) {
                        case 0:
                            parameters = this.attrs.widget.value.parameters;
                            context$1$0.t0 = this.attrs;
                            context$1$0.t1 = parameters.parameter;
                            context$1$0.next = 5;
                            return regeneratorRuntime.awrap(this.get('action')(this));

                        case 5:
                            context$1$0.t2 = context$1$0.sent;
                            context$1$0.t3 = ['defined'];
                            context$1$0.t4 = {
                                value: context$1$0.t2,
                                state: context$1$0.t3
                            };
                            context$1$0.t0.saveParameter.call(context$1$0.t0, context$1$0.t1, context$1$0.t4);

                        case 9:
                        case 'end':
                            return context$1$0.stop();
                    }
                }, null, this);
            }
        }

    });
});
define("collections/components/button-widget/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "collections/components/button-widget/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element0, 'disabled');
        morphs[2] = dom.createElementMorph(element0);
        morphs[3] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["btn btn-primary ", ["get", "widgetClassString", ["loc", [null, [1, 33], [1, 50]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "disabled", ["subexpr", "if", [["get", "disabled", ["loc", [null, [2, 14], [2, 22]]], 0, 0, 0, 0], "disabled", null], [], ["loc", [null, [null, null], [2, 40]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["pressButton"], [], ["loc", [null, [1, 54], [1, 78]]], 0, 0], ["content", "description", ["loc", [null, [3, 1], [3, 16]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('collections/components/citation-widget/component', ['exports', 'ember-osf/components/citation-widget/component'], function (exports, _emberOsfComponentsCitationWidgetComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsCitationWidgetComponent['default'];
    }
  });
});
define('collections/components/collection-item/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: null,
        classNameBindings: ['rowSelected:item-row-selected'],
        cardView: true,
        item: null,
        selected: false,
        rowSelected: _ember['default'].computed('organizeMode', 'item.selected', function () {
            return this.get('organizeMode') ? this.get('item.selected') : false;
        }),
        actions: {
            markSelected: function markSelected(item) {
                this.get('item').toggleProperty('selected');
                this.sendAction('toggleSelectedList', this.get('item.selected'), item);
            }
        }
    });
});
define("collections/components/collection-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 12
                },
                "end": {
                  "line": 9,
                  "column": 12
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-check");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["coll-item-organize pointer ", ["subexpr", "if", [["get", "item.selected", ["loc", [null, [5, 60], [5, 73]]], 0, 0, 0, 0], "item-selected"], [], ["loc", [null, [5, 55], [5, 91]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["markSelected", ["get", "item", ["loc", [null, [5, 117], [5, 121]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 93], [5, 123]]], 0, 0], ["inline", "if", [["get", "item.selected", ["loc", [null, [7, 28], [7, 41]]], 0, 0, 0, 0], "Click to unselect", "Click to select"], [], ["loc", [null, [7, 23], [7, 81]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["subexpr", "eq", [["get", "item.type", ["loc", [null, [4, 26], [4, 35]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [4, 22], [4, 44]]], 0, 0]], [], 0, null, ["loc", [null, [4, 12], [9, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 20
                },
                "end": {
                  "line": 13,
                  "column": 73
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "item.title", ["loc", [null, [13, 59], [13, 73]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 12
              },
              "end": {
                "line": 14,
                "column": 12
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["block", "link-to", ["collection.group", ["get", "item.id", ["loc", [null, [13, 50], [13, 57]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [13, 20], [13, 85]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 20
                  },
                  "end": {
                    "line": 15,
                    "column": 78
                  }
                },
                "moduleName": "collections/components/collection-item/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "item.title", ["loc", [null, [15, 64], [15, 78]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 12
                },
                "end": {
                  "line": 16,
                  "column": 12
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["block", "link-to", ["collection.group.item", ["get", "item.id", ["loc", [null, [15, 55], [15, 62]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [15, 20], [15, 90]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 17,
                    "column": 20
                  },
                  "end": {
                    "line": 17,
                    "column": 72
                  }
                },
                "moduleName": "collections/components/collection-item/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "item.title", ["loc", [null, [17, 58], [17, 72]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 12
                },
                "end": {
                  "line": 18,
                  "column": 12
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["block", "link-to", ["collection.item", ["get", "item.id", ["loc", [null, [17, 49], [17, 56]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [17, 20], [17, 84]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 12
              },
              "end": {
                "line": 18,
                "column": 12
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "parent", ["loc", [null, [14, 26], [14, 32]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [14, 22], [14, 41]]], 0, 0]], [], 0, 1, ["loc", [null, [14, 12], [18, 12]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 12
              },
              "end": {
                "line": 22,
                "column": 12
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode(" Status: ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "item.status", ["loc", [null, [21, 28], [21, 43]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "collections/components/collection-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "coll-item-wrapper");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode(" Type: ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element1, 1, 1);
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createMorphAt(element2, 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          morphs[4] = dom.createMorphAt(element2, 5, 5);
          return morphs;
        },
        statements: [["block", "if", [["get", "organizeMode", ["loc", [null, [3, 14], [3, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 8], [10, 15]]]], ["attribute", "class", ["concat", ["coll-item coll-item-type-", ["get", "item.type", ["loc", [null, [11, 47], [11, 56]]], 0, 0, 0, 0], " ", ["subexpr", "if", [["subexpr", "eq", [["get", "item.type", ["loc", [null, [11, 68], [11, 77]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [11, 64], [11, 86]]], 0, 0], "coll-item-isgroup"], [], ["loc", [null, [11, 59], [11, 108]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["subexpr", "eq", [["get", "item.type", ["loc", [null, [12, 22], [12, 31]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [12, 18], [12, 40]]], 0, 0]], [], 1, 2, ["loc", [null, [12, 12], [18, 19]]]], ["content", "item.type", ["loc", [null, [19, 22], [19, 35]]], 0, 0, 0, 0], ["block", "if", [["get", "item.status", ["loc", [null, [20, 18], [20, 29]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [20, 12], [22, 19]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 15
                },
                "end": {
                  "line": 28,
                  "column": 68
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "item.title", ["loc", [null, [28, 54], [28, 68]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 29,
                "column": 8
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["block", "link-to", ["collection.group", ["get", "item.id", ["loc", [null, [28, 45], [28, 52]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [28, 15], [28, 80]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 15
                  },
                  "end": {
                    "line": 30,
                    "column": 73
                  }
                },
                "moduleName": "collections/components/collection-item/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "item.title", ["loc", [null, [30, 59], [30, 73]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 8
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["block", "link-to", ["collection.group.item", ["get", "item.id", ["loc", [null, [30, 50], [30, 57]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 15], [30, 85]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 15
                  },
                  "end": {
                    "line": 32,
                    "column": 67
                  }
                },
                "moduleName": "collections/components/collection-item/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "item.title", ["loc", [null, [32, 53], [32, 67]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 8
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["block", "link-to", ["collection.item", ["get", "item.id", ["loc", [null, [32, 44], [32, 51]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [32, 15], [32, 79]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 33,
                "column": 8
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "parent", ["loc", [null, [29, 22], [29, 28]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [29, 18], [29, 37]]], 0, 0]], [], 0, 1, ["loc", [null, [29, 8], [33, 8]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 12
                },
                "end": {
                  "line": 41,
                  "column": 12
                }
              },
              "moduleName": "collections/components/collection-item/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["checked", ["subexpr", "@mut", [["get", "item.selected", ["loc", [null, [40, 32], [40, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "type", "checkbox", "click", ["subexpr", "action", ["markSelected", ["get", "item", ["loc", [null, [40, 91], [40, 95]]], 0, 0, 0, 0]], [], ["loc", [null, [40, 68], [40, 96]]], 0, 0]], ["loc", [null, [40, 16], [40, 98]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 8
              },
              "end": {
                "line": 42,
                "column": 8
              }
            },
            "moduleName": "collections/components/collection-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["subexpr", "eq", [["get", "item.type", ["loc", [null, [39, 26], [39, 35]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [39, 22], [39, 44]]], 0, 0]], [], 0, null, ["loc", [null, [39, 12], [41, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 0
            }
          },
          "moduleName": "collections/components/collection-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "item.type", ["loc", [null, [27, 18], [27, 27]]], 0, 0, 0, 0], "group"], [], ["loc", [null, [27, 14], [27, 36]]], 0, 0]], [], 0, 1, ["loc", [null, [27, 8], [33, 15]]]], ["content", "item.type", ["loc", [null, [35, 8], [35, 21]]], 0, 0, 0, 0], ["content", "item.status", ["loc", [null, [36, 8], [36, 23]]], 0, 0, 0, 0], ["block", "if", [["get", "organizeMode", ["loc", [null, [38, 14], [38, 26]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [38, 8], [42, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "collections/components/collection-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "cardView", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [44, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/collection-nav/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    session: _ember['default'].inject.service()
  });
});
define("collections/components/collection-nav/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 16
            },
            "end": {
              "line": 5,
              "column": 86
            }
          },
          "moduleName": "collections/components/collection-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "model.title", ["loc", [null, [5, 71], [5, 86]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 26
              },
              "end": {
                "line": 10,
                "column": 67
              }
            },
            "moduleName": "collections/components/collection-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Add content ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 18
            },
            "end": {
              "line": 11,
              "column": 18
            }
          },
          "moduleName": "collections/components/collection-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["collection.add"], [], 0, null, ["loc", [null, [10, 26], [10, 79]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 24
            },
            "end": {
              "line": 12,
              "column": 64
            }
          },
          "moduleName": "collections/components/collection-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" Browse ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 24
            },
            "end": {
              "line": 13,
              "column": 64
            }
          },
          "moduleName": "collections/components/collection-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" Search ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 24
              },
              "end": {
                "line": 15,
                "column": 59
              }
            },
            "moduleName": "collections/components/collection-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" Edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 18
            },
            "end": {
              "line": 16,
              "column": 18
            }
          },
          "moduleName": "collections/components/collection-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["collection.edit"], [], 0, null, ["loc", [null, [15, 24], [15, 71]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "collections/components/collection-nav/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-navbar");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "coll-navbar-inner");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "navbar-header");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "navbar navbar-right");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        dom.setAttribute(el5, "class", "nav navbar-nav");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
        morphs[5] = dom.createMorphAt(element2, 7, 7);
        return morphs;
      },
      statements: [["attribute", "style", ["concat", ["background-color:", ["get", "model.settings.branding.colors.primary", ["loc", [null, [1, 51], [1, 89]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "link-to", ["collection", ["get", "model.id", ["loc", [null, [5, 40], [5, 48]]], 0, 0, 0, 0]], ["class", "navbar-brand"], 0, null, ["loc", [null, [5, 16], [5, 98]]]], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [9, 24], [9, 47]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [9, 18], [11, 25]]]], ["block", "link-to", ["collection.browse"], [], 2, null, ["loc", [null, [12, 24], [12, 76]]]], ["block", "link-to", ["collection.search"], [], 3, null, ["loc", [null, [13, 24], [13, 76]]]], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [14, 24], [14, 47]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [14, 18], [16, 25]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('collections/components/comment-detail/component', ['exports', 'ember-osf/components/comment-detail/component'], function (exports, _emberOsfComponentsCommentDetailComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsCommentDetailComponent['default'];
    }
  });
});
define('collections/components/comment-form/component', ['exports', 'ember-osf/components/comment-form/component'], function (exports, _emberOsfComponentsCommentFormComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsCommentFormComponent['default'];
    }
  });
});
define('collections/components/comment-pane/component', ['exports', 'ember-osf/components/comment-pane/component'], function (exports, _emberOsfComponentsCommentPaneComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsCommentPaneComponent['default'];
    }
  });
});
define('collections/components/cp-panel-body', ['exports', 'ember-collapsible-panel/components/cp-panel-body'], function (exports, _emberCollapsiblePanelComponentsCpPanelBody) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollapsiblePanelComponentsCpPanelBody['default'];
    }
  });
});
define('collections/components/cp-panel-toggle', ['exports', 'ember-collapsible-panel/components/cp-panel-toggle'], function (exports, _emberCollapsiblePanelComponentsCpPanelToggle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollapsiblePanelComponentsCpPanelToggle['default'];
    }
  });
});
define('collections/components/cp-panel', ['exports', 'ember-collapsible-panel/components/cp-panel'], function (exports, _emberCollapsiblePanelComponentsCpPanel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollapsiblePanelComponentsCpPanel['default'];
    }
  });
});
define('collections/components/cp-panels', ['exports', 'ember-collapsible-panel/components/cp-panels'], function (exports, _emberCollapsiblePanelComponentsCpPanels) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollapsiblePanelComponentsCpPanels['default'];
    }
  });
});
define('collections/components/discover-page/component', ['exports', 'ember-osf/components/discover-page/component'], function (exports, _emberOsfComponentsDiscoverPageComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsDiscoverPageComponent['default'];
    }
  });
});
define('collections/components/dropzone-widget/component', ['exports', 'ember-osf/components/dropzone-widget/component'], function (exports, _emberOsfComponentsDropzoneWidgetComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsDropzoneWidgetComponent['default'];
    }
  });
});
define('collections/components/ember-collection', ['exports', 'ember-collection/components/ember-collection'], function (exports, _emberCollectionComponentsEmberCollection) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollectionComponentsEmberCollection['default'];
    }
  });
});
define('collections/components/ember-native-scrollable', ['exports', 'ember-collection/components/ember-native-scrollable'], function (exports, _emberCollectionComponentsEmberNativeScrollable) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollectionComponentsEmberNativeScrollable['default'];
    }
  });
});
define('collections/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormholeComponentsEmberWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberWormholeComponentsEmberWormhole['default'];
    }
  });
});
define('collections/components/eosf-project-nav/component', ['exports', 'ember-osf/components/eosf-project-nav/component'], function (exports, _emberOsfComponentsEosfProjectNavComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsEosfProjectNavComponent['default'];
    }
  });
});
define('collections/components/fa-icon', ['exports', 'ember-font-awesome/components/fa-icon'], function (exports, _emberFontAwesomeComponentsFaIcon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFontAwesomeComponentsFaIcon['default'];
    }
  });
});
define('collections/components/fa-list', ['exports', 'ember-font-awesome/components/fa-list'], function (exports, _emberFontAwesomeComponentsFaList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFontAwesomeComponentsFaList['default'];
    }
  });
});
define('collections/components/fa-stack', ['exports', 'ember-font-awesome/components/fa-stack'], function (exports, _emberFontAwesomeComponentsFaStack) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFontAwesomeComponentsFaStack['default'];
    }
  });
});
define('collections/components/faceted-search/component', ['exports', 'ember-osf/components/faceted-search/component'], function (exports, _emberOsfComponentsFacetedSearchComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFacetedSearchComponent['default'];
    }
  });
});
define('collections/components/file-browser-icon/component', ['exports', 'ember-osf/components/file-browser-icon/component'], function (exports, _emberOsfComponentsFileBrowserIconComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileBrowserIconComponent['default'];
    }
  });
});
define('collections/components/file-browser-item/component', ['exports', 'ember-osf/components/file-browser-item/component'], function (exports, _emberOsfComponentsFileBrowserItemComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileBrowserItemComponent['default'];
    }
  });
});
define('collections/components/file-browser-tree/component', ['exports', 'ember-osf/components/file-browser-tree/component'], function (exports, _emberOsfComponentsFileBrowserTreeComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileBrowserTreeComponent['default'];
    }
  });
});
define('collections/components/file-browser/component', ['exports', 'ember-osf/components/file-browser/component'], function (exports, _emberOsfComponentsFileBrowserComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileBrowserComponent['default'];
    }
  });
});
define('collections/components/file-chooser/component', ['exports', 'ember-osf/components/file-chooser/component'], function (exports, _emberOsfComponentsFileChooserComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileChooserComponent['default'];
    }
  });
});
define('collections/components/file-renderer/component', ['exports', 'ember-osf/components/file-renderer/component'], function (exports, _emberOsfComponentsFileRendererComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileRendererComponent['default'];
    }
  });
});
define('collections/components/file-uploader/component', ['exports', 'ember'], function (exports, _ember) {
    //import ENV from 'analytics-dashboard/config/environment';

    exports['default'] = _ember['default'].Component.extend({

        actions: {

            uploadFile: function uploadFile(ev) {

                var reader = new FileReader();
                var fileHandle = ev.target.files[0];
                var saveParameter = this.attrs.saveParameter;
                var filenameParts = ev.currentTarget.value.split('\\');
                var filename = filenameParts[filenameParts.length - 1];
                var parameters = this.attrs.widget.value.parameters;

                saveParameter(parameters.fileName, {
                    value: filename,
                    state: ['defined']
                });

                reader.onloadend = function (ev) {
                    saveParameter(parameters.fileData, {
                        value: ev.target.result,
                        state: ['defined']
                    });
                };

                reader.readAsBinaryString(fileHandle);
            }
        }

    });
});
define("collections/components/file-uploader/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "collections/components/file-uploader/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Filename: ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "filename", ["loc", [null, [35, 14], [35, 26]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 4
              },
              "end": {
                "line": 50,
                "column": 4
              }
            },
            "moduleName": "collections/components/file-uploader/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "submission-upload");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "directions");
            var el3 = dom.createTextNode("\n              Select a preprint file to upload\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("input");
            dom.setAttribute(el2, "class", "upload");
            dom.setAttribute(el2, "type", "file");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 3]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'onchange');
            return morphs;
          },
          statements: [["attribute", "onchange", ["subexpr", "action", ["uploadFile"], ["value", ["get", "target", ["loc", [null, [47, 51], [47, 57]]], 0, 0, 0, 0]], ["loc", [null, [null, null], [47, 59]]], 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 0
            }
          },
          "moduleName": "collections/components/file-uploader/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isOpen", ["loc", [null, [39, 10], [39, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [39, 4], [50, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "collections/components/file-uploader/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("style");
        var el2 = dom.createTextNode("\n\n    .submission-upload {\n        position: relative;\n        overflow: hidden;\n        border: 2px dashed #ddd;\n        border-radius: 3px;\n        padding: 10px;\n        background-color: #f5f5f5;\n    }\n\n    .submission-upload input.upload {\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 100%;\n        margin: 0;\n        padding: 0;\n        font-size: 20px;\n        cursor: pointer;\n        opacity: 0;\n        filter: alpha(opacity=0);\n    }\n\n    .submission-upload .directions {\n        position: relative;\n        text-align: center;\n        margin: 0 auto;\n        color: #666;\n    }\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "not", [["get", "isOpen", ["loc", [null, [34, 11], [34, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [34, 6], [34, 18]]], 0, 0]], [], 0, null, ["loc", [null, [34, 0], [36, 7]]]], ["block", "preprint-form-body", [], [], 1, null, ["loc", [null, [38, 0], [51, 23]]]], ["content", "yield", ["loc", [null, [52, 0], [52, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/file-version/component', ['exports', 'ember-osf/components/file-version/component'], function (exports, _emberOsfComponentsFileVersionComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileVersionComponent['default'];
    }
  });
});
define('collections/components/file-widget/component', ['exports', 'ember-osf/components/file-widget/component'], function (exports, _emberOsfComponentsFileWidgetComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsFileWidgetComponent['default'];
    }
  });
});
define('collections/components/group-detail/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        editMode: false,
        showDeleteGroupConfirmation: false, // Modal for deleting group
        resetModelCache: function resetModelCache() {
            var model = this.get('model');
            return {
                title: model.get('title'),
                description: model.get('description')
            };
        },
        modelCache: _ember['default'].computed('model', function () {
            return this.resetModelCache();
        }),
        actions: {
            showEdit: function showEdit() {
                this.set('editMode', true);
            },
            cancelEdit: function cancelEdit() {
                this.set('editMode', false);
                this.set('modelCache', this.resetModelCache());
            },
            saveEdit: function saveEdit() {
                var model = this.get('model');
                model.set('title', this.get('modelCache.title'));
                model.set('description', this.get('modelCache.description'));
                model.save();
                this.set('editMode', false);
            },
            deletePartial: function deletePartial() {
                // Move items to collection before deleting group
                var items = this.get('model.items');
                items.forEach(function (item) {
                    item.set('group', null);
                    item.save();
                });
                this.send('deleteGroup');
                this.set('showDeleteGroupConfirmation', false);
            },
            deleteGroup: function deleteGroup() {
                var _this = this;

                // Delete group and any items it contains
                var collection = this.get('model.collection');
                this.get('model').destroyRecord().then(function () {
                    _this.set('showDeleteGroupConfirmation', false);
                    _this.get('changeRoute')('collection.browse', collection.get('id'));
                });
            }
        }
    });
});
define("collections/components/group-detail/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "collections/components/group-detail/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "collectionTitle");
          var el4 = dom.createTextNode("Title");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "collectionDescription");
          var el4 = dom.createTextNode("Description");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "text-right");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createTextNode("Cancel");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-success");
          var el4 = dom.createTextNode("Save");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var element12 = dom.childAt(element11, [5]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element12, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element11, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(element11, [3]), 3, 3);
          morphs[2] = dom.createElementMorph(element13);
          morphs[3] = dom.createElementMorph(element14);
          return morphs;
        },
        statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "modelCache.title", ["loc", [null, [7, 51], [7, 67]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter title", "id", "collectionTitle"], ["loc", [null, [7, 16], [7, 116]]], 0, 0], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "modelCache.description", ["loc", [null, [11, 54], [11, 76]]], 0, 0, 0, 0]], [], [], 0, 0], "id", "collectionDescription"], ["loc", [null, [11, 16], [11, 105]]], 0, 0], ["element", "action", ["cancelEdit"], [], ["loc", [null, [14, 48], [14, 71]]], 0, 0], ["element", "action", ["saveEdit"], [], ["loc", [null, [15, 48], [15, 69]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 20
              },
              "end": {
                "line": 19,
                "column": 85
              }
            },
            "moduleName": "collections/components/group-detail/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-angle-left");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 12
              },
              "end": {
                "line": 23,
                "column": 12
              }
            },
            "moduleName": "collections/components/group-detail/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.description", ["loc", [null, [22, 16], [22, 37]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 12
              },
              "end": {
                "line": 25,
                "column": 12
              }
            },
            "moduleName": "collections/components/group-detail/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "text-muted");
            var el2 = dom.createTextNode("Add description ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["element", "action", ["showEdit"], [], ["loc", [null, [24, 41], [24, 62]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 4
            }
          },
          "moduleName": "collections/components/group-detail/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "m-b-md");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Date created: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Date updated : ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pull-right");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-danger btn-collection");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-times");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Delete ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-info btn-collection");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "fa fa-pencil");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Edit");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var element8 = dom.childAt(fragment, [9]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element8, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(element7, 3, 3);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          morphs[5] = dom.createElementMorph(element9);
          morphs[6] = dom.createElementMorph(element10);
          return morphs;
        },
        statements: [["block", "link-to", ["collection.browse"], [], 0, null, ["loc", [null, [19, 20], [19, 97]]]], ["content", "model.title", ["loc", [null, [19, 105], [19, 120]]], 0, 0, 0, 0], ["block", "if", [["get", "model.description", ["loc", [null, [21, 18], [21, 35]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [21, 12], [25, 19]]]], ["content", "model.dateCreated", ["loc", [null, [27, 25], [27, 46]]], 0, 0, 0, 0], ["content", "model.dateUpdated", ["loc", [null, [28, 26], [28, 47]]], 0, 0, 0, 0], ["element", "action", [["get", "toggleProperty", ["loc", [null, [30, 67], [30, 81]]], 0, 0, 0, 0], "showDeleteGroupConfirmation"], [], ["loc", [null, [30, 58], [30, 113]]], 0, 0], ["element", "action", ["showEdit"], [], ["loc", [null, [31, 56], [31, 77]]], 0, 0]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 0
            }
          },
          "moduleName": "collections/components/group-detail/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal fade in");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "role", "dialog");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-dialog");
          dom.setAttribute(el2, "role", "document");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "modal-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-header");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "close");
          dom.setAttribute(el5, "aria-label", "Close");
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "aria-hidden", "true");
          var el7 = dom.createTextNode("×");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5, "class", "modal-title");
          var el6 = dom.createTextNode("Delete this group?");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-body");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          var el6 = dom.createTextNode(" Are you sure you want to delete this group? ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          var el6 = dom.createTextNode("You can delete the group and keep items. This option will put the items back into the collection.");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-footer");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-default");
          var el6 = dom.createTextNode("Close");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-warning");
          var el6 = dom.createTextNode("Delete Group and keep items");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-danger");
          var el6 = dom.createTextNode("Delete all");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment(" /.modal-content ");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment(" /.modal-dialog ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" /.modal ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-backdrop fade in");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 1, 1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [5]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [3]);
          var element5 = dom.childAt(element2, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["element", "action", [["get", "toggleProperty", ["loc", [null, [43, 72], [43, 86]]], 0, 0, 0, 0], "showDeleteGroupConfirmation"], [], ["loc", [null, [43, 63], [43, 118]]], 0, 0], ["element", "action", [["get", "toggleProperty", ["loc", [null, [51, 63], [51, 77]]], 0, 0, 0, 0], "showDeleteGroupConfirmation"], [], ["loc", [null, [51, 54], [51, 109]]], 0, 0], ["element", "action", ["deletePartial"], [], ["loc", [null, [52, 54], [52, 80]]], 0, 0], ["element", "action", ["deleteGroup"], [], ["loc", [null, [53, 53], [53, 77]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        },
        "moduleName": "collections/components/group-detail/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-add-layer p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "editMode", ["loc", [null, [3, 11], [3, 19]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [33, 11]]]], ["block", "if", [["get", "showDeleteGroupConfirmation", ["loc", [null, [38, 6], [38, 33]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [38, 0], [60, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('collections/components/item-detail-page/component', ['exports', 'ember', 'collections/utils/itemClasses'], function (exports, _ember, _collectionsUtilsItemClasses) {
    exports['default'] = _ember['default'].Component.extend({
        store: _ember['default'].inject.service(),
        session: _ember['default'].inject.service(),
        constructedItem: null,
        didReceiveAttrs: function didReceiveAttrs() {
            var type = this.get('item.type');
            this.set('constructedItem', _collectionsUtilsItemClasses.itemClasses[type].create({
                session: this.get('session'),
                store: this.get('store'),
                item: this.get('item')
            }));
        }
    });
});
define("collections/components/item-detail-page/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 36
                  },
                  "end": {
                    "line": 13,
                    "column": 36
                  }
                },
                "moduleName": "collections/components/item-detail-page/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createElement("a");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1, 0]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element1, 'href');
                morphs[1] = dom.createElementMorph(element1);
                morphs[2] = dom.createMorphAt(element1, 0, 0);
                morphs[3] = dom.createMorphAt(element1, 2, 2);
                return morphs;
              },
              statements: [["attribute", "href", ["get", "author.users.profileURL", ["loc", [null, [12, 54], [12, 77]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["click", "link", "Content - Author", ["get", "author.users.profileURL", ["loc", [null, [12, 123], [12, 146]]], 0, 0, 0, 0]], [], ["loc", [null, [12, 80], [12, 148]]], 0, 0], ["content", "author.users.givenName", ["loc", [null, [12, 149], [12, 175]]], 0, 0, 0, 0], ["content", "author.users.familyName", ["loc", [null, [12, 176], [12, 203]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 32
                },
                "end": {
                  "line": 14,
                  "column": 32
                }
              },
              "moduleName": "collections/components/item-detail-page/template.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "author.bibliographic", ["loc", [null, [11, 42], [11, 62]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [11, 36], [13, 43]]]]],
            locals: ["author", "index"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 28
              },
              "end": {
                "line": 15,
                "column": 28
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "constructedItem.viewContent.authors.value", ["loc", [null, [10, 40], [10, 81]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 32], [14, 42]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 28
              },
              "end": {
                "line": 23,
                "column": 28
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "loader");
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "loader-inner ball-pulse");
            var el3 = dom.createTextNode("\n                                      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 24
            },
            "end": {
              "line": 24,
              "column": 24
            }
          },
          "moduleName": "collections/components/item-detail-page/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "constructedItem.viewContent.authors.loaded", ["loc", [null, [9, 34], [9, 76]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [9, 28], [23, 35]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 20
              },
              "end": {
                "line": 40,
                "column": 20
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "file-renderer", [], ["download", ["subexpr", "@mut", [["get", "constructedItem.viewContent.file.value", ["loc", [null, [38, 53], [38, 91]]], 0, 0, 0, 0]], [], [], 0, 0], "width", "99%", "height", "1000", "allowfullscreen", true], ["loc", [null, [38, 28], [38, 140]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 20
              },
              "end": {
                "line": 48,
                "column": 20
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "loader text-center");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "loader-inner ball-pulse ball-pulse-dark");
            var el3 = dom.createTextNode("\n                              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 16
            },
            "end": {
              "line": 49,
              "column": 16
            }
          },
          "moduleName": "collections/components/item-detail-page/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "constructedItem.viewContent.file.loaded", ["loc", [null, [36, 26], [36, 65]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [36, 20], [48, 27]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 20
              },
              "end": {
                "line": 57,
                "column": 20
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("pre");
            dom.setAttribute(el2, "style", "white-space: pre-wrap; border:none; width:100%; text-align:justify; max-height: 300px;");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "constructedItem.viewContent.wiki.value", ["loc", [null, [54, 32], [54, 74]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 57,
                "column": 20
              },
              "end": {
                "line": 65,
                "column": 20
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "loader text-center");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "loader-inner ball-pulse ball-pulse-dark");
            var el3 = dom.createTextNode("\n                              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 16
            },
            "end": {
              "line": 66,
              "column": 16
            }
          },
          "moduleName": "collections/components/item-detail-page/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "constructedItem.viewContent.wiki.loaded", ["loc", [null, [51, 26], [51, 65]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [51, 20], [65, 27]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 71,
                "column": 16
              },
              "end": {
                "line": 73,
                "column": 16
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "constructedItem.viewContent.description.value", ["loc", [null, [72, 23], [72, 72]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 16
              },
              "end": {
                "line": 81,
                "column": 16
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "loader text-center");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "loader-inner ball-pulse ball-pulse-dark");
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 12
            },
            "end": {
              "line": 82,
              "column": 12
            }
          },
          "moduleName": "collections/components/item-detail-page/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "constructedItem.viewContent.description.loaded", ["loc", [null, [71, 22], [71, 68]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [71, 16], [81, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 91,
                  "column": 24
                },
                "end": {
                  "line": 93,
                  "column": 24
                }
              },
              "moduleName": "collections/components/item-detail-page/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "coll-item-tag");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "tag", ["loc", [null, [92, 56], [92, 63]]], 0, 0, 0, 0]],
            locals: ["tag"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 16
              },
              "end": {
                "line": 95,
                "column": 16
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "constructedItem.viewContent.tags.value", ["loc", [null, [91, 32], [91, 70]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [91, 24], [93, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 95,
                "column": 16
              },
              "end": {
                "line": 103,
                "column": 16
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "loader text-center");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "loader-inner ball-pulse ball-pulse-dark");
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 12
            },
            "end": {
              "line": 104,
              "column": 12
            }
          },
          "moduleName": "collections/components/item-detail-page/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1, "class", "p-v-md f-w-md");
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("Tags");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "constructedItem.viewContent.tags.loaded", ["loc", [null, [89, 22], [89, 61]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [89, 16], [103, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 107,
                "column": 16
              },
              "end": {
                "line": 111,
                "column": 16
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "m-t-md");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "class", "btn btn-default btn-block");
            var el3 = dom.createTextNode(" Go to Source");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "constructedItem.viewContent.sourceLink.value", ["loc", [null, [109, 35], [109, 79]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 111,
                "column": 16
              },
              "end": {
                "line": 119,
                "column": 16
              }
            },
            "moduleName": "collections/components/item-detail-page/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "loader text-center");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "loader-inner ball-pulse ball-pulse-dark");
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 12
            },
            "end": {
              "line": 120,
              "column": 12
            }
          },
          "moduleName": "collections/components/item-detail-page/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "constructedItem.viewContent.sourceLink.loaded", ["loc", [null, [107, 22], [107, 67]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [107, 16], [119, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 126,
            "column": 0
          }
        },
        "moduleName": "collections/components/item-detail-page/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-item-header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-12 col-sm-10");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h1");
        dom.setAttribute(el5, "class", "p-b-md");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h5");
        dom.setAttribute(el5, "class", "view-authors");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("ul");
        dom.setAttribute(el6, "class", "comma-list");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Added on: ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" | Last edited: ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row p-t-lg");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-sm-8");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "p-v-md f-w-md");
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Description");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "p-v-md f-w-md");
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1, 1, 1]);
        var element3 = dom.childAt(element2, [5]);
        var element4 = dom.childAt(fragment, [2, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element6, [7]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [3, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(element5, 1, 1);
        morphs[5] = dom.createMorphAt(element5, 2, 2);
        morphs[6] = dom.createAttrMorph(element6, 'class');
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        morphs[8] = dom.createAttrMorph(element7, 'class');
        morphs[9] = dom.createMorphAt(element7, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 9, 9);
        morphs[11] = dom.createMorphAt(element6, 11, 11);
        return morphs;
      },
      statements: [["content", "constructedItem.viewContent.title.value", ["loc", [null, [5, 35], [5, 79]]], 0, 0, 0, 0], ["block", "if", [["get", "constructedItem.viewContent.authors.visible", ["loc", [null, [8, 30], [8, 73]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 24], [24, 31]]]], ["inline", "moment-format", [["get", "model.datePublished", ["loc", [null, [27, 45], [27, 64]]], 0, 0, 0, 0], "MMMM DD, YYYY"], [], ["loc", [null, [27, 29], [27, 82]]], 0, 0], ["inline", "moment-format", [["get", "model.dateModified", ["loc", [null, [27, 114], [27, 132]]], 0, 0, 0, 0], "MMMM DD, YYYY"], [], ["loc", [null, [27, 98], [27, 150]]], 0, 0], ["block", "if", [["get", "constructedItem.viewContent.file.visible", ["loc", [null, [35, 22], [35, 62]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [35, 16], [49, 23]]]], ["block", "if", [["get", "constructedItem.viewContent.wiki.visible", ["loc", [null, [50, 22], [50, 62]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [50, 16], [66, 23]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "or", [["get", "constructedItem.viewContent.file.visible", ["loc", [null, [68, 29], [68, 69]]], 0, 0, 0, 0], ["get", "constructedItem.viewContent.wiki.visible", ["loc", [null, [68, 70], [68, 110]]], 0, 0, 0, 0]], [], ["loc", [null, [68, 25], [68, 111]]], 0, 0], "col-sm-4", "col-sm-12"], [], ["loc", [null, [68, 20], [68, 136]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "constructedItem.viewContent.description.visible", ["loc", [null, [70, 18], [70, 65]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [70, 12], [82, 19]]]], ["attribute", "class", ["concat", ["coll-item-status ", ["get", "item.status", ["loc", [null, [85, 41], [85, 52]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.status", ["loc", [null, [85, 57], [85, 72]]], 0, 0, 0, 0], ["block", "if", [["get", "constructedItem.viewContent.tags.visible", ["loc", [null, [87, 18], [87, 58]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [87, 12], [104, 19]]]], ["block", "if", [["get", "constructedItem.viewContent.sourceLink.visible", ["loc", [null, [106, 18], [106, 64]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [106, 12], [120, 19]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define('collections/components/landing-board/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        listColumns: _ember['default'].computed('layout', function () {
            var dataSource = this.get('layout.data');
            var list = this.get('model.settings').data[dataSource];
            var column = {};
            var splitIndex = Math.round(list.length / 2);
            column.left = list.splice(0, splitIndex);
            column.right = list;
            return column;
        }),
        containerStyle: _ember['default'].computed('branding.colors', function () {
            return _ember['default'].String.htmlSafe("background-color: " + this.get('branding.colors.background') + "; color: " + this.get('branding.colors.backgroundText'));
        })
    });
});
define("collections/components/landing-board/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 20
            },
            "end": {
              "line": 9,
              "column": 20
            }
          },
          "moduleName": "collections/components/landing-board/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("b");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(", ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [0]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element3, 0, 0);
          morphs[1] = dom.createMorphAt(element3, 2, 2);
          morphs[2] = dom.createMorphAt(element2, 2, 2);
          return morphs;
        },
        statements: [["content", "person.firstName", ["loc", [null, [8, 31], [8, 51]]], 0, 0, 0, 0], ["content", "person.lastName", ["loc", [null, [8, 52], [8, 71]]], 0, 0, 0, 0], ["content", "person.institution", ["loc", [null, [8, 77], [8, 99]]], 0, 0, 0, 0]],
        locals: ["person"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 20
            },
            "end": {
              "line": 16,
              "column": 20
            }
          },
          "moduleName": "collections/components/landing-board/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("b");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(", ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [0]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element1, 0, 0);
          morphs[1] = dom.createMorphAt(element1, 2, 2);
          morphs[2] = dom.createMorphAt(element0, 2, 2);
          return morphs;
        },
        statements: [["content", "person.firstName", ["loc", [null, [15, 31], [15, 51]]], 0, 0, 0, 0], ["content", "person.lastName", ["loc", [null, [15, 52], [15, 71]]], 0, 0, 0, 0], ["content", "person.institution", ["loc", [null, [15, 77], [15, 99]]], 0, 0, 0, 0]],
        locals: ["person"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "collections/components/landing-board/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "landing-board-wrapper p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-6");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-6");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element4, 'style');
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element6, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element6, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "style", ["concat", [["get", "containerStyle", ["loc", [null, [1, 49], [1, 63]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "layout.title", ["loc", [null, [3, 13], [3, 29]]], 0, 0, 0, 0], ["block", "each", [["get", "listColumns.left", ["loc", [null, [7, 28], [7, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 20], [9, 29]]]], ["block", "each", [["get", "listColumns.right", ["loc", [null, [14, 28], [14, 45]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [14, 20], [16, 29]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/landing-copyright/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        data: _ember['default'].computed('layout', function () {
            var dataSource = this.get('layout.data');
            return this.get('model.settings').data[dataSource];
        })
    });
});
define("collections/components/landing-copyright/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 12
              },
              "end": {
                "line": 7,
                "column": 12
              }
            },
            "moduleName": "collections/components/landing-copyright/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["fa ", ["get", "link.icon", ["loc", [null, [6, 31], [6, 40]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 12
              },
              "end": {
                "line": 9,
                "column": 12
              }
            },
            "moduleName": "collections/components/landing-copyright/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "link.label", ["loc", [null, [8, 16], [8, 30]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "collections/components/landing-copyright/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "m-r-sm");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'href');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "link.url", ["loc", [null, [4, 19], [4, 27]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "link.icon", ["loc", [null, [5, 18], [5, 27]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [5, 12], [9, 19]]]]],
        locals: ["link"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "collections/components/landing-copyright/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "landing-copyright-wrapper p-xl text-center");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "m-r-sm");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["content", "model.title", ["loc", [null, [2, 25], [2, 40]]], 0, 0, 0, 0], ["block", "each", [["get", "data", ["loc", [null, [3, 12], [3, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 4], [11, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('collections/components/landing-default/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    session: _ember['default'].inject.service()
  });
});
define("collections/components/landing-default/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 19
              },
              "end": {
                "line": 8,
                "column": 97
              }
            },
            "moduleName": "collections/components/landing-default/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Add to Collection ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 16
            },
            "end": {
              "line": 9,
              "column": 16
            }
          },
          "moduleName": "collections/components/landing-default/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["collection.add"], ["class", "btn btn-success btn-lg"], 0, null, ["loc", [null, [8, 19], [8, 109]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "collections/components/landing-default/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "landing-default-footer p-xl text-center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "container");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode(" Customize your landing page");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode(" You can add details to your landing page by changing settings to add layout layers. Visit Edit page to make changes. ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 7
          }
        },
        "moduleName": "collections/components/landing-default/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "landing-default-container p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n           ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "text-center m-t-lg col-xs-12");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        dom.setAttribute(el5, "class", "p-v-md");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("           ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "model.title", ["loc", [null, [5, 20], [5, 35]]], 0, 0, 0, 0], ["content", "model.description", ["loc", [null, [6, 34], [6, 55]]], 0, 0, 0, 0], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [7, 22], [7, 45]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 16], [9, 23]]]], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [14, 6], [14, 29]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [14, 0], [21, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/landing-hero/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        session: _ember['default'].inject.service(),
        data: _ember['default'].computed('layout', function () {
            var dataSource = this.get('layout.data');
            return this.get('model.settings').data[dataSource];
        }),
        searchQuery: '',
        actions: {
            search: function search() {
                this.get('changeRoute')('collection.search', this.get('model.id'));
            }
        },
        containerStyle: _ember['default'].computed('branding.colors', function () {
            return _ember['default'].String.htmlSafe("background-color: " + this.get('branding.colors.background') + "; color: " + this.get('branding.colors.backgroundText'));
        }),
        logoStyle: _ember['default'].computed('branding.logo', function () {
            return _ember['default'].String.htmlSafe("background-image: url(" + this.get('branding.logo.url') + "); height: " + this.get('branding.logo.height'));
        })
    });
});
define("collections/components/landing-hero/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 15
            },
            "end": {
              "line": 8,
              "column": 15
            }
          },
          "moduleName": "collections/components/landing-hero/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "coll-hero-logo");
          dom.setAttribute(el1, "aria-role", "img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'style');
          morphs[1] = dom.createAttrMorph(element0, 'aria-label');
          return morphs;
        },
        statements: [["attribute", "style", ["concat", [["get", "logoStyle", ["loc", [null, [7, 57], [7, 66]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "aria-label", ["concat", [["get", "branding.logo.label", ["loc", [null, [7, 100], [7, 119]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 15
            },
            "end": {
              "line": 10,
              "column": 15
            }
          },
          "moduleName": "collections/components/landing-hero/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "layout.title", ["loc", [null, [9, 24], [9, 40]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 16
              },
              "end": {
                "line": 20,
                "column": 94
              }
            },
            "moduleName": "collections/components/landing-hero/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Add to Collection ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 14
            },
            "end": {
              "line": 21,
              "column": 14
            }
          },
          "moduleName": "collections/components/landing-hero/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["collection.add"], ["class", "btn btn-success btn-lg"], 0, null, ["loc", [null, [20, 16], [20, 106]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "collections/components/landing-hero/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "landing-hero-container p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n           ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "text-center m-t-lg col-xs-12");
        var el5 = dom.createTextNode("\n               ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "preprint-brand");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("               ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        dom.setAttribute(el5, "class", "lead");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n               ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "input-group input-group-lg m-b-md");
        var el6 = dom.createTextNode("\n                   ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                   ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "input-group-btn");
        var el7 = dom.createTextNode("\n                       ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "class", "btn btn-default");
        dom.setAttribute(el7, "type", "button");
        var el8 = dom.createTextNode("Search");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                   ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n               ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("           ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1, 1, 1]);
        var element3 = dom.childAt(element2, [7]);
        var element4 = dom.childAt(element3, [3, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element1, 'style');
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element2, 9, 9);
        return morphs;
      },
      statements: [["attribute", "style", ["concat", [["get", "containerStyle", ["loc", [null, [1, 50], [1, 64]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "layout.settings.useLogo", ["loc", [null, [6, 21], [6, 44]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [6, 15], [10, 22]]]], ["content", "layout.tagline", ["loc", [null, [11, 31], [11, 49]]], 0, 0, 0, 0], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "searchQuery", ["loc", [null, [14, 33], [14, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Search preprints...", "class", "form-control"], ["loc", [null, [14, 19], [14, 101]]], 0, 0], ["element", "action", ["search"], [], ["loc", [null, [16, 69], [16, 88]]], 0, 0], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [19, 20], [19, 43]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [19, 14], [21, 21]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('collections/components/landing-list/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        data: _ember['default'].computed('layout', function () {
            var dataSource = this.get('layout.data');
            return this.get('model.settings').data[dataSource];
        }),
        buttonStyle: _ember['default'].computed('branding.colors', function () {
            return _ember['default'].String.htmlSafe("background-color: " + this.get('branding.colors.primary'));
        })
    });
});
define("collections/components/landing-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 9,
              "column": 12
            }
          },
          "moduleName": "collections/components/landing-list/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-12 col-sm-6 subject-item hint--bottom hint--large");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "btn btn-primary p-sm ember-view");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'aria-label');
          morphs[1] = dom.createAttrMorph(element1, 'href');
          morphs[2] = dom.createAttrMorph(element1, 'style');
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "aria-label", ["concat", [["get", "subject.label", ["loc", [null, [6, 100], [6, 113]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "subject.link", ["loc", [null, [7, 31], [7, 43]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "style", ["concat", [["get", "buttonStyle", ["loc", [null, [7, 96], [7, 107]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "subject.name", ["loc", [null, [7, 111], [7, 127]]], 0, 0, 0, 0]],
        locals: ["subject"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "collections/components/landing-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "landing-list-container p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "subject row m-b-sm");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        return morphs;
      },
      statements: [["content", "layout.title", ["loc", [null, [3, 13], [3, 29]]], 0, 0, 0, 0], ["block", "each", [["get", "data", ["loc", [null, [5, 20], [5, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 12], [9, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('collections/components/license-list/component', ['exports', 'ember-osf/components/license-list/component'], function (exports, _emberOsfComponentsLicenseListComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsLicenseListComponent['default'];
    }
  });
});
define('collections/components/license-picker/component', ['exports', 'ember-osf/components/license-picker/component'], function (exports, _emberOsfComponentsLicensePickerComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsLicensePickerComponent['default'];
    }
  });
});
define('collections/components/navbar-auth-dropdown/component', ['exports', 'ember', 'ember-osf/components/navbar-auth-dropdown/component'], function (exports, _ember, _emberOsfComponentsNavbarAuthDropdownComponent) {

    /**
     * Display the login dropdown on the navbar
     *
     * Sample usage:
     * ```handlebars
     * {{navbar-auth-dropdown
     *   loginAction=loginAction
     *   redirectUrl=redirectUrl}}
     * ```
     *
     * @class navbar-auth-dropdown
     */
    exports['default'] = _emberOsfComponentsNavbarAuthDropdownComponent['default'].extend({
        gravatarUrl: _ember['default'].computed('session.data.authenticated.user', function () {
            var userData = this.get('session.data.authenticated.user');
            var imgLink = userData.gravatar;
            return imgLink ? imgLink + '&s=25' : '';
        }),
        userName: _ember['default'].computed('session.data.authenticated.user', function () {
            var userData = this.get('session.data.authenticated.user');
            if (userData) {
                return userData.first_name + ' ' + userData.last_name;
            }
        }),
        actions: {
            logout: function logout() {
                this.get('session').invalidate()['catch'](function () {
                    return window.location.href = 'http://localhost:4200/';
                });
            }
        }
    });
});
define("collections/components/navbar-auth-dropdown/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "collections/components/navbar-auth-dropdown/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "#");
          dom.setAttribute(el1, "class", "dropdown-toggle nav-user-dropdown");
          dom.setAttribute(el1, "data-toggle", "dropdown");
          dom.setAttribute(el1, "role", "button");
          dom.setAttribute(el1, "aria-expanded", "false");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "osf-gravatar");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("img");
          dom.setAttribute(el3, "alt", "User gravatar");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "caret");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-user fa-lg p-r-xs");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" My Profile");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-life-ring fa-lg p-r-xs");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Support");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-cog fa-lg p-r-xs");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Settings");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "pointer");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-sign-out fa-lg p-r-xs");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Log out");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1, 1]);
          var element3 = dom.childAt(fragment, [3]);
          var element4 = dom.childAt(element3, [1, 1]);
          var element5 = dom.childAt(element3, [3, 1]);
          var element6 = dom.childAt(element3, [5, 1]);
          var element7 = dom.childAt(element3, [7, 1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element2, 'src');
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          morphs[2] = dom.createAttrMorph(element4, 'href');
          morphs[3] = dom.createAttrMorph(element5, 'href');
          morphs[4] = dom.createAttrMorph(element6, 'href');
          morphs[5] = dom.createAttrMorph(element7, 'onclick');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "gravatarUrl", ["loc", [null, [4, 24], [4, 35]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "userName", ["loc", [null, [5, 16], [5, 28]]], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [10, 23], [10, 27]]], 0, 0, 0, 0], "profile/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [13, 23], [13, 27]]], 0, 0, 0, 0], "support/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [16, 23], [16, 27]]], 0, 0, 0, 0], "settings/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "onclick", ["subexpr", "action", ["logout"], [], ["loc", [null, [null, null], [19, 42]]], 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "collections/components/navbar-auth-dropdown/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-sm-12");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "btn btn-info btn-top-login m-r-xs");
          var el3 = dom.createTextNode("Sign in with OSF");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", [["get", "loginAction", ["loc", [null, [24, 20], [24, 31]]], 0, 0, 0, 0]], [], ["loc", [null, [24, 11], [24, 33]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "collections/components/navbar-auth-dropdown/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [1, 6], [1, 29]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [26, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/oauth-popup/component', ['exports', 'ember-osf/components/oauth-popup/component'], function (exports, _emberOsfComponentsOauthPopupComponent) {
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function get() {
            return _emberOsfComponentsOauthPopupComponent['default'];
        }
    });
});
define('collections/components/osf-copyright/component', ['exports', 'ember-osf/components/osf-copyright/component'], function (exports, _emberOsfComponentsOsfCopyrightComponent) {
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function get() {
            return _emberOsfComponentsOsfCopyrightComponent['default'];
        }
    });
});
define('collections/components/osf-footer/component', ['exports', 'ember-osf/components/osf-footer/component'], function (exports, _emberOsfComponentsOsfFooterComponent) {
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function get() {
            return _emberOsfComponentsOsfFooterComponent['default'];
        }
    });
});
define('collections/components/osf-mode-footer/component', ['exports', 'ember-osf/components/osf-mode-footer/component'], function (exports, _emberOsfComponentsOsfModeFooterComponent) {
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function get() {
            return _emberOsfComponentsOsfModeFooterComponent['default'];
        }
    });
});
define('collections/components/osf-navbar/component', ['exports', 'ember-osf/components/osf-navbar/component'], function (exports, _emberOsfComponentsOsfNavbarComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsOsfNavbarComponent['default'];
    }
  });
});
define('collections/components/osf-paginator/component', ['exports', 'ember-osf/components/osf-paginator/component'], function (exports, _emberOsfComponentsOsfPaginatorComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsOsfPaginatorComponent['default'];
    }
  });
});
define('collections/components/page-controls/component', ['exports', 'ember-osf/components/page-controls/component'], function (exports, _emberOsfComponentsPageControlsComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsPageControlsComponent['default'];
    }
  });
});
define('collections/components/page-item', ['exports', 'ember', 'pagination-pager/components/page-item'], function (exports, _ember, _paginationPagerComponentsPageItem) {
  exports['default'] = _paginationPagerComponentsPageItem['default'];
});
define('collections/components/pagination-control/component', ['exports', 'ember-osf/components/pagination-control/component'], function (exports, _emberOsfComponentsPaginationControlComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsPaginationControlComponent['default'];
    }
  });
});
define('collections/components/pagination-pager', ['exports', 'ember', 'pagination-pager/components/pagination-pager'], function (exports, _ember, _paginationPagerComponentsPaginationPager) {
  exports['default'] = _paginationPagerComponentsPaginationPager['default'];
});
define('collections/components/paragraph-display/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("collections/components/paragraph-display/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "collections/components/paragraph-display/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "m-t-sm");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["content", "description", ["loc", [null, [2, 0], [2, 15]]], 0, 0, 0, 0], ["content", "yield", ["loc", [null, [4, 0], [4, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('collections/components/preprint-basics/component', ['exports', 'ember', 'ember-osf/utils/fix-special-char', 'ember-cp-validations', 'collections/config/environment'], function (exports, _ember, _emberOsfUtilsFixSpecialChar, _emberCpValidations, _collectionsConfigEnvironment) {

    // Form data and validations
    var BASICS_VALIDATIONS = (0, _emberCpValidations.buildValidations)({
        basicsAbstract: {
            description: 'Abstract',
            validators: [(0, _emberCpValidations.validator)('presence', true), (0, _emberCpValidations.validator)('length', {
                // currently min of 20 characters -- this is what arXiv has as the minimum length of an abstract
                min: 20,
                max: 5000
            })]
        },
        basicsDOI: {
            description: 'DOI',
            validators: [(0, _emberCpValidations.validator)('format', {
                // Simplest regex- try not to diverge too much from the backend
                regex: /\b(10\.\d{4,}(?:\.\d+)*\/\S+(?:(?!["&\'<>])\S))\b/,
                allowBlank: true,
                message: 'Please use a valid {description}'
            })]
        }
    });

    var DOI_REGEX = /\b(10\.\d{4,}(?:\.\d+)*\/\S+(?:(?!["&\'<>])\S))\b/;

    function doiRegexExec(doi) {
        //Strips url out of inputted doi, if any.  For example, user input this DOI: https://dx.doi.org/10.12345/hello. Returns 10.12345/hello.
        // If doi invalid, returns doi.
        if (doi) {
            var doiOnly = DOI_REGEX.exec(doi);
            return doiOnly !== null ? doiOnly[0] : doi;
        }
        return doi;
    }

    /* Does not support editing */
    exports['default'] = _ember['default'].Component.extend(BASICS_VALIDATIONS, {
        store: _ember['default'].inject.service(),
        editMode: true,
        applyLicense: false,

        /* Validation */
        uploadValid: _ember['default'].computed.alias('nodeLocked'), // Once the node has been locked (happens in step one of upload section), users are free to navigate through form unrestricted
        abstractValid: _ember['default'].computed.alias('validations.attrs.basicsAbstract.isValid'),
        doiValid: _ember['default'].computed.alias('validations.attrs.basicsDOI.isValid'),
        licenseValid: false, // Must have year and copyrightHolders filled if those are required by the licenseType selected

        // Basics fields that are being validated are abstract, license and doi (title validated in upload section). If validation added for other fields, expand basicsValid definition.
        basicsValid: _ember['default'].computed.and('abstractValid', 'doiValid', 'licenseValid'),

        /* Initial values */
        basicsAbstract: _ember['default'].computed('node.description', function () {
            var node = this.get('node');
            return node ? node.get('description') : null;
        }),
        basicsTags: _ember['default'].computed('node', function () {
            var node = this.get('node');
            return node ? node.get('tags').map(_emberOsfUtilsFixSpecialChar['default']) : _ember['default'].A();
        }),
        basicsDOI: null,
        basicsLicense: null,
        savedValues: null,

        basicsChanged: _ember['default'].observer('savedValues', 'basicsDOI', 'basicsLicense', 'basicsTags.@each', 'basicsAbstract', 'applyLicense', function () {
            var _this = this;

            var changed = false;
            var saved = this.get('savedValues');
            if (saved !== null) {
                var doiChanged = saved.basicsDOI !== this.get('basicsDOI');
                var licenseChanged = saved.basicsLicense !== this.get('basicsLicense') && this.get('applyLicense');
                var abstractChanged = saved.basicsAbstract ? saved.basicsAbstract !== this.get('basicsAbstract') : false;
                var tagsChanged = false;
                if (saved.basicsTags) {
                    tagsChanged = saved.basicsTags.length !== this.get('basicsTags').length || saved.basicsTags.some(function (v, i) {
                        return v !== _this.get('basicsTags')[i];
                    });
                }
                changed = doiChanged || licenseChanged || abstractChanged || tagsChanged;
            }
            this.set('isSectionSaved', !changed);
            return changed;
        }),

        actions: {
            addTag: function addTag(tag) {
                this.get('basicsTags').pushObject(tag);
            },
            removeTag: function removeTag(tag) {
                this.get('basicsTags').removeObject(tag);
            },
            applyLicenseToggle: function applyLicenseToggle(apply) {
                this.set('applyLicense', apply);
            },
            discardBasics: function discardBasics() {
                // Discard changes since load or last save
                var saved = this.get('savedValues');

                this.set('basicsTags', saved.basicsTags.map(function (a) {
                    return a;
                }));
                this.set('basicsAbstract', saved.basicsAbstract);
                this.set('basicsDOI', saved.basicsDOI);
                this.set('basicsLicense', saved.basicsLicense);
                this.set('applyLicense', false);
            },
            preventDefault: function preventDefault(e) {
                e.preventDefault();
            },
            stripDOI: function stripDOI() {
                // Replaces the inputted doi link with just the doi itself
                var basicsDOI = this.get('basicsDOI');
                this.set('basicsDOI', doiRegexExec(basicsDOI));
            },
            editLicense: function editLicense(basicsLicense, licenseValid) {
                this.setProperties({
                    basicsLicense: basicsLicense,
                    licenseValid: licenseValid
                });
                this.set('initialLicenseChangeMade', true);
            },
            saveBasics: function saveBasics() {
                var _this2 = this;

                // Saves the description/tags on the node and the DOI on the preprint, then advances to next panel
                if (!this.get('basicsValid')) {
                    return;
                }

                // Save locally
                var values = {
                    basicsDOI: this.get('basicsDOI'),
                    basicLicense: this.get('basicsLicense'),
                    basicsTags: this.get('basicsTags').slice(),
                    basicsAbstract: this.get('basicsAbstract')
                };
                this.set('savedValues', values);

                this.get('action')(this).then(function (result) {
                    _this2.attrs.saveParameter(_this2.attrs.widget.value.parameters.basicInfo, {
                        value: _this2.get('basicsAbstract'),
                        state: ['defined']
                    });
                    _this2.set('editMode', false);
                    _this2.attrs.closeSection(_this2.get('name'));
                });

                // Save at the end
                // Promise.all([
                //     node.save(),
                //     model.save()
                // ])
                //     .then(() => this.send('next', this.get('_names.2')))
                //     // If save fails, do not transition
                //     .catch(() => {
                //         this.get('toast').error(
                //             this.get('i18n').t('submit.basics_error')
                //         );
                //
                //         model.setProperties({
                //             licenseRecord: currentLicenseRecord,
                //             license: currentLicenseType,
                //             doi: currentDOI,
                //         });
                //
                //         node.setProperties({
                //             description: currentAbstract,
                //             tags: currentTags,
                //             license: currentNodeLicenseType,
                //             nodeLicense: currentNodeLicenseRecord,
                //         });
                //
                //         return Promise.all([
                //             node.save(),
                //             model.save()
                //         ]);
                //     });
            }
        },
        init: function init() {
            var _this3 = this;

            this._super.apply(this, arguments);
            this.get('store').findRecord('node', _collectionsConfigEnvironment['default'].NODE_GUID).then(function (result) {
                _this3.set('node', result);
                var node = _this3.get('node');
                var values = {
                    basicsDOI: null,
                    basicsLicense: null,
                    basicsTags: node.get('tags').map(_emberOsfUtilsFixSpecialChar['default']),
                    basicsAbstract: node.get('description')
                };
                _this3.set('savedValues', values);
            });
        }
    });
});
define("collections/components/preprint-basics/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 26
                },
                "end": {
                  "line": 12,
                  "column": 26
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["submit.body.basics.license.apply_license_text"], [], ["loc", [null, [11, 33], [11, 86]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 53,
                "column": 4
              }
            },
            "moduleName": "collections/components/preprint-basics/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row m-b-md");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "row");
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "col-xs-12");
            var el5 = dom.createTextNode("\n                          ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            var el6 = dom.createTextNode(" ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("                          ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "style", "margin: 5px");
            var el6 = dom.createTextNode("\n                              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("input");
            dom.setAttribute(el6, "type", "radio");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" Yes\n                              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("input");
            dom.setAttribute(el6, "type", "radio");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" No\n                          ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                      ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-6");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("label");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(":");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("form");
            var el5 = dom.createTextNode("\n                          ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                      ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "clearfix");
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("label");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(":");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "text-smaller");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-6");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "required");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(":");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-12");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pull-right");
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "class", "btn btn-default");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                      ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "class", "btn btn-primary");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var element2 = dom.childAt(element1, [5, 1]);
            var element3 = dom.childAt(element2, [5]);
            var element4 = dom.childAt(element3, [1]);
            if (this.cachedFragment) {
              dom.repairClonedNode(element4, [], true);
            }
            var element5 = dom.childAt(element3, [3]);
            if (this.cachedFragment) {
              dom.repairClonedNode(element5, [], true);
            }
            var element6 = dom.childAt(fragment, [3]);
            var element7 = dom.childAt(element6, [1]);
            var element8 = dom.childAt(element7, [1]);
            var element9 = dom.childAt(element8, [3]);
            var element10 = dom.childAt(element7, [3]);
            var element11 = dom.childAt(element6, [3]);
            var element12 = dom.childAt(fragment, [5, 1, 1]);
            var element13 = dom.childAt(element12, [1]);
            var element14 = dom.childAt(element12, [3]);
            var morphs = new Array(22);
            morphs[0] = dom.createMorphAt(element1, 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
            morphs[2] = dom.createMorphAt(element2, 3, 3);
            morphs[3] = dom.createAttrMorph(element4, 'onchange');
            morphs[4] = dom.createAttrMorph(element4, 'checked');
            morphs[5] = dom.createAttrMorph(element5, 'onchange');
            morphs[6] = dom.createAttrMorph(element5, 'checked');
            morphs[7] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
            morphs[8] = dom.createAttrMorph(element9, 'onchange');
            morphs[9] = dom.createAttrMorph(element9, 'onsubmit');
            morphs[10] = dom.createMorphAt(element9, 1, 1);
            morphs[11] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
            morphs[12] = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
            morphs[13] = dom.createMorphAt(element10, 5, 5);
            morphs[14] = dom.createMorphAt(dom.childAt(element11, [1, 1]), 0, 0);
            morphs[15] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
            morphs[16] = dom.createAttrMorph(element13, 'disabled');
            morphs[17] = dom.createElementMorph(element13);
            morphs[18] = dom.createMorphAt(element13, 0, 0);
            morphs[19] = dom.createAttrMorph(element14, 'disabled');
            morphs[20] = dom.createElementMorph(element14);
            morphs[21] = dom.createMorphAt(element14, 0, 0);
            return morphs;
          },
          statements: [["inline", "license-picker", [], ["currentValues", ["subexpr", "@mut", [["get", "basicsLicense", ["loc", [null, [5, 49], [5, 62]]], 0, 0, 0, 0]], [], [], 0, 0], "showCategories", false, "editLicense", ["subexpr", "action", ["editLicense"], [], ["loc", [null, [5, 96], [5, 118]]], 0, 0], "allowDismiss", false, "autosave", true, "showBorder", false, "pressSubmit", ["subexpr", "action", ["saveBasics"], [], ["loc", [null, [5, 181], [5, 202]]], 0, 0]], ["loc", [null, [5, 18], [5, 204]]], 0, 0], ["inline", "t", ["submit.body.basics.license.apply_license_title"], [], ["loc", [null, [9, 34], [9, 88]]], 0, 0], ["block", "if", [["subexpr", "or", [["subexpr", "not", [["get", "newNode", ["loc", [null, [10, 41], [10, 48]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 36], [10, 49]]], 0, 0], ["get", "editMode", ["loc", [null, [10, 50], [10, 58]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 32], [10, 59]]], 0, 0]], [], 0, null, ["loc", [null, [10, 26], [12, 33]]]], ["attribute", "onchange", ["subexpr", "action", ["applyLicenseToggle", true], [], ["loc", [null, [null, null], [14, 82]]], 0, 0], 0, 0, 0, 0], ["attribute", "checked", ["get", "applyLicense", ["loc", [null, [14, 106], [14, 118]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["applyLicenseToggle", false], [], ["loc", [null, [null, null], [15, 83]]], 0, 0], 0, 0, 0, 0], ["attribute", "checked", ["subexpr", "not", [["get", "applyLicense", ["loc", [null, [15, 111], [15, 123]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [15, 125]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["submit.body.basics.doi.label"], [], ["loc", [null, [25, 29], [25, 65]]], 0, 0], ["attribute", "onchange", ["subexpr", "action", ["stripDOI"], [], ["loc", [null, [null, null], [26, 58]]], 0, 0], 0, 0, 0, 0], ["attribute", "onsubmit", ["subexpr", "action", ["preventDefault"], [], ["loc", [null, [null, null], [26, 95]]], 0, 0], 0, 0, 0, 0], ["inline", "validated-input", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [27, 50], [27, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "valuePath", "basicsDOI", "placeholder", ["subexpr", "t", ["global.doi"], [], ["loc", [null, [27, 89], [27, 105]]], 0, 0], "value", ["subexpr", "@mut", [["get", "basicsDOI", ["loc", [null, [27, 112], [27, 121]]], 0, 0, 0, 0]], [], [], 0, 0], "pressSubmit", ["subexpr", "action", ["saveBasics"], [], ["loc", [null, [27, 134], [27, 155]]], 0, 0]], ["loc", [null, [27, 26], [27, 157]]], 0, 0], ["inline", "t", ["submit.body.basics.keywords.label"], [], ["loc", [null, [31, 29], [31, 70]]], 0, 0], ["inline", "t", ["submit.body.basics.keywords.paragraph"], [], ["loc", [null, [32, 46], [32, 91]]], 0, 0], ["inline", "tags-widget", [], ["addATag", ["subexpr", "action", ["addTag"], [], ["loc", [null, [33, 44], [33, 61]]], 0, 0], "removeATag", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [33, 73], [33, 93]]], 0, 0], "tags", ["subexpr", "@mut", [["get", "basicsTags", ["loc", [null, [33, 99], [33, 109]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [33, 22], [33, 111]]], 0, 0], ["inline", "t", ["global.abstract"], [], ["loc", [null, [38, 45], [38, 68]]], 0, 0], ["inline", "validated-input", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [41, 46], [41, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "valuePath", "basicsAbstract", "placeholder", ["subexpr", "t", ["submit.body.basics.abstract.placeholder"], [], ["loc", [null, [41, 90], [41, 135]]], 0, 0], "value", ["subexpr", "@mut", [["get", "basicsAbstract", ["loc", [null, [41, 142], [41, 156]]], 0, 0, 0, 0]], [], [], 0, 0], "large", true], ["loc", [null, [41, 22], [41, 169]]], 0, 0], ["attribute", "disabled", ["subexpr", "unless", [["get", "basicsChanged", ["loc", [null, [48, 99], [48, 112]]], 0, 0, 0, 0], true], [], ["loc", [null, [null, null], [48, 119]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["discardBasics"], [], ["loc", [null, [48, 30], [48, 56]]], 0, 0], ["inline", "t", ["global.discard"], [], ["loc", [null, [48, 121], [48, 143]]], 0, 0], ["attribute", "disabled", ["subexpr", "unless", [["get", "basicsValid", ["loc", [null, [49, 96], [49, 107]]], 0, 0, 0, 0], true], [], ["loc", [null, [null, null], [49, 114]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["saveBasics"], [], ["loc", [null, [49, 30], [49, 53]]], 0, 0], ["inline", "t", ["submit.body.save_continue"], [], ["loc", [null, [49, 116], [49, 149]]], 0, 0]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "collections/components/preprint-basics/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isOpen", ["loc", [null, [2, 10], [2, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [53, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 64,
                  "column": 16
                },
                "end": {
                  "line": 66,
                  "column": 16
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "basicsLicense.licenseType.name", ["loc", [null, [65, 26], [65, 60]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 66,
                  "column": 16
                },
                "end": {
                  "line": 68,
                  "column": 16
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              var el2 = dom.createTextNode("Not provided");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 15
                },
                "end": {
                  "line": 71,
                  "column": 45
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "basicsDOI", ["loc", [null, [71, 32], [71, 45]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 45
                },
                "end": {
                  "line": 71,
                  "column": 72
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              var el2 = dom.createTextNode("Not provided");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 74,
                    "column": 20
                  },
                  "end": {
                    "line": 74,
                    "column": 94
                  }
                },
                "moduleName": "collections/components/preprint-basics/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "subject-preview");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "tag", ["loc", [null, [74, 80], [74, 87]]], 0, 0, 0, 0]],
              locals: ["tag"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 73,
                  "column": 15
                },
                "end": {
                  "line": 75,
                  "column": 16
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["block", "each", [["get", "basicsTags", ["loc", [null, [74, 28], [74, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [74, 20], [74, 103]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 75,
                  "column": 16
                },
                "end": {
                  "line": 77,
                  "column": 16
                }
              },
              "moduleName": "collections/components/preprint-basics/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              var el2 = dom.createTextNode("Not provided");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 57,
                "column": 4
              },
              "end": {
                "line": 81,
                "column": 0
              }
            },
            "moduleName": "collections/components/preprint-basics/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row m-b-md");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("b");
            var el4 = dom.createTextNode("Abstract:");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("b");
            var el4 = dom.createTextNode("License:");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("b");
            var el4 = dom.createTextNode("DOI:");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("b");
            var el4 = dom.createTextNode("Tags:");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [15]), 0, 0);
            return morphs;
          },
          statements: [["content", "basicsAbstract", ["loc", [null, [61, 15], [61, 33]]], 0, 0, 0, 0], ["block", "if", [["get", "basicsLicense", ["loc", [null, [64, 22], [64, 35]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [64, 16], [68, 23]]]], ["block", "if", [["get", "basicsDOI", ["loc", [null, [71, 21], [71, 30]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [71, 15], [71, 79]]]], ["block", "if", [["get", "basicsTags", ["loc", [null, [73, 21], [73, 31]]], 0, 0, 0, 0]], [], 4, 5, ["loc", [null, [73, 15], [77, 23]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 0
            },
            "end": {
              "line": 82,
              "column": 0
            }
          },
          "moduleName": "collections/components/preprint-basics/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "basicsAbstract", ["loc", [null, [57, 10], [57, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [57, 4], [81, 7]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 83,
            "column": 0
          }
        },
        "moduleName": "collections/components/preprint-basics/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "preprint-form-body", [], [], 0, null, ["loc", [null, [1, 0], [54, 23]]]], ["block", "if", [["subexpr", "not", [["get", "isOpen", ["loc", [null, [56, 11], [56, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [56, 6], [56, 18]]], 0, 0]], [], 1, null, ["loc", [null, [56, 0], [82, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/preprint-form-authors/component', ['exports', 'ember', 'ember-osf/const/permissions', 'ember-osf/mixins/node-actions', 'collections/config/environment'], function (exports, _ember, _emberOsfConstPermissions, _emberOsfMixinsNodeActions, _collectionsConfigEnvironment) {

    // import Analytics from 'ember-osf/mixins/analytics';
    /**
     * @module ember-preprints
     * @submodule components
     */

    /**
     * Displays current preprint authors and their permissions/bibliographic information. Allows user to search for
     * authors, add authors, edit authors permissions/bibliographic information, and remove authors.  Actions
     * that are not allowed are disabled (for example, you cannot remove the sole bibliographic author).
     * @class preprint-form-authors
     */
    exports['default'] = _ember['default'].Component.extend(_emberOsfMixinsNodeActions['default'], {
        i18n: _ember['default'].inject.service(),

        // Variables that used to pass in from Controller
        store: _ember['default'].inject.service(),
        toast: _ember['default'].inject.service('toast'),
        currentUser: _ember['default'].inject.service('currentUser'),
        parentContributors: _ember['default'].A(),
        searchResults: _ember['default'].A(), // defaults, need update
        editMode: 'Submit', // defaults, need update
        parentNode: null, // defaults, need update
        isAdmin: true, // defaults, need update
        canEdit: true, // defaults, need update
        node: null,
        contributors: _ember['default'].computed('node', function () {
            var contribs = this.get('node.contributors');
            this.attrs.saveParameter(this.attrs.widget.value.parameters.authorsList, {
                value: contribs,
                state: ['defined']
            });
            return contribs;
        }),
        valid: _ember['default'].observer('contributors.length', function () {
            var hasContributors = this.get('contributors.length');
            this.set('isSectionSaved', hasContributors);
            return hasContributors;
        }),
        authorModification: false,
        currentPage: 1,
        // Permissions labels for dropdown
        permissionOptions: _emberOsfConstPermissions.permissionSelector,
        parentContributorsAdded: false,
        // Returns list of user ids associated with current node
        currentContributorIds: _ember['default'].computed('contributors', function () {
            var contribIds = [];
            this.get('contributors').forEach(function (contrib) {
                return contribIds.push(contrib.get('userId'));
            });
            return contribIds;
        }),
        // In Add mode, contributors are emailed on creation of preprint. In Edit mode,
        // contributors are emailed as soon as they are added to preprint.
        sendEmail: false,
        numParentContributors: _ember['default'].computed('parentNode', function () {
            if (this.get('parentNode')) {
                return this.get('parentNode').get('contributors').get('length');
            } else {
                return 0;
            }
        }),
        addState: 'emptyView', // There are 3 view states on left side of Authors panel. Default state just shows search bar.
        query: null,
        // Total contributor search results
        totalSearchResults: _ember['default'].computed('searchResults.[]', function () {
            var searchResults = this.get('searchResults');
            if (searchResults && searchResults.links) {
                return searchResults.meta.pagination.total;
            } else {
                return;
            }
        }),
        // Total pages of contributor search results
        pages: _ember['default'].computed('searchResults.[]', function () {
            var searchResults = this.get('searchResults');
            if (searchResults && searchResults.links) {
                return searchResults.meta.total;
            } else {
                return;
            }
        }),
        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);
            this.get('store').findRecord('node', _collectionsConfigEnvironment['default'].NODE_GUID).then(function (result) {
                return _this.set('node', result);
            });
        },
        elementsLoaded: _ember['default'].observer('isOpen', function () {
            if (this.get('isOpen')) {
                _ember['default'].run.once(this.get('applyPopovers').bind(this));
            }
        }),
        /**
         * findContributors method.  Queries APIv2 users endpoint on any of a set of name fields.  Fetches specified page of results.
         *
         * @method findContributors
         * @param {String} query ID of user that will be a contributor on the node
         * @param {Integer} page Page number of results requested
         * @return {User[]} Returns specified page of user records matching query
         */
        findContributors: function findContributors(query, page) {
            var _this2 = this;

            return this.get('store').query('user', {
                filter: {
                    'full_name,given_name,middle_names,family_name': query
                },
                page: page
            }).then(function (contributors) {
                _this2.set('searchResults', contributors);
                return contributors;
            })['catch'](function () {
                _this2.get('toast').error(_this2.get('i18n').t('submit.search_contributors_error'));
                _this2.highlightSuccessOrFailure('author-search-box', _this2, 'error');
            });
        },
        /**
        * highlightSuccessOrFailure method. Element with specified ID flashes green or red depending on response success.
        *
        * @method highlightSuccessOrFailure
        * @param {string} elementId Element ID to change color
        * @param {Object} context "this" scope
        * @param {string} status "success" or "error"
        */
        highlightSuccessOrFailure: function highlightSuccessOrFailure(elementId, context, status) {
            var highlightClass = (status === 'success' ? 'success' : 'error') + 'Highlight';
            context.$('#' + elementId).addClass(highlightClass);
            _ember['default'].run.later(function () {
                return context.$('#' + elementId).removeClass(highlightClass);
            }, 2000);
        },

        actions: {
            // Adds contributor then redraws view - addition of contributor may change which update/remove contributor requests are permitted
            addContributorLocal: function addContributorLocal(user) {
                var _this3 = this;

                this.get('actions.addContributor').call(this, user.id, 'write', true, false, undefined, undefined, true).then(function (res) {
                    _this3.toggleAuthorModification();
                    _this3.get('contributors').pushObject(res);
                    _this3.get('toast').success(_this3.get('i18n').t('submit.preprint_author_added'));
                    _this3.highlightSuccessOrFailure(res.id, _this3, 'success');
                }, function () {
                    _this3.get('toast').error(_this3.get('i18n').t('submit.error_adding_author'));
                    _this3.highlightSuccessOrFailure(user.id, _this3, 'error');
                    user.rollbackAttributes();
                });
            },
            // Adds all contributors from parent project to current component as long as they are not current contributors
            addContributorsFromParentProject: function addContributorsFromParentProject() {
                var _this4 = this;

                this.set('parentContributorsAdded', true);
                var contributorsToAdd = _ember['default'].A();
                this.get('parentContributors').toArray().forEach(function (contributor) {
                    if (_this4.get('currentContributorIds').indexOf(contributor.get('userId')) === -1) {
                        contributorsToAdd.push({
                            permission: contributor.get('permission'),
                            bibliographic: contributor.get('bibliographic'),
                            userId: contributor.get('userId')
                        });
                    }
                });
                this.get('actions.addContributors').call(this, contributorsToAdd, this.get('sendEmail')).then(function (contributors) {
                    contributors.map(function (contrib) {
                        _this4.get('contributors').pushObject(contrib);
                    });
                    _this4.toggleAuthorModification();
                })['catch'](function () {
                    _this4.get('toast').error('Some contributors may not have been added. Try adding manually.');
                });
            },
            // Adds unregistered contributor, then clears form and switches back to search view.
            // Should wait to transition until request has completed.
            addUnregisteredContributor: function addUnregisteredContributor(fullName, email) {
                var _this5 = this;

                if (fullName && email) {
                    var res = this.get('actions.addContributor').call(this, null, 'write', true, this.get('sendEmail'), fullName, email, true);
                    res.then(function (contributor) {
                        _this5.get('contributors').pushObject(contributor);
                        _this5.toggleAuthorModification();
                        _this5.set('addState', 'searchView');
                        _this5.set('fullName', '');
                        _this5.set('email', '');
                        _this5.get('toast').success(_this5.get('i18n').t('submit.preprint_unregistered_author_added'));
                        _this5.highlightSuccessOrFailure(contributor.id, _this5, 'success');
                    }, function (error) {
                        if (error.errors[0] && error.errors[0].detail && error.errors[0].detail.indexOf('is already a contributor') > -1) {
                            _this5.get('toast').error(error.errors[0].detail);
                        } else {
                            _this5.get('toast').error(_this5.get('i18n').t('submit.error_adding_unregistered_author'));
                        }
                        _this5.highlightSuccessOrFailure('add-unregistered-contributor-form', _this5, 'error');
                    });
                }
            },
            // Requests a particular page of user results
            findContributors: function findContributors(page) {
                var _this6 = this;

                var query = this.get('query');
                if (query) {
                    this.findContributors(query, page).then(function () {
                        return _this6.set('addState', 'searchView');
                    }, function () {
                        _this6.get('toast').error('Could not perform search query.');
                        _this6.highlightSuccessOrFailure('author-search-box', _this6, 'error');
                    });
                }
            },
            // Removes contributor then redraws contributor list view - removal of contributor may change
            // which additional update/remove requests are permitted.
            removeContributorLocal: function removeContributorLocal(contrib) {
                var _this7 = this;

                this.get('actions.removeContributor').call(this, contrib).then(function () {
                    _this7.toggleAuthorModification();
                    _this7.removedSelfAsAdmin(contrib, contrib.get('permission'));
                    _this7.get('contributors').removeObject(contrib);
                    _this7.get('toast').success(_this7.get('i18n').t('submit.preprint_author_removed'));
                }, function () {
                    _this7.get('toast').error(_this7.get('i18n').t('submit.error_adding_author'));
                    _this7.highlightSuccessOrFailure(contrib.id, _this7, 'error');
                    contrib.rollbackAttributes();
                });
            },
            // Updates contributor then redraws contributor list view - updating contributor
            // permissions may change which additional update/remove requests are permitted.
            updatePermissions: function updatePermissions(contributor, permission) {
                var _this8 = this;

                this.get('actions.updateContributor').call(this, contributor, permission, '').then(function () {
                    _this8.toggleAuthorModification();
                    _this8.highlightSuccessOrFailure(contributor.id, _this8, 'success');
                    _this8.removedSelfAsAdmin(contributor, permission);
                }, function () {
                    _this8.get('toast').error('Could not modify author permissions');
                    _this8.highlightSuccessOrFailure(contributor.id, _this8, 'error');
                    contributor.rollbackAttributes();
                });
            },
            // Updates contributor then redraws contributor list view - updating contributor
            // bibliographic info may change which additional update/remove requests are permitted.
            updateBibliographic: function updateBibliographic(contributor, isBibliographic) {
                var _this9 = this;

                this.get('actions.updateContributor').call(this, contributor, '', isBibliographic).then(function () {
                    _this9.toggleAuthorModification();
                    _this9.highlightSuccessOrFailure(contributor.id, _this9, 'success');
                }, function () {
                    _this9.get('toast').error('Could not modify citation');
                    _this9.highlightSuccessOrFailure(contributor.id, _this9, 'error');
                    contributor.rollbackAttributes();
                });
            },
            // There are 3 view states on left side of Authors panel.  This switches to add unregistered contrib view.
            unregisteredView: function unregisteredView() {
                this.set('addState', 'unregisteredView');
            },
            // There are 3 view states on left side of Authors panel.  This switches to searching contributor results view.
            searchView: function searchView() {
                this.set('addState', 'searchView');
                this.set('fullName', '');
                this.set('email', '');
            },
            // There are 3 view states on left side of Authors panel.  This switches to empty view and clears search results.
            resetfindContributorsView: function resetfindContributorsView() {
                this.set('addState', 'searchView');
            },
            // Reorders contributors in UI then sends server request to reorder contributors. If request fails, reverts
            // contributor list in UI back to original.
            reorderItems: function reorderItems(itemModels, draggedContrib) {
                var _this10 = this;

                var originalOrder = this.get('contributors');
                this.set('contributors', itemModels);
                var newIndex = itemModels.indexOf(draggedContrib);
                this.get('actions.reorderContributors').call(this, draggedContrib, newIndex, itemModels).then(function () {
                    _this10.highlightSuccessOrFailure(draggedContrib.id, _this10, 'success');
                }, function () {
                    _this10.highlightSuccessOrFailure(draggedContrib.id, _this10, 'error');
                    _this10.set('contributors', originalOrder);
                    _this10.get('toast').error('Could not reorder contributors');
                    draggedContrib.rollbackAttributes();
                });
            },
            // Action used by the pagination-pager component to the handle user-click event.
            pageChanged: function pageChanged(current) {
                var _this11 = this;

                var query = this.get('query');
                if (query) {
                    this.findContributors(query, current).then(function () {
                        _this11.set('addState', 'searchView');
                        _this11.set('currentPage', current);
                    })['catch'](function () {
                        _this11.get('toast').error('Could not perform search query.');
                        _this11.highlightSuccessOrFailure('author-search-box', _this11, 'error');
                    });
                }
            }
        },
        applyPopovers: function applyPopovers() {
            this.$('#permissions-popover').popover({
                container: 'body',
                content: '<dl>' + '<dt>Read</dt>' + '<dd><ul><li>View preprint</li></ul></dd>' + '<dt>Read + Write</dt>' + '<dd><ul><li>Read privileges</li> ' + '<li>Add and configure preprint</li> ' + '<li>Add and edit content</li></ul></dd>' + '<dt>Administrator</dt><dd><ul>' + '<li>Read and write privileges</li>' + '<li>Manage authors</li>' + '<li>Public-private settings</li></ul></dd>' + '</dl>'
            });
            this.$('#bibliographic-popover').popover({
                container: 'body',
                content: 'Only checked authors will be included in preprint citations. ' + 'Authors not in the citation can read and modify the preprint as normal.'
            });
            this.$('#author-popover').popover({
                container: 'body',
                content: 'Preprints must have at least one registered administrator and one author showing in the citation at all times.  ' + 'A registered administrator is a user who has both confirmed their account and has administrator privileges.'
            });
        },

        /* If user removes their own admin permissions, many things on the page must become
        disabled.  Changing the isAdmin flag to false will remove many of the options
        on the page. */
        removedSelfAsAdmin: function removedSelfAsAdmin(contributor, permission) {
            if (this.get('currentUser').id === contributor.get('userId') && permission !== 'ADMIN') {
                this.set('isAdmin', false);
            }
        },
        /* Toggling this property, authorModification, updates several items on the page - disabling elements, enabling
        others, depending on what requests are permitted */
        toggleAuthorModification: function toggleAuthorModification() {
            this.toggleProperty('authorModification');
        }
    });
});
define("collections/components/preprint-form-authors/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.8.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 29,
                          "column": 26
                        },
                        "end": {
                          "line": 31,
                          "column": 26
                        }
                      },
                      "moduleName": "collections/components/preprint-form-authors/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "small");
                      var el2 = dom.createTextNode(" ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode(" ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                      return morphs;
                    },
                    statements: [["inline", "t", ["components.preprint-form-authors.yourself"], [], ["loc", [null, [30, 49], [30, 98]]], 0, 0]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.8.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 34,
                          "column": 26
                        },
                        "end": {
                          "line": 40,
                          "column": 26
                        }
                      },
                      "moduleName": "collections/components/preprint-form-authors/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "hint hint--left pull-right");
                      var el2 = dom.createTextNode("\n                                ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("button");
                      dom.setAttribute(el2, "class", "btn btn-default btn-small disabled disabled-checkmark");
                      var el3 = dom.createTextNode("\n                                    ");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createElement("i");
                      dom.setAttribute(el3, "class", "fa fa-check");
                      dom.setAttribute(el3, "aria-hidden", "true");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createTextNode("\n                                ");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                            ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element12 = dom.childAt(fragment, [1]);
                      var morphs = new Array(1);
                      morphs[0] = dom.createAttrMorph(element12, 'aria-label');
                      return morphs;
                    },
                    statements: [["attribute", "aria-label", ["concat", [["subexpr", "t", ["components.preprint-form-authors.already_added"], [], ["loc", [null, [35, 81], [35, 135]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
                    locals: [],
                    templates: []
                  };
                })();
                var child2 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.8.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 40,
                          "column": 26
                        },
                        "end": {
                          "line": 42,
                          "column": 26
                        }
                      },
                      "moduleName": "collections/components/preprint-form-authors/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("button");
                      dom.setAttribute(el1, "class", "btn btn-success btn-small pull-right");
                      var el2 = dom.createTextNode(" ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode(" ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element11 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createElementMorph(element11);
                      morphs[1] = dom.createMorphAt(element11, 1, 1);
                      return morphs;
                    },
                    statements: [["element", "action", ["addContributorLocal", ["get", "result", ["loc", [null, [41, 112], [41, 118]]], 0, 0, 0, 0]], [], ["loc", [null, [41, 81], [41, 120]]], 0, 0], ["inline", "t", ["global.add"], [], ["loc", [null, [41, 122], [41, 140]]], 0, 0]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 24,
                        "column": 20
                      },
                      "end": {
                        "line": 45,
                        "column": 20
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                      ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    dom.setAttribute(el2, "class", "p-v-xs");
                    var el3 = dom.createTextNode("\n                          ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createElement("img");
                    dom.setAttribute(el3, "class", "m-l-xs");
                    dom.setAttribute(el3, "height", "30");
                    dom.setAttribute(el3, "width", "30");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("\n                          ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createElement("a");
                    dom.setAttribute(el3, "target", "_blank");
                    var el4 = dom.createTextNode(" ");
                    dom.appendChild(el3, el4);
                    var el4 = dom.createComment("");
                    dom.appendChild(el3, el4);
                    var el4 = dom.createTextNode(" ");
                    dom.appendChild(el3, el4);
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("\n");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("                        ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    dom.setAttribute(el2, "class", "p-v-xs");
                    var el3 = dom.createTextNode("\n");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("                        ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                      ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element13 = dom.childAt(fragment, [1]);
                    var element14 = dom.childAt(element13, [1]);
                    var element15 = dom.childAt(element14, [1]);
                    var element16 = dom.childAt(element14, [3]);
                    var morphs = new Array(6);
                    morphs[0] = dom.createAttrMorph(element13, 'id');
                    morphs[1] = dom.createAttrMorph(element15, 'src');
                    morphs[2] = dom.createAttrMorph(element16, 'href');
                    morphs[3] = dom.createMorphAt(element16, 1, 1);
                    morphs[4] = dom.createMorphAt(element14, 5, 5);
                    morphs[5] = dom.createMorphAt(dom.childAt(element13, [3]), 1, 1);
                    return morphs;
                  },
                  statements: [["attribute", "id", ["get", "result.id", ["loc", [null, [25, 31], [25, 40]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "src", ["get", "result.links.profile_image", ["loc", [null, [27, 52], [27, 78]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["get", "result.links.html", ["loc", [null, [28, 36], [28, 53]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "result.fullName", ["loc", [null, [28, 73], [28, 92]]], 0, 0, 0, 0], ["block", "if", [["subexpr", "eq", [["get", "currentUser", ["loc", [null, [29, 36], [29, 47]]], 0, 0, 0, 0], ["get", "result", ["loc", [null, [29, 48], [29, 54]]], 0, 0, 0, 0]], [], ["loc", [null, [29, 32], [29, 55]]], 0, 0]], [], 0, null, ["loc", [null, [29, 26], [31, 33]]]], ["block", "if", [["subexpr", "user-is-contributor", [["get", "result", ["loc", [null, [34, 53], [34, 59]]], 0, 0, 0, 0], ["get", "contributors", ["loc", [null, [34, 60], [34, 72]]], 0, 0, 0, 0], ["get", "authorModification", ["loc", [null, [34, 73], [34, 91]]], 0, 0, 0, 0]], [], ["loc", [null, [34, 32], [34, 92]]], 0, 0]], [], 1, 2, ["loc", [null, [34, 26], [42, 33]]]]],
                  locals: ["result"],
                  templates: [child0, child1, child2]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 16
                    },
                    "end": {
                      "line": 47,
                      "column": 16
                    }
                  },
                  "moduleName": "collections/components/preprint-form-authors/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("table");
                  dom.setAttribute(el1, "class", "table author-table");
                  var el2 = dom.createTextNode("\n");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("                  ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["block", "each", [["get", "searchResults", ["loc", [null, [24, 28], [24, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [24, 20], [45, 29]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 47,
                      "column": 16
                    },
                    "end": {
                      "line": 49,
                      "column": 16
                    }
                  },
                  "moduleName": "collections/components/preprint-form-authors/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["global.no_results_found"], [], ["loc", [null, [48, 18], [48, 49]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 50,
                      "column": 16
                    },
                    "end": {
                      "line": 54,
                      "column": 16
                    }
                  },
                  "moduleName": "collections/components/preprint-form-authors/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "pull-right text-right");
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["inline", "pagination-pager", [], ["count", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [52, 45], [52, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "current", ["subexpr", "@mut", [["get", "currentPage", ["loc", [null, [52, 59], [52, 70]]], 0, 0, 0, 0]], [], [], 0, 0], "change", ["subexpr", "action", ["pageChanged"], [], ["loc", [null, [52, 78], [52, 100]]], 0, 0]], ["loc", [null, [52, 20], [52, 102]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 14
                  },
                  "end": {
                    "line": 55,
                    "column": 14
                  }
                },
                "moduleName": "collections/components/preprint-form-authors/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment(" <div class=\"unregisteredUsers\">\n                  <p>{{t \"components.preprint-form-authors.unregistered_users.paragraph\"}}</p>\n                  <button class=\"btn btn-primary btn-small\" {{action \"unregisteredView\"}}>{{t \"components.preprint-form-authors.unregistered_users.button\"}}</button>\n                </div> ");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("h3");
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
                morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["components.preprint-form-authors.results"], [], ["loc", [null, [21, 21], [21, 69]]], 0, 0], ["block", "if", [["get", "searchResults", ["loc", [null, [22, 22], [22, 35]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [22, 16], [49, 23]]]], ["block", "if", [["subexpr", "gt", [["get", "pages", ["loc", [null, [50, 26], [50, 31]]], 0, 0, 0, 0], 1], [], ["loc", [null, [50, 22], [50, 34]]], 0, 0]], [], 2, null, ["loc", [null, [50, 16], [54, 23]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 14
                  },
                  "end": {
                    "line": 61,
                    "column": 14
                  }
                },
                "moduleName": "collections/components/preprint-form-authors/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("h3");
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "user-validation");
                dom.setAttribute(el1, "id", "add-unregistered-contributor-form");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
                return morphs;
              },
              statements: [["inline", "t", ["components.preprint-form-authors.add_email"], [], ["loc", [null, [57, 21], [57, 71]]], 0, 0], ["inline", "unregistered-contributor-form", [], ["editMode", ["subexpr", "@mut", [["get", "editMode", ["loc", [null, [59, 59], [59, 67]]], 0, 0, 0, 0]], [], [], 0, 0], "resetfindContributorsView", ["subexpr", "action", ["resetfindContributorsView"], [], ["loc", [null, [59, 94], [59, 130]]], 0, 0], "addUnregisteredContributor", ["subexpr", "action", ["addUnregisteredContributor"], [], ["loc", [null, [59, 158], [59, 195]]], 0, 0]], ["loc", [null, [59, 18], [59, 197]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 12
                },
                "end": {
                  "line": 62,
                  "column": 12
                }
              },
              "moduleName": "collections/components/preprint-form-authors/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "addState", ["loc", [null, [16, 24], [16, 32]]], 0, 0, 0, 0], "searchView"], [], ["loc", [null, [16, 20], [16, 46]]], 0, 0]], [], 0, null, ["loc", [null, [16, 14], [55, 21]]]], ["block", "if", [["subexpr", "eq", [["get", "addState", ["loc", [null, [56, 24], [56, 32]]], 0, 0, 0, 0], "unregisteredView"], [], ["loc", [null, [56, 20], [56, 52]]], 0, 0]], [], 1, null, ["loc", [null, [56, 14], [61, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 77,
                  "column": 14
                },
                "end": {
                  "line": 79,
                  "column": 14
                }
              },
              "moduleName": "collections/components/preprint-form-authors/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-default pull-right");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-plus icon-large small");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("em");
              dom.setAttribute(el2, "class", "small");
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element10 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element10);
              morphs[1] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["addContributorsFromParentProject"], [], ["loc", [null, [78, 59], [78, 104]]], 0, 0], ["inline", "t", ["components.preprint-form-authors.authors.parent_contributors"], [], ["loc", [null, [78, 169], [78, 237]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 125,
                        "column": 28
                      },
                      "end": {
                        "line": 127,
                        "column": 28
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["content", "contrib.unregisteredContributor", ["loc", [null, [126, 30], [126, 65]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 127,
                        "column": 28
                      },
                      "end": {
                        "line": 129,
                        "column": 28
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "target", "_blank");
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element5 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element5, 'href');
                    morphs[1] = dom.createMorphAt(element5, 1, 1);
                    return morphs;
                  },
                  statements: [["attribute", "href", ["get", "contrib.users.links.html", ["loc", [null, [128, 40], [128, 64]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "contrib.users.fullName", ["loc", [null, [128, 84], [128, 110]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 142,
                        "column": 26
                      },
                      "end": {
                        "line": 144,
                        "column": 26
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["content", "contrib.unregisteredContributor", ["loc", [null, [143, 28], [143, 63]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child3 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 144,
                        "column": 26
                      },
                      "end": {
                        "line": 146,
                        "column": 26
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "target", "_blank");
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element4 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element4, 'href');
                    morphs[1] = dom.createMorphAt(element4, 1, 1);
                    return morphs;
                  },
                  statements: [["attribute", "href", ["get", "contrib.users.links.html", ["loc", [null, [145, 38], [145, 62]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "contrib.users.fullName", ["loc", [null, [145, 82], [145, 108]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child4 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.8.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 154,
                          "column": 30
                        },
                        "end": {
                          "line": 158,
                          "column": 30
                        }
                      },
                      "moduleName": "collections/components/preprint-form-authors/template.hbs"
                    },
                    isEmpty: false,
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("option");
                      var el2 = dom.createTextNode("\n                                  ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                                ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element2 = dom.childAt(fragment, [1]);
                      var morphs = new Array(3);
                      morphs[0] = dom.createAttrMorph(element2, 'selected');
                      morphs[1] = dom.createAttrMorph(element2, 'value');
                      morphs[2] = dom.createMorphAt(element2, 1, 1);
                      return morphs;
                    },
                    statements: [["attribute", "selected", ["subexpr", "eq", [["get", "contrib.permission", ["loc", [null, [155, 54], [155, 72]]], 0, 0, 0, 0], ["get", "option.value", ["loc", [null, [155, 73], [155, 85]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [155, 87]]], 0, 0], 0, 0, 0, 0], ["attribute", "value", ["get", "option.value", ["loc", [null, [155, 96], [155, 108]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "option.text", ["loc", [null, [156, 34], [156, 49]]], 0, 0, 0, 0]],
                    locals: ["option"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 151,
                        "column": 26
                      },
                      "end": {
                        "line": 160,
                        "column": 26
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "visible-xs-inline permission-label");
                    var el2 = dom.createElement("em");
                    var el3 = dom.createTextNode(" ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode(": ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("select");
                    dom.setAttribute(el1, "class", "text-smaller form-control permission-select");
                    var el2 = dom.createTextNode("\n");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("                            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [3]);
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 1, 1);
                    morphs[1] = dom.createAttrMorph(element3, 'onchange');
                    morphs[2] = dom.createMorphAt(element3, 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["components.preprint-form-authors.authors.permissions"], [], ["loc", [null, [152, 82], [152, 142]]], 0, 0], ["attribute", "onchange", ["subexpr", "action", [["subexpr", "action", ["updatePermissions", ["get", "contrib", ["loc", [null, [153, 134], [153, 141]]], 0, 0, 0, 0]], [], ["loc", [null, [153, 106], [153, 142]]], 0, 0]], ["value", "target.value"], ["loc", [null, [null, null], [153, 165]]], 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "permissionOptions", ["loc", [null, [154, 38], [154, 55]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [154, 30], [158, 39]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child5 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 160,
                        "column": 26
                      },
                      "end": {
                        "line": 164,
                        "column": 26
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "vert-align-disabled-permissions");
                    var el2 = dom.createTextNode("\n                              ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "visible-xs-inline permission-label");
                    var el3 = dom.createTextNode(" ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createElement("em");
                    var el4 = dom.createTextNode(" ");
                    dom.appendChild(el3, el4);
                    var el4 = dom.createComment("");
                    dom.appendChild(el3, el4);
                    var el4 = dom.createTextNode(":  ");
                    dom.appendChild(el3, el4);
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "text-smaller");
                    var el3 = dom.createTextNode(" ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode(" ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element1 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 1, 1);
                    morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["components.preprint-form-authors.authors.permissions"], [], ["loc", [null, [162, 85], [162, 145]]], 0, 0], ["inline", "permission-map", [["get", "contrib.permission", ["loc", [null, [162, 206], [162, 224]]], 0, 0, 0, 0]], [], ["loc", [null, [162, 189], [162, 226]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child6 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 175,
                        "column": 26
                      },
                      "end": {
                        "line": 177,
                        "column": 26
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-danger btn-sm");
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element0);
                    morphs[1] = dom.createMorphAt(element0, 1, 1);
                    return morphs;
                  },
                  statements: [["element", "action", ["removeContributorLocal", ["get", "contrib", ["loc", [null, [176, 70], [176, 77]]], 0, 0, 0, 0]], [], ["loc", [null, [176, 36], [176, 79]]], 0, 0], ["inline", "t", ["components.preprint-form-authors.remove"], [], ["loc", [null, [176, 112], [176, 159]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child7 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 177,
                        "column": 26
                      },
                      "end": {
                        "line": 179,
                        "column": 26
                      }
                    },
                    "moduleName": "collections/components/preprint-form-authors/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-danger btn-sm disabled");
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["components.preprint-form-authors.remove"], [], ["loc", [null, [178, 76], [178, 123]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 119,
                      "column": 20
                    },
                    "end": {
                      "line": 182,
                      "column": 20
                    }
                  },
                  "moduleName": "collections/components/preprint-form-authors/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("td");
                  dom.setAttribute(el1, "class", "text-nowrap author-cols");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "form-group drag-drop-contrib");
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "fa fa-bars sortable-bars handle small");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("img");
                  dom.setAttribute(el3, "class", "m-l-xs");
                  dom.setAttribute(el3, "height", "30");
                  dom.setAttribute(el3, "width", "30");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "visible-xs-inline");
                  var el4 = dom.createTextNode(" ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("                            ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("span");
                  dom.setAttribute(el4, "class", "pull-right remove-contributor-padding-xs");
                  var el5 = dom.createTextNode("\n                              ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment(" {{#if (and (permissionToRemoveContributor contrib currentUser isAdmin node) (conditionsForContribRemoval contrib contributors authorModification))}}\n                                <button class=\"remove-contributor-xs\" {{action 'removeContributor' contrib}} aria-label={{t \"components.preprint-form-authors.authors.remove_author\"}}>\n                                                            <i class=\"fa fa-times\"> </i>\n                                                        </button>\n                              {{/if}} ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                            ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                                            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("td");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "vert-align-contributor-name hidden-xs");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("td");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "form-group vert-align-enabled-permissions");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("td");
                  dom.setAttribute(el1, "class", "bib-padding");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "form-group vert-align");
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "visible-xs-inline checkbox-padding");
                  var el4 = dom.createElement("em");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode(":");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("input");
                  dom.setAttribute(el3, "type", "checkbox");
                  dom.setAttribute(el3, "name", "bibliographic");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("td");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "delete-contrib-button form-group vert-align nudge-right hidden-xs");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element6 = dom.childAt(fragment, [1, 1]);
                  var element7 = dom.childAt(element6, [3]);
                  var element8 = dom.childAt(fragment, [7, 1]);
                  var element9 = dom.childAt(element8, [3]);
                  if (this.cachedFragment) {
                    dom.repairClonedNode(element9, [], true);
                  }
                  var morphs = new Array(9);
                  morphs[0] = dom.createAttrMorph(element7, 'src');
                  morphs[1] = dom.createMorphAt(dom.childAt(element6, [5]), 2, 2);
                  morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3, 1]), 1, 1);
                  morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5, 1]), 1, 1);
                  morphs[4] = dom.createMorphAt(dom.childAt(element8, [1, 0]), 0, 0);
                  morphs[5] = dom.createAttrMorph(element9, 'disabled');
                  morphs[6] = dom.createAttrMorph(element9, 'onchange');
                  morphs[7] = dom.createAttrMorph(element9, 'checked');
                  morphs[8] = dom.createMorphAt(dom.childAt(fragment, [9, 1]), 1, 1);
                  return morphs;
                },
                statements: [["attribute", "src", ["get", "contrib.users.profileImage", ["loc", [null, [123, 52], [123, 78]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "contrib.unregisteredContributor", ["loc", [null, [125, 34], [125, 65]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [125, 28], [129, 35]]]], ["block", "if", [["get", "contrib.unregisteredContributor", ["loc", [null, [142, 32], [142, 63]]], 0, 0, 0, 0]], [], 2, 3, ["loc", [null, [142, 26], [146, 33]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["subexpr", "contributor-is-current-user", [["get", "contrib", ["loc", [null, [151, 71], [151, 78]]], 0, 0, 0, 0], ["get", "currentUser", ["loc", [null, [151, 79], [151, 90]]], 0, 0, 0, 0]], [], ["loc", [null, [151, 42], [151, 91]]], 0, 0]], [], ["loc", [null, [151, 37], [151, 92]]], 0, 0], ["get", "isAdmin", ["loc", [null, [151, 93], [151, 100]]], 0, 0, 0, 0], ["subexpr", "and", [["get", "canEdit", ["loc", [null, [151, 106], [151, 113]]], 0, 0, 0, 0], ["subexpr", "min-admins", [["get", "contrib", ["loc", [null, [151, 126], [151, 133]]], 0, 0, 0, 0], ["get", "contributors", ["loc", [null, [151, 134], [151, 146]]], 0, 0, 0, 0], ["get", "authorModification", ["loc", [null, [151, 147], [151, 165]]], 0, 0, 0, 0]], [], ["loc", [null, [151, 114], [151, 166]]], 0, 0]], [], ["loc", [null, [151, 101], [151, 167]]], 0, 0]], [], ["loc", [null, [151, 32], [151, 168]]], 0, 0]], [], 4, 5, ["loc", [null, [151, 26], [164, 33]]]], ["inline", "t", ["components.preprint-form-authors.authors.in_citation"], [], ["loc", [null, [169, 79], [169, 139]]], 0, 0], ["attribute", "disabled", ["subexpr", "if", [["subexpr", "and", [["get", "isAdmin", ["loc", [null, [170, 52], [170, 59]]], 0, 0, 0, 0], ["subexpr", "and", [["get", "canEdit", ["loc", [null, [170, 65], [170, 72]]], 0, 0, 0, 0], ["subexpr", "min-bibliographic", [["get", "contrib", ["loc", [null, [170, 92], [170, 99]]], 0, 0, 0, 0], ["get", "contributors", ["loc", [null, [170, 100], [170, 112]]], 0, 0, 0, 0], ["get", "authorModification", ["loc", [null, [170, 113], [170, 131]]], 0, 0, 0, 0]], [], ["loc", [null, [170, 73], [170, 132]]], 0, 0]], [], ["loc", [null, [170, 60], [170, 133]]], 0, 0]], [], ["loc", [null, [170, 47], [170, 134]]], 0, 0], false, true], [], ["loc", [null, [null, null], [170, 147]]], 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", [["subexpr", "action", ["updateBibliographic", ["get", "contrib", ["loc", [null, [170, 196], [170, 203]]], 0, 0, 0, 0]], [], ["loc", [null, [170, 166], [170, 204]]], 0, 0]], ["value", "target.checked"], ["loc", [null, [null, null], [170, 229]]], 0, 0], 0, 0, 0, 0], ["attribute", "checked", ["subexpr", "eq", [["get", "contrib.bibliographic", ["loc", [null, [170, 243], [170, 264]]], 0, 0, 0, 0], true], [], ["loc", [null, [null, null], [170, 271]]], 0, 0], 0, 0, 0, 0], ["block", "if", [["subexpr", "and", [["subexpr", "permission-to-remove-contributor", [["get", "contrib", ["loc", [null, [175, 71], [175, 78]]], 0, 0, 0, 0], ["get", "currentUser", ["loc", [null, [175, 79], [175, 90]]], 0, 0, 0, 0], ["get", "isAdmin", ["loc", [null, [175, 91], [175, 98]]], 0, 0, 0, 0], ["get", "node", ["loc", [null, [175, 99], [175, 103]]], 0, 0, 0, 0]], [], ["loc", [null, [175, 37], [175, 104]]], 0, 0], ["subexpr", "conditions-for-contrib-removal", [["get", "contrib", ["loc", [null, [175, 137], [175, 144]]], 0, 0, 0, 0], ["get", "contributors", ["loc", [null, [175, 145], [175, 157]]], 0, 0, 0, 0], ["get", "authorModification", ["loc", [null, [175, 158], [175, 176]]], 0, 0, 0, 0]], [], ["loc", [null, [175, 105], [175, 177]]], 0, 0]], [], ["loc", [null, [175, 32], [175, 178]]], 0, 0]], [], 6, 7, ["loc", [null, [175, 26], [179, 33]]]]],
                locals: [],
                templates: [child0, child1, child2, child3, child4, child5, child6, child7]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 118,
                    "column": 18
                  },
                  "end": {
                    "line": 183,
                    "column": 18
                  }
                },
                "moduleName": "collections/components/preprint-form-authors/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "sortable-item", [], ["tagName", "tr", "model", ["subexpr", "@mut", [["get", "contrib", ["loc", [null, [119, 56], [119, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "contributor-row", "group", ["subexpr", "@mut", [["get", "group", ["loc", [null, [119, 94], [119, 99]]], 0, 0, 0, 0]], [], [], 0, 0], "spacing", 1, "handle", ".handle", "id", ["subexpr", "@mut", [["get", "contrib.id", ["loc", [null, [119, 130], [119, 140]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [119, 20], [182, 38]]]]],
              locals: ["contrib"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 117,
                  "column": 16
                },
                "end": {
                  "line": 184,
                  "column": 16
                }
              },
              "moduleName": "collections/components/preprint-form-authors/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "contributors", ["loc", [null, [118, 26], [118, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [118, 18], [183, 27]]]]],
            locals: ["group"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 189,
                "column": 4
              }
            },
            "moduleName": "collections/components/preprint-form-authors/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row form");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12 col-md-5 col-division-right");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "input-group author-search-box");
            var el5 = dom.createTextNode("\n                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("input");
            dom.setAttribute(el5, "id", "author-search-box");
            dom.setAttribute(el5, "type", "text");
            dom.setAttribute(el5, "class", "form-control searchQuery");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "input-group-btn");
            var el6 = dom.createTextNode("\n                            ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("button");
            dom.setAttribute(el6, "class", "btn btn-default authors-search-button");
            dom.setAttribute(el6, "type", "button");
            var el7 = dom.createTextNode("\n                                ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("i");
            dom.setAttribute(el7, "class", "fa fa-search");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                            ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                        ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n              ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12 col-md-7");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "author-header");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("h2");
            dom.setAttribute(el4, "class", "header-inline");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("\n                        ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("i");
            dom.setAttribute(el5, "class", "fa fa-question-circle permission-info");
            dom.setAttribute(el5, "data-toggle", "popover");
            dom.setAttribute(el5, "data-trigger", "hover");
            dom.setAttribute(el5, "data-html", "true");
            dom.setAttribute(el5, "data-placement", "bottom");
            dom.setAttribute(el5, "id", "author-popover");
            var el6 = dom.createTextNode("\n                        ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            dom.setAttribute(el3, "class", "drag-drop small");
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "panel-body");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("table");
            dom.setAttribute(el4, "class", "table author-table current-authors");
            var el5 = dom.createTextNode("\n                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("tr");
            var el6 = dom.createTextNode("\n                  ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            var el7 = dom.createTextNode(" ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                  ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            dom.setAttribute(el6, "class", "contrib-column-header");
            var el7 = dom.createTextNode(" ");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode(" ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                  ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            dom.setAttribute(el6, "class", "contrib-column-header");
            var el7 = dom.createTextNode("\n                    ");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                    ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("span");
            var el8 = dom.createTextNode("\n                          ");
            dom.appendChild(el7, el8);
            var el8 = dom.createElement("i");
            dom.setAttribute(el8, "class", "fa fa-question-circle permission-info");
            dom.setAttribute(el8, "data-toggle", "popover");
            dom.setAttribute(el8, "data-trigger", "hover");
            dom.setAttribute(el8, "data-html", "true");
            dom.setAttribute(el8, "data-placement", "bottom");
            dom.setAttribute(el8, "id", "permissions-popover");
            var el9 = dom.createTextNode("\n                          ");
            dom.appendChild(el8, el9);
            dom.appendChild(el7, el8);
            var el8 = dom.createTextNode("\n                      ");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                    ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("br");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                  ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                  ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            dom.setAttribute(el6, "class", "bib-padding");
            var el7 = dom.createTextNode("\n                    ");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                    ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("span");
            var el8 = dom.createTextNode("\n                                    ");
            dom.appendChild(el7, el8);
            var el8 = dom.createElement("i");
            dom.setAttribute(el8, "class", "fa fa-question-circle permission-info");
            dom.setAttribute(el8, "data-toggle", "popover");
            dom.setAttribute(el8, "data-trigger", "hover");
            dom.setAttribute(el8, "data-html", "true");
            dom.setAttribute(el8, "data-placement", "bottom");
            dom.setAttribute(el8, "id", "bibliographic-popover");
            var el9 = dom.createTextNode("\n                                    ");
            dom.appendChild(el8, el9);
            dom.appendChild(el7, el8);
            var el8 = dom.createTextNode("\n                                ");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                    ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("br");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                  ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                  ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            var el7 = dom.createTextNode(" ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("              ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element17 = dom.childAt(fragment, [1]);
            var element18 = dom.childAt(element17, [1]);
            var element19 = dom.childAt(element18, [1]);
            var element20 = dom.childAt(element19, [1]);
            var element21 = dom.childAt(element20, [1]);
            var element22 = dom.childAt(element20, [3, 1]);
            var element23 = dom.childAt(element17, [3]);
            var element24 = dom.childAt(element23, [1]);
            var element25 = dom.childAt(element24, [3, 1]);
            var element26 = dom.childAt(element23, [5, 1]);
            var element27 = dom.childAt(element26, [1]);
            var element28 = dom.childAt(element27, [5]);
            var element29 = dom.childAt(element28, [3, 1]);
            var element30 = dom.childAt(element27, [7]);
            var element31 = dom.childAt(element30, [3, 1]);
            var morphs = new Array(15);
            morphs[0] = dom.createElementMorph(element19);
            morphs[1] = dom.createAttrMorph(element21, 'onchange');
            morphs[2] = dom.createAttrMorph(element21, 'placeholder');
            morphs[3] = dom.createElementMorph(element22);
            morphs[4] = dom.createMorphAt(element18, 3, 3);
            morphs[5] = dom.createMorphAt(dom.childAt(element24, [1]), 1, 1);
            morphs[6] = dom.createAttrMorph(element25, 'data-title');
            morphs[7] = dom.createMorphAt(element24, 5, 5);
            morphs[8] = dom.createMorphAt(dom.childAt(element23, [3]), 1, 1);
            morphs[9] = dom.createMorphAt(dom.childAt(element27, [3]), 1, 1);
            morphs[10] = dom.createMorphAt(element28, 1, 1);
            morphs[11] = dom.createAttrMorph(element29, 'data-title');
            morphs[12] = dom.createMorphAt(element30, 1, 1);
            morphs[13] = dom.createAttrMorph(element31, 'data-title');
            morphs[14] = dom.createMorphAt(element26, 3, 3);
            return morphs;
          },
          statements: [["element", "action", ["findContributors", 1], ["on", "submit"], ["loc", [null, [5, 18], [5, 61]]], 0, 0], ["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["get", "query", ["loc", [null, [7, 114], [7, 119]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 109], [7, 120]]], 0, 0]], ["value", "target.value"], ["loc", [null, [null, null], [7, 143]]], 0, 0], 0, 0, 0, 0], ["attribute", "placeholder", ["subexpr", "t", ["components.preprint-form-authors.search.placeholder"], [], ["loc", [null, [null, null], [7, 215]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["findContributors", 1], [], ["loc", [null, [9, 96], [9, 127]]], 0, 0], ["block", "if", [["subexpr", "not-eq", [["get", "addState", ["loc", [null, [15, 26], [15, 34]]], 0, 0, 0, 0], "emptyView"], [], ["loc", [null, [15, 18], [15, 47]]], 0, 0]], [], 0, null, ["loc", [null, [15, 12], [62, 19]]]], ["inline", "t", ["global.authors"], [], ["loc", [null, [66, 41], [66, 63]]], 0, 0], ["attribute", "data-title", ["concat", [["subexpr", "t", ["components.preprint-form-authors.authors.title"], [], ["loc", [null, [70, 39], [70, 93]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["subexpr", "and", [["subexpr", "gt", [["get", "numParentContributors", ["loc", [null, [77, 29], [77, 50]]], 0, 0, 0, 0], 1], [], ["loc", [null, [77, 25], [77, 53]]], 0, 0], ["subexpr", "not", [["get", "parentContributorsAdded", ["loc", [null, [77, 59], [77, 82]]], 0, 0, 0, 0]], [], ["loc", [null, [77, 54], [77, 83]]], 0, 0]], [], ["loc", [null, [77, 20], [77, 84]]], 0, 0]], [], 1, null, ["loc", [null, [77, 14], [79, 21]]]], ["inline", "t", ["components.preprint-form-authors.authors.order_instructions"], [], ["loc", [null, [81, 40], [81, 107]]], 0, 0], ["inline", "t", ["components.preprint-form-authors.authors.name"], [], ["loc", [null, [86, 53], [86, 106]]], 0, 0], ["inline", "t", ["components.preprint-form-authors.authors.permissions"], [], ["loc", [null, [88, 20], [88, 80]]], 0, 0], ["attribute", "data-title", ["concat", [["subexpr", "t", ["components.preprint-form-authors.authors.permission_info"], [], ["loc", [null, [92, 41], [92, 105]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "t", ["components.preprint-form-authors.authors.citation"], [], ["loc", [null, [102, 20], [102, 77]]], 0, 0], ["attribute", "data-title", ["concat", [["subexpr", "t", ["components.preprint-form-authors.authors.citation_info"], [], ["loc", [null, [106, 51], [106, 113]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "sortable-group", [], ["tagName", "tbody", "onChange", "reorderItems"], 2, null, ["loc", [null, [117, 16], [184, 35]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 190,
              "column": 0
            }
          },
          "moduleName": "collections/components/preprint-form-authors/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isOpen", ["loc", [null, [2, 10], [2, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [189, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 197,
                  "column": 24
                },
                "end": {
                  "line": 199,
                  "column": 24
                }
              },
              "moduleName": "collections/components/preprint-form-authors/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "c.users.fullName", ["loc", [null, [198, 32], [198, 52]]], 0, 0, 0, 0]],
            locals: ["c"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 195,
                "column": 16
              },
              "end": {
                "line": 201,
                "column": 16
              }
            },
            "moduleName": "collections/components/preprint-form-authors/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "comma-list");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "contributors", ["loc", [null, [197, 32], [197, 44]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [197, 24], [199, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 192,
              "column": 0
            },
            "end": {
              "line": 205,
              "column": 0
            }
          },
          "moduleName": "collections/components/preprint-form-authors/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-12");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "contributors", ["loc", [null, [195, 22], [195, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [195, 16], [201, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 206,
            "column": 0
          }
        },
        "moduleName": "collections/components/preprint-form-authors/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "preprint-form-body", [], [], 0, null, ["loc", [null, [1, 0], [190, 23]]]], ["block", "if", [["subexpr", "not", [["get", "isOpen", ["loc", [null, [192, 11], [192, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [192, 6], [192, 18]]], 0, 0]], [], 1, null, ["loc", [null, [192, 0], [205, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/preprint-form-body/component', ['exports', 'ember-collapsible-panel/components/cp-panel-body'], function (exports, _emberCollapsiblePanelComponentsCpPanelBody) {
    /**
     * @module ember-preprints
     * @submodule components
     */

    /**
     * Extends Ember Collapsible Panel's CpPanelBodyComponent.
     *
     * Sample usage:
     * ```handlebars
     * {{#preprint-form-body}}
     *    Insert collapsible panel contents here
     * {{/preprint-form-body}}
     * ```
     * @class preprint-form-body
     */
    exports['default'] = _emberCollapsiblePanelComponentsCpPanelBody['default'].extend({
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            if (this.$('textarea').length) {
                // Make textarea fill vertical height
                this.$().height('auto');
                this.$('textarea').outerHeight(this.$().height() - this.$('span').height() - this.$('.col-xs-12').height());
                this.$().height('');
            }
        }
    });
});
define("collections/components/preprint-form-body/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "collections/components/preprint-form-body/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('collections/components/preprint-form-header/component', ['exports', 'ember', 'ember-collapsible-panel/components/cp-panel-toggle'], function (exports, _ember, _emberCollapsiblePanelComponentsCpPanelToggle) {
    /**
     * @module ember-preprints
     * @submodule components
     */

    /**
     * Extends Ember Collapsible Panel's CpPanelToggleComponent.  Customizes the collapsible panel header.
     *
     * Sample usage:
     * ```handlebars
     * {{preprint-form-header}}
     *    name=(if nodeLocked 'preprint_file' 'choose_file')
     *    selectedFile=osfFile
     *    fileVersion=fileVersion
     *    file=file
     *    showValidationIndicator=false
     * }}
     * ```
     * @class preprint-form-header
     **/
    exports['default'] = _emberCollapsiblePanelComponentsCpPanelToggle['default'].extend({
        tagName: 'header',
        // Variables to pass in
        enabled: true,
        showValidationIndicator: true,
        valid: null,
        isValidationActive: false,
        displayName: _ember['default'].computed('name', function () {
            return this.get('name').capitalize();
        }),

        // Calculated properties
        invalid: _ember['default'].computed('valid', 'isValidationActive', function () {
            // If the user hasn't even opened the panel yet, don't run the validation check
            // In other words, not true or null
            if (this.get('isValidationActive')) {
                return !this.get('valid');
            } else {
                return false;
            }
        }),
        // CSS controls icon color and display. If neither valid nor invalid state applies, don't show icon.
        classNameBindings: ['enabled::disabled', 'valid:valid', 'invalid:invalid', 'isValidationActive::not-validated']
    });
});
define("collections/components/preprint-form-header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "collections/components/preprint-form-header/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "fa-icon", ["fa-floppy-o"], [], ["loc", [null, [19, 8], [19, 33]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 8
              }
            },
            "moduleName": "collections/components/preprint-form-header/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "text-smaller m-t-md");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", ["components.preprint-form-header.click_edit"], [], ["loc", [null, [26, 43], [26, 93]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "collections/components/preprint-form-header/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "m-t-md preprint-header-preview");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "and", [["subexpr", "is-section-editable", [["get", "name", ["loc", [null, [25, 40], [25, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 19], [25, 45]]], 0, 0], ["subexpr", "or", [["get", "editMode", ["loc", [null, [25, 50], [25, 58]]], 0, 0, 0, 0], ["subexpr", "or", [["subexpr", "not", [["get", "showValidationIndicator", ["loc", [null, [25, 68], [25, 91]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 63], [25, 92]]], 0, 0], ["get", "isValidationActive", ["loc", [null, [25, 93], [25, 111]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 59], [25, 112]]], 0, 0]], [], ["loc", [null, [25, 46], [25, 113]]], 0, 0]], [], ["loc", [null, [25, 14], [25, 114]]], 0, 0]], [], 0, null, ["loc", [null, [25, 8], [27, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "collections/components/preprint-form-header/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment(" template-lint block-indentation=false ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "section-header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "preprint-section-status pull-right");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "displayName", ["loc", [null, [6, 4], [6, 19]]], 0, 0, 0, 0], ["block", "if", [["get", "showValidationIndicator", ["loc", [null, [18, 10], [18, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [18, 4], [20, 11]]]], ["block", "if", [["subexpr", "not", [["get", "isOpen", ["loc", [null, [23, 11], [23, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [23, 6], [23, 18]]], 0, 0]], [], 1, null, ["loc", [null, [23, 0], [29, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/preprint-form-section/component', ['exports', 'ember', 'ember-collapsible-panel/components/cp-panel'], function (exports, _ember, _emberCollapsiblePanelComponentsCpPanel) {
    /**
     * @module ember-preprints
     * @submodule components
     */

    /**
     * Extends Ember Collapsible Panel's CpPanelComponent. Preprint-form-header and preprint-form-body components go inside.
     *
     * Sample usage:
     * ```handlebars
     * {{#preprint-form-section class="upload-section-block" allowOpen=false name='locationOfPreprint' open=false}}
     *    {{preprint-form-header}}
     *    {{#preprint-form-body}}
     *    {{/preprint-form-body}}
     * {{/preprint-form-section}}
     * ```
     * @class preprint-form-section
     **/

    exports['default'] = _emberCollapsiblePanelComponentsCpPanel['default'].extend({
        tagName: 'section',
        classNames: ['preprint-form-section'],
        animate: false,

        /**
         * Prevent toggling into form section if file has not been uploaded
         * @property {boolean} allowOpen
         */
        allowOpen: false,

        /**
         * Track whether this panel has ever been opened (eg to suppress validation indicators until page is viewed)
         * @property {boolean} hasOpened
         */
        hasOpened: false,

        trackOpenState: _ember['default'].observer('isOpen', function () {
            // Whenever panel is opened (via any means), update the hasOpened state to reflect this fact
            var isOpen = this.get('isOpen');
            if (isOpen) {
                this.set('hasOpened', true);
            }
        }),

        // Fix deprecation warning
        _setup: _ember['default'].on('init', _ember['default'].observer('open', function () {
            this.set('panelState.boundOpenState', this.get('open'));
        })),
        /* Manual animation
         * Can be omitted if using {{cp-panel-body}} instead of {{preprint-form-body}} because
         * cp-panel-body uses liquid-if for animation. preprint-form-body purposely avoids liquid-if
         * because liquid-if will cause elements to be removed from DOM. This is can cause some
         * information to be lost (e.g. dropzone state).
         */
        slideAnimation: _ember['default'].observer('isOpen', function () {
            if (this.get('animate')) {
                // Allow liquid-fire to animate
                return;
            }
            var $body = this.$('.cp-Panel-body');
            if (this.get('isOpen')) {
                $body.height('auto');
                $body.height($body.height());
                $body.one('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
                    $body.addClass('no-transition');
                    $body.height('');
                    $body[0].offsetHeight; // jshint ignore: line
                    $body.removeClass('no-transition');
                });
            } else {
                $body.addClass('no-transition');
                $body.height($body.height());
                $body[0].offsetHeight; // jshint ignore: line
                $body.removeClass('no-transition');
                $body.height('');
            }
        }),
        // Called when panel is toggled
        handleToggle: function handleToggle() {
            // Prevent closing all views
            if (!this.get('isOpen')) {
                if (this.get('allowOpen')) {
                    // Crude mechanism to prevent opening a panel if conditions are not met
                    //Ember.get(this, 'metrics')
                    //    .trackEvent({
                    //        category: 'div',
                    //        action: 'click',
                    //        label: `${this.get('editMode') ? 'Edit' : 'Submit'} - Click to edit, ${this.name} section`
                    //    });
                    this._super.apply(this, arguments);
                } else {
                    this.sendAction('errorAction', 'Please complete upload section before continuing');
                }
            }
        }
    });
});
define("collections/components/preprint-form-section/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "collections/components/preprint-form-section/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "hasOpened", ["loc", [null, [1, 8], [1, 17]]], 0, 0, 0, 0], ["get", "isOpen", ["loc", [null, [1, 18], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('collections/components/query-syntax/component', ['exports', 'ember-osf/components/query-syntax/component'], function (exports, _emberOsfComponentsQuerySyntaxComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsQuerySyntaxComponent['default'];
    }
  });
});
define('collections/components/radio-button', ['exports', 'ember-radio-buttons/components/radio-button'], function (exports, _emberRadioButtonsComponentsRadioButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRadioButtonsComponentsRadioButton['default'];
    }
  });
});
define('collections/components/search-dropdown/component', ['exports', 'ember-osf/components/search-dropdown/component'], function (exports, _emberOsfComponentsSearchDropdownComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchDropdownComponent['default'];
    }
  });
});
define('collections/components/search-facet-daterange/component', ['exports', 'ember-osf/components/search-facet-daterange/component'], function (exports, _emberOsfComponentsSearchFacetDaterangeComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetDaterangeComponent['default'];
    }
  });
});
define('collections/components/search-facet-language/component', ['exports', 'npm:langs', 'ember-osf/components/search-facet-language/component'], function (exports, _npmLangs, _emberOsfComponentsSearchFacetLanguageComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetLanguageComponent['default'];
    }
  });
});
/* eslint-disable no-unused-vars */

// This helps ember-browserify find npm modules in ember-cli addons
define('collections/components/search-facet-locked/component', ['exports', 'ember-osf/components/search-facet-locked/component'], function (exports, _emberOsfComponentsSearchFacetLockedComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetLockedComponent['default'];
    }
  });
});
define('collections/components/search-facet-source/component', ['exports', 'ember-osf/components/search-facet-source/component'], function (exports, _emberOsfComponentsSearchFacetSourceComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetSourceComponent['default'];
    }
  });
});
define('collections/components/search-facet-typeahead/component', ['exports', 'ember-osf/components/search-facet-typeahead/component'], function (exports, _emberOsfComponentsSearchFacetTypeaheadComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetTypeaheadComponent['default'];
    }
  });
});
define('collections/components/search-facet-worktype-button/component', ['exports', 'ember-osf/components/search-facet-worktype-button/component'], function (exports, _emberOsfComponentsSearchFacetWorktypeButtonComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetWorktypeButtonComponent['default'];
    }
  });
});
define('collections/components/search-facet-worktype-hierarchy/component', ['exports', 'ember-osf/components/search-facet-worktype-hierarchy/component'], function (exports, _emberOsfComponentsSearchFacetWorktypeHierarchyComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetWorktypeHierarchyComponent['default'];
    }
  });
});
define('collections/components/search-facet-worktype/component', ['exports', 'ember-osf/components/search-facet-worktype/component'], function (exports, _emberOsfComponentsSearchFacetWorktypeComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchFacetWorktypeComponent['default'];
    }
  });
});
define('collections/components/search-help-modal/component', ['exports', 'ember-osf/components/search-help-modal/component'], function (exports, _emberOsfComponentsSearchHelpModalComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchHelpModalComponent['default'];
    }
  });
});
define('collections/components/search-result/component', ['exports', 'ember-osf/components/search-result/component'], function (exports, _emberOsfComponentsSearchResultComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSearchResultComponent['default'];
    }
  });
});
define('collections/components/sign-up/component', ['exports', 'ember-osf/components/sign-up/component'], function (exports, _emberOsfComponentsSignUpComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsSignUpComponent['default'];
    }
  });
});
define('collections/components/sortable-group', ['exports', 'ember-sortable/components/sortable-group'], function (exports, _emberSortableComponentsSortableGroup) {
  exports['default'] = _emberSortableComponentsSortableGroup['default'];
});
define('collections/components/sortable-item', ['exports', 'ember-sortable/components/sortable-item'], function (exports, _emberSortableComponentsSortableItem) {
  exports['default'] = _emberSortableComponentsSortableItem['default'];
});
define('collections/components/subject-picker/component', ['exports', 'ember'], function (exports, _ember) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    // Helper function to determine if discipline has changed (comparing list of lists)
    function disciplineArraysEqual(a, b) {
        if (a === b) return true;
        if (a == null || b == null) return false;
        if (a.length !== b.length) return false;

        for (var i = 0; i < a.length; ++i) {
            if (a[i].length !== b[i].length) return false;
            for (var j = 0; j < a[i].length; ++j) {
                if (a[i][j] !== b[i][j]) return false;
            }
        }
        return true;
    }

    function subjectIdMap(subjectArray) {
        // Maps array of arrays of disciplines into array of arrays of discipline ids.
        return subjectArray.map(function (subjectBlock) {
            return subjectBlock.map(function (subject) {
                return subject.id;
            });
        });
    }

    function arrayEquals(arr1, arr2) {
        return arr1.length === arr2.length && arr1.reduce(function (acc, val, i) {
            return acc && val === arr2[i];
        }, true);
    }

    function arrayStartsWith(arr, prefix) {
        return prefix.reduce(function (acc, val, i) {
            return acc && val && arr[i] && val.id === arr[i].id;
        }, true);
    }
    /**
     * @module ember-preprints
     * @submodule components
     */

    /**
     * Add discipline when creating a preprint.
     *
     * Sample usage:
     * ```handlebars
     * {{subject-picker
     *      editMode=editMode
     *      selected=subjectList
     *      disciplineModifiedToggle=disciplineModifiedToggle
     *      save=(action 'setSubjects')
     *}}
     * ```
     * @class subject-picker
     */
    exports['default'] = _ember['default'].Component.extend({
        store: _ember['default'].inject.service(),
        theme: _ember['default'].inject.service(),

        // Store the lists of subjects
        _tier1: null,
        _tier2: null,
        _tier3: null,

        // Filter the list of subjects if appropriate
        tier1FilterText: '',
        tier2FilterText: '',
        tier3FilterText: '',

        tierSorting: ['text:asc'],
        tier1Filtered: _ember['default'].computed('tier1FilterText', '_tier1.[]', function () {
            var items = this.get('_tier1') || [];
            var filterText = this.get('tier1FilterText').toLowerCase();
            if (filterText) {
                return items.filter(function (item) {
                    return item.get('text').toLowerCase().includes(filterText);
                });
            }
            return items;
        }),
        tier1Sorted: _ember['default'].computed.sort('tier1Filtered', 'tierSorting'),

        tier2Filtered: _ember['default'].computed('tier2FilterText', '_tier2.[]', function () {
            var items = this.get('_tier2') || [];
            var filterText = this.get('tier2FilterText').toLowerCase();
            if (filterText) {
                return items.filter(function (item) {
                    return item.get('text').toLowerCase().includes(filterText);
                });
            }
            return items;
        }),
        tier2Sorted: _ember['default'].computed.sort('tier2Filtered', 'tierSorting'),

        tier3Filtered: _ember['default'].computed('tier3FilterText', '_tier3.[]', function () {
            var items = this.get('_tier3') || [];
            var filterText = this.get('tier3FilterText').toLowerCase();
            if (filterText) {
                return items.filter(function (item) {
                    return item.get('text').toLowerCase().includes(filterText);
                });
            }
            return items;
        }),
        tier3Sorted: _ember['default'].computed.sort('tier3Filtered', 'tierSorting'),

        // Currently selected subjects
        selection1: null,
        selection2: null,
        selection3: null,
        disciplineModifiedToggle: false,
        disciplineValid: _ember['default'].computed.notEmpty('selected'),
        disciplineSaveState: false,

        // Pending subjects
        subjectsList: _ember['default'].computed('subjects.@each', function () {
            return this.get('subjects') ? _ember['default'].$.extend(true, [], this.get('subjects')) : _ember['default'].A();
        }),

        // Flattened subject list
        disciplineReduced: _ember['default'].computed('subjects', function () {
            return _ember['default'].$.extend(true, [], this.get('subjects')).reduce(function (acc, val) {
                return acc.concat(val);
            }, []).uniqBy('id');
        }),

        disciplineChanged: _ember['default'].computed('subjects.@each.subject', 'selected.@each.subject', 'disciplineModifiedToggle', function () {
            var changed = !disciplineArraysEqual(subjectIdMap(this.get('subjects')), subjectIdMap(this.get('selected')));
            this.set('isSectionSaved', !changed);
            return changed;
        }),

        editMode: false,

        querySubjects: function querySubjects() {
            var _this = this;

            var parents = arguments.length <= 0 || arguments[0] === undefined ? 'null' : arguments[0];
            var tier = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

            this.get('theme.provider').then(function (provider) {
                return provider.query('taxonomies', {
                    filter: {
                        parents: parents
                    },
                    page: {
                        size: 100
                    }
                });
            }).then(function (results) {
                return _this.set('_tier' + (tier + 1), results.toArray());
            });
        },

        init: function init() {
            this._super.apply(this, arguments);
            this.set('subjects', []);
            this.set('selected', this.get('subjectsList'));
            this.querySubjects();
        },

        setSubjects: function setSubjects(subjects) {
            // Sets selected with pending subjects. Does not save.
            var disciplineModifiedToggle = this.get('disciplineModifiedToggle');
            this.set('disciplineModifiedToggle', !disciplineModifiedToggle); // Need to observe if discipline in nested array has changed. Toggling this will force 'disciplineChanged' to be recalculated
            this.set('selected', subjects);
        },

        actions: {
            deselect: function deselect(subject) {
                var _this2 = this;

                var index = undefined;
                if (subject.length === 1) {
                    index = 0;
                } else {
                    (function () {
                        var parent = subject.slice(0, -1);
                        index = _this2.get('selected').findIndex(function (item) {
                            return item !== subject && arrayStartsWith(item, parent);
                        });
                    })();
                }

                var wipe = 4; // Tiers to clear
                if (index === -1) {
                    if (this.get('selection' + subject.length) === subject[subject.length - 1]) wipe = subject.length + 1;
                    subject.removeAt(subject.length - 1);
                } else {
                    this.get('selected').removeAt(this.get('selected').indexOf(subject));
                    for (var i = 2; i < 4; i++) {
                        if (this.get('selection' + i) !== subject[i - 1]) continue;
                        wipe = i;
                        break;
                    }
                }

                for (var i = wipe; i < 4; i++) {
                    this.set('_tier' + i, null);
                    this.set('selection' + i, null);
                }
                this.setSubjects(this.get('selected'));
            },
            select: function select(selected, tier) {
                var _this3 = this;

                tier = parseInt(tier);
                if (this.get('selection' + tier) === selected) return;

                this.set('selection' + tier, selected);

                // Inserting the subject lol
                var index = -1;
                var selection = [].concat(_toConsumableArray(Array(tier).keys())).map(function (index) {
                    return _this3.get('selection' + (index + 1));
                });

                // An existing tag has this prefix, and this is the lowest level of the taxonomy, so no need to fetch child results
                if (!(tier !== 3 && this.get('selected').findIndex(function (item) {
                    return arrayStartsWith(item, selection);
                }) !== -1)) {
                    var _loop = function (i) {
                        var sub = selection.slice(0, i + 1);
                        // "deep" equals
                        index = _this3.get('selected').findIndex(function (item) {
                            return arrayEquals(item, sub);
                        }); // jshint ignore:line

                        if (index === -1) return 'continue';

                        _this3.get('selected')[index].pushObjects(selection.slice(i + 1));
                        return 'break';
                    };

                    _loop2: for (var i = 0; i < selection.length; i++) {
                        var _ret2 = _loop(i);

                        switch (_ret2) {
                            case 'continue':
                                continue;

                            case 'break':
                                break _loop2;}
                    }

                    if (index === -1) this.get('selected').pushObject(selection);
                }

                this.setSubjects(this.get('selected'));

                if (tier === 3) return;

                for (var i = tier + 1; i < 4; i++) {
                    this.set('_tier' + i, null);
                } // TODO: Fires a network request every time clicking here, instead of only when needed?
                this.querySubjects(selected.id, tier);
            },
            discardSubjects: function discardSubjects() {
                // Discards changes to subjects. (No requests sent, front-end only.)
                this.set('selected', _ember['default'].$.extend(true, [], this.get('subjects')));
            },
            saveSubjects: function saveSubjects() {
                var _this4 = this;

                var currentSubjects = _ember['default'].$.extend(true, [], this.get('subjects'));
                var subjectMap = _ember['default'].$.extend(true, [], this.get('selected'));
                this.get('action')(this).then(function (result) {
                    _this4.attrs.saveParameter(_this4.attrs.widget.value.parameters.subjects, {
                        value: subjectMap,
                        state: ['defined']
                    });
                    // Update subjects with selected subjects
                    _this4.set('subjects', _ember['default'].$.extend(true, [], subjectMap));
                    _this4.set('editMode', false);
                    // Prevent closing the section until it is valid
                    if (!_this4.get('disciplineChanged')) {
                        _this4.sendAction('closeSection', _this4.get('name'));
                    }
                });
            }
        }
    });
});
define("collections/components/subject-picker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 12
                },
                "end": {
                  "line": 7,
                  "column": 12
                }
              },
              "moduleName": "collections/components/subject-picker/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "subject-preview");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "subject.text", ["loc", [null, [6, 46], [6, 62]]], 0, 0, 0, 0]],
            locals: ["subject"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "collections/components/subject-picker/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "disciplineReduced", ["loc", [null, [5, 20], [5, 37]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 12], [7, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "collections/components/subject-picker/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "disciplineReduced", ["loc", [null, [2, 10], [2, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 16
                  },
                  "end": {
                    "line": 20,
                    "column": 16
                  }
                },
                "moduleName": "collections/components/subject-picker/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("b");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "segment.text", ["loc", [null, [19, 23], [19, 39]]], 0, 0, 0, 0]],
              locals: ["segment"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 8
                }
              },
              "moduleName": "collections/components/subject-picker/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "subject");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element3, 1, 1);
              morphs[1] = dom.createMorphAt(element3, 3, 3);
              return morphs;
            },
            statements: [["block", "each", [["get", "subject", ["loc", [null, [18, 24], [18, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [18, 16], [20, 25]]]], ["inline", "fa-icon", ["times"], ["click", ["subexpr", "action", ["deselect", ["get", "subject", ["loc", [null, [21, 59], [21, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 40], [21, 67]]], 0, 0]], ["loc", [null, [21, 16], [21, 69]]], 0, 0]],
            locals: ["subject"],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 16
                },
                "end": {
                  "line": 35,
                  "column": 16
                }
              },
              "moduleName": "collections/components/subject-picker/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element2, 'class');
              morphs[1] = dom.createElementMorph(element2);
              morphs[2] = dom.createMorphAt(element2, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["subexpr", "if", [["subexpr", "eq", [["get", "subject", ["loc", [null, [32, 71], [32, 78]]], 0, 0, 0, 0], ["get", "selection1", ["loc", [null, [32, 79], [32, 89]]], 0, 0, 0, 0]], [], ["loc", [null, [32, 67], [32, 90]]], 0, 0], "selected"], [], ["loc", [null, [null, null], [32, 103]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["select", ["get", "subject", ["loc", [null, [32, 42], [32, 49]]], 0, 0, 0, 0], "1"], [], ["loc", [null, [32, 24], [32, 55]]], 0, 0], ["content", "subject.text", ["loc", [null, [33, 24], [33, 40]]], 0, 0, 0, 0]],
            locals: ["subject"],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 16
                },
                "end": {
                  "line": 46,
                  "column": 16
                }
              },
              "moduleName": "collections/components/subject-picker/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element1, 'class');
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["subexpr", "if", [["subexpr", "eq", [["get", "subject", ["loc", [null, [43, 71], [43, 78]]], 0, 0, 0, 0], ["get", "selection2", ["loc", [null, [43, 79], [43, 89]]], 0, 0, 0, 0]], [], ["loc", [null, [43, 67], [43, 90]]], 0, 0], "selected"], [], ["loc", [null, [null, null], [43, 103]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["select", ["get", "subject", ["loc", [null, [43, 42], [43, 49]]], 0, 0, 0, 0], "2"], [], ["loc", [null, [43, 24], [43, 55]]], 0, 0], ["content", "subject.text", ["loc", [null, [44, 24], [44, 40]]], 0, 0, 0, 0]],
            locals: ["subject"],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 16
                },
                "end": {
                  "line": 57,
                  "column": 16
                }
              },
              "moduleName": "collections/components/subject-picker/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["subexpr", "if", [["subexpr", "eq", [["get", "subject", ["loc", [null, [54, 71], [54, 78]]], 0, 0, 0, 0], ["get", "selection3", ["loc", [null, [54, 79], [54, 89]]], 0, 0, 0, 0]], [], ["loc", [null, [54, 67], [54, 90]]], 0, 0], "selected"], [], ["loc", [null, [null, null], [54, 103]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["select", ["get", "subject", ["loc", [null, [54, 42], [54, 49]]], 0, 0, 0, 0], "3"], [], ["loc", [null, [54, 24], [54, 55]]], 0, 0], ["content", "subject.text", ["loc", [null, [55, 24], [55, 40]]], 0, 0, 0, 0]],
            locals: ["subject"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 69,
                "column": 4
              }
            },
            "moduleName": "collections/components/subject-picker/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-4");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "style", "overflow: scroll");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-4");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "style", "overflow: scroll");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-4");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "style", "overflow: scroll");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-12");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pull-right");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "class", "btn btn-default");
            var el5 = dom.createTextNode("Discard changes");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "class", "btn btn-primary");
            var el5 = dom.createTextNode("Save and continue");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [3]);
            var element5 = dom.childAt(element4, [1, 1]);
            var element6 = dom.childAt(element4, [3, 1]);
            var element7 = dom.childAt(element4, [5, 1]);
            var element8 = dom.childAt(fragment, [5, 1, 1]);
            var element9 = dom.childAt(element8, [1]);
            var element10 = dom.childAt(element8, [3]);
            var morphs = new Array(11);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            morphs[2] = dom.createMorphAt(element5, 3, 3);
            morphs[3] = dom.createMorphAt(element6, 1, 1);
            morphs[4] = dom.createMorphAt(element6, 3, 3);
            morphs[5] = dom.createMorphAt(element7, 1, 1);
            morphs[6] = dom.createMorphAt(element7, 3, 3);
            morphs[7] = dom.createAttrMorph(element9, 'disabled');
            morphs[8] = dom.createElementMorph(element9);
            morphs[9] = dom.createAttrMorph(element10, 'disabled');
            morphs[10] = dom.createElementMorph(element10);
            return morphs;
          },
          statements: [["block", "each", [["get", "selected", ["loc", [null, [16, 16], [16, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [16, 8], [23, 17]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "tier1FilterText", ["loc", [null, [30, 30], [30, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "form-control", "placeholder", "Search"], ["loc", [null, [30, 16], [30, 89]]], 0, 0], ["block", "each", [["get", "tier1Sorted", ["loc", [null, [31, 24], [31, 35]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [31, 16], [35, 25]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "tier2FilterText", ["loc", [null, [41, 30], [41, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "form-control", "placeholder", "Search"], ["loc", [null, [41, 16], [41, 89]]], 0, 0], ["block", "each", [["get", "tier2Sorted", ["loc", [null, [42, 24], [42, 35]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [42, 16], [46, 25]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "tier3FilterText", ["loc", [null, [52, 30], [52, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "form-control", "placeholder", "Search"], ["loc", [null, [52, 16], [52, 89]]], 0, 0], ["block", "each", [["get", "tier3Sorted", ["loc", [null, [53, 24], [53, 35]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [53, 16], [57, 25]]]], ["attribute", "disabled", ["subexpr", "unless", [["get", "disciplineChanged", ["loc", [null, [64, 93], [64, 110]]], 0, 0, 0, 0], true], [], ["loc", [null, [null, null], [64, 117]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["discardSubjects"], [], ["loc", [null, [64, 22], [64, 50]]], 0, 0], ["attribute", "disabled", ["subexpr", "unless", [["get", "disciplineValid", ["loc", [null, [65, 90], [65, 105]]], 0, 0, 0, 0], true], [], ["loc", [null, [null, null], [65, 112]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["saveSubjects"], [], ["loc", [null, [65, 22], [65, 47]]], 0, 0]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 70,
              "column": 0
            }
          },
          "moduleName": "collections/components/subject-picker/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isOpen", ["loc", [null, [14, 10], [14, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 4], [69, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 71,
            "column": 0
          }
        },
        "moduleName": "collections/components/subject-picker/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "not", [["get", "isOpen", ["loc", [null, [1, 11], [1, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 6], [1, 18]]], 0, 0]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "preprint-form-body", [], [], 1, null, ["loc", [null, [13, 0], [70, 23]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/tags-widget/component', ['exports', 'ember-osf/components/tags-widget/component'], function (exports, _emberOsfComponentsTagsWidgetComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsTagsWidgetComponent['default'];
    }
  });
});
define('collections/components/text-field/component', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({

        description: "Enter a title for the preprint.",

        didReceiveAttrs: function didReceiveAttrs() {
            this.set('description', this.attrs.description);
        },

        textFieldValueObserver: _ember['default'].observer('textFieldValue', function () {
            var saveParameter = this.attrs.saveParameter;
            var parameters = this.attrs.widget.value.parameters;
            saveParameter(parameters.output, {
                state: ['defined'],
                value: this.get('textFieldValue')
            });
        })

    });
});
define("collections/components/text-field/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "collections/components/text-field/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(": ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "valueName", ["loc", [null, [12, 4], [12, 17]]], 0, 0, 0, 0], ["content", "textFieldValue", ["loc", [null, [12, 19], [12, 37]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "collections/components/text-field/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "submission-text-field");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["content", "description", ["loc", [null, [19, 19], [19, 34]]], 0, 0, 0, 0], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "textFieldValue", ["loc", [null, [20, 26], [20, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "form-control "], ["loc", [null, [20, 12], [20, 65]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "collections/components/text-field/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isOpen", ["loc", [null, [17, 10], [17, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [17, 4], [22, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "collections/components/text-field/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("style");
        var el2 = dom.createTextNode("\n\n    .submission-text-field {\n        margin-top: 10px;\n    }\n\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "not", [["get", "isOpen", ["loc", [null, [10, 11], [10, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 6], [10, 18]]], 0, 0]], [], 0, null, ["loc", [null, [10, 0], [14, 7]]]], ["block", "preprint-form-body", [], [], 1, null, ["loc", [null, [16, 0], [23, 23]]]], ["content", "yield", ["loc", [null, [24, 0], [24, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('collections/components/total-share-results/component', ['exports', 'ember-osf/components/total-share-results/component'], function (exports, _emberOsfComponentsTotalShareResultsComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfComponentsTotalShareResultsComponent['default'];
    }
  });
});
define('collections/components/validated-input/component', ['exports', 'ember'], function (exports, _ember) {
    var isEmpty = _ember['default'].isEmpty;
    var computed = _ember['default'].computed;
    var defineProperty = _ember['default'].defineProperty;
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['validated-input'],
        classNameBindings: ['showErrorClass:has-error', 'isValid:has-success'],
        model: null,
        value: null,
        type: 'text',
        valuePath: '',
        placeholder: '',
        validation: null,
        isTyping: false,

        init: function init() {
            this._super.apply(this, arguments);
            var valuePath = this.get('valuePath');
            defineProperty(this, 'validation', computed.oneWay('model.validations.attrs.' + valuePath));
            defineProperty(this, 'value', computed.alias('model.' + valuePath));
        },

        showErrorMessage: computed('validation.isDirty', 'isInvalid', 'didValidate', function () {
            return (this.get('validation.isDirty') || this.get('didValidate')) && this.get('isInvalid');
        }),

        notValidating: computed.not('validation.isValidating'),
        didValidate: computed.oneWay('targetObject.didValidate'),
        hasContent: computed.notEmpty('value'),

        isValid: computed.and('hasContent', 'validation.isValid', 'notValidating'),
        isInvalid: computed.oneWay('validation.isInvalid'),

        showWarningMessage: computed('validation.isDirty', 'validation.warnings.[]', 'isValid', 'didValidate', function () {
            return (this.get('validation.isDirty') || this.get('didValidate')) && this.get('isValid') && !isEmpty(this.get('validation.warnings'));
        }),

        keyPress: function keyPress(e) {
            if (e.keyCode === 13 && !this.get('large')) {
                e.preventDefault();
                this.send('pressSubmit');
            }
        },
        actions: {
            pressSubmit: function pressSubmit() {
                this.sendAction('pressSubmit');
            }
        }
    });
});
// This component is derived from ember-cp-validations. See https://github.com/offirgolan/ember-cp-validations for more information
define("collections/components/validated-input/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "collections/components/validated-input/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "textarea", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [4, 24], [4, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 35], [4, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [4, 53], [4, 64]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "form-control", "name", ["subexpr", "@mut", [["get", "valuePath", ["loc", [null, [4, 91], [4, 100]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 8], [4, 102]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "collections/components/validated-input/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [6, 21], [6, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 32], [6, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 50], [6, 61]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "form-control", "name", ["subexpr", "@mut", [["get", "valuePath", ["loc", [null, [6, 88], [6, 97]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 8], [6, 99]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "collections/components/validated-input/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "valid-input");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 8
            },
            "end": {
              "line": 18,
              "column": 8
            }
          },
          "moduleName": "collections/components/validated-input/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "error");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "get", [["subexpr", "get", [["get", "model.validations.attrs", [], 0, 0, 0, 0], ["get", "valuePath", ["loc", [null, [16, 30], [16, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "message"], [], ["loc", [null, [16, 16], [16, 51]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "collections/components/validated-input/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "form-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "input-error");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 4], [2, 13]]], 0, 0, 0, 0], ["block", "if", [["get", "large", ["loc", [null, [3, 10], [3, 15]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [7, 11]]]], ["block", "if", [["get", "isValid", ["loc", [null, [9, 10], [9, 17]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [9, 4], [11, 11]]]], ["block", "if", [["get", "showErrorMessage", ["loc", [null, [14, 14], [14, 30]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [14, 8], [18, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define('collections/controllers/application', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        session: _ember['default'].inject.service(),
        actions: {
            login: function login() {
                this.get('session').authenticate('authenticator:osf-token');
            }
        }
    });
});
define("collections/controllers/collection", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({
        breadCrumb: _ember["default"].computed("model.title", function () {
            return this.get("model.title");
        }),
        searchGuid: 'fkat6',
        loadingGuid: false,
        organizeMode: false,
        actions: {
            toggleOrganizeMode: function toggleOrganizeMode() {
                this.toggleProperty('organizeMode');
            }
        }
    });
});
define('collections/controllers/collection/add', ['exports', 'ember', 'collections/config/environment'], function (exports, _ember, _collectionsConfigEnvironment) {

    function createCookie(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            var expires = "; expires=" + date.toGMTString();
        } else var expires = "";
        document.cookie = name + "=" + value + expires + "; path=/";
    }

    function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function eraseCookie(name) {
        createCookie(name, "", -1);
    }

    function getToken() {
        var token;
        var session = window.localStorage['ember_simple_auth:session'];
        if (session) {
            token = JSON.parse(session)['authenticated'];
            if ('attributes' in token) {
                return token['attributes']['accessToken'];
            }
            return token;
        }
    }

    exports['default'] = _ember['default'].Controller.extend({

        addMethod: 'select', // 'select' or 'create'
        panelActions: _ember['default'].inject.service('panelActions'),
        _names: _ember['default'].computed('sections', function () {
            var sections = this.get('sections');
            return sections.map(function (section) {
                return section.name;
            });
        }),
        methodSelected: false,
        type: _ember['default'].computed('model.settings', function () {
            var collectionType = this.get('model.settings.collectionType') || 'project';
            return collectionType.toLowerCase();
        }),
        widgets: [],
        formActions: [],
        editMode: false,

        init: function init() {
            this._super();
            this.set('content', Em.Object.create({
                info: null
            }));
            this.saveParameter = this.saveParameter.bind(this);
            this.closeSection = this.closeSection.bind(this);
            this.openSection = this.openSection.bind(this);
            this.createWidget = this.createWidget.bind(this);
            this.deleteWidget = this.deleteWidget.bind(this);
        },

        // Fire enabled actions.
        updateState: function updateState(actions) {
            var _this = this;

            var controller = this;
            actions.forEach(function (action) {
                // Check if the action can fire.
                if (!checkAll.call(_this, action.conditions)) return;
                // Action may fire if execution has reached this point.
                // Call the action and set its result and any
                // changes to its state on `controller.parameters`.
                //
                function fireActions(actionId) {
                    var actionObj, result;
                    return regeneratorRuntime.async(function fireActions$(context$3$0) {
                        while (1) switch (context$3$0.prev = context$3$0.next) {
                            case 0:
                                if (!(typeof actionId === "string")) {
                                    context$3$0.next = 10;
                                    break;
                                }

                                actionObj = actions.find(function (action) {
                                    return action.id == actionId;
                                });

                                if (!(typeof actionObj.action === 'function')) {
                                    context$3$0.next = 10;
                                    break;
                                }

                                context$3$0.next = 5;
                                return regeneratorRuntime.awrap(actionObj.action.apply(this, actionObj.argArr));

                            case 5:
                                result = context$3$0.sent;

                                if (typeof actionObj.then === 'string') {
                                    fireActions.call(this, actionObj.then);
                                }
                                actionObj.outputParameter.value = result;
                                actionObj.outputParameter.state = ['defined'];
                                controller.notifyPropertyChange('parameters');

                            case 10:
                            case 'end':
                                return context$3$0.stop();
                        }
                    }, null, this);
                }

                fireActions.call(_this, action.id);
            });
        },

        // Take the description of an action and set its properties to be the vaious literal
        // functions and parameters it depends on to operate.
        hydrateAction: function hydrateAction(action) {
            var parameters = this.get('parameters');
            if (typeof parameters[action.outputParameter] !== 'object') {
                parameters[action.outputParameter] = {};
            }
            if (typeof action.parameters !== 'object') {
                action.parameters = {};
            }
            var signature = this.get(action.type + 'Signature');
            // Create a new object as not to modify the object returned from the model
            var hydratedAction = {
                id: action.id,
                type: action.type,
                signature: signature,
                action: this.get(action.type),
                conditions: action.conditions,
                parameters: Object.keys(action.parameters).reduce(function (result, key) {
                    if (typeof parameters[action.parameters[key]] !== 'object') {
                        parameters[action.parameters[key]] = {
                            state: ['undefined'],
                            value: undefined
                        };
                    }
                    result[key] = parameters[action.parameters[key]];
                    return result;
                }, {}),
                args: action.args,
                outputParameter: parameters[action.outputParameter],
                then: action.then
            };
            hydratedAction['argArr'] = constructArgArr.call(this, hydratedAction);
            return hydratedAction;
        },

        createWidgetSignature: ['widgetComponent', 'description', 'disabled', 'cssClasses', 'section', 'outputParameter', 'actionId'],
        // `this` must be bound to the controller for `create_widget`, as
        // `create_widget` requires access to the controller, and does so through `this`.
        createWidget: function createWidget(widgetComponent, description, disabled, cssClasses, section, outputParameter, actionId, parameters) {
            var action = undefined;
            var controller = this;

            var actions = this.get('formActions');

            function fireActions(actionId) {
                var actionObj, result;
                return regeneratorRuntime.async(function fireActions$(context$2$0) {
                    while (1) switch (context$2$0.prev = context$2$0.next) {
                        case 0:
                            if (!(typeof actionId === "string")) {
                                context$2$0.next = 12;
                                break;
                            }

                            actionObj = actions.find(function (action) {
                                return action.id == actionId;
                            });

                            if (!(typeof actionObj.action === 'function')) {
                                context$2$0.next = 10;
                                break;
                            }

                            context$2$0.next = 5;
                            return regeneratorRuntime.awrap(actionObj.action.apply(this, actionObj.argArr));

                        case 5:
                            result = context$2$0.sent;

                            if (typeof actionObj.then === 'string') {
                                fireActions.call(this, actionObj.then);
                            }
                            actionObj.outputParameter.value = result;
                            controller.notifyPropertyChange('parameters');
                            return context$2$0.abrupt('return', result);

                        case 10:
                            context$2$0.next = 13;
                            break;

                        case 12:
                            return context$2$0.abrupt('return');

                        case 13:
                        case 'end':
                            return context$2$0.stop();
                    }
                }, null, this);
            }

            action = function (context) {
                return fireActions.call(context, actionId);
            };

            var widget = {
                widgetComponent: widgetComponent,
                parameters: parameters,
                description: description,
                disabled: disabled,
                cssClasses: cssClasses,
                section: section,
                outputParameter: outputParameter,
                action: action
            };
            this.get('widgets').pushObject(widget);
            return widget;
        },

        // Delete widget and resets state
        deleteWidgetSignature: ['widgetObject'],
        deleteWidget: function deleteWidget(widgetObject, parameters) {
            this.get('widgets').removeObject(widgetObject.value);
            _ember['default'].set(widgetObject, 'value', undefined);
            _ember['default'].set(widgetObject, 'state', ['undefined']);
        },

        disableWidgetSignature: ['widgetObject'],
        disableWidget: function disableWidget(widgetObject, parameters) {
            _ember['default'].set(widgetObject, 'value.disabled', true);
        },

        enableWidgetSignature: ['widgetObject'],
        enableWidget: function enableWidget(widgetObject, parameters) {
            _ember['default'].set(widgetObject, 'value.disabled', false);
            _ember['default'].run.next(this, function () {
                this.get('updateState').call(this, this.get('formActions'));
            });
        },

        toggleWidgetSignature: ['widgetObject'],
        toggleWidget: function toggleWidget(widgetObject, parameters) {
            if (widgetObject.value.disabled === false) {
                _ember['default'].set(widgetObject, 'value.disabled', true);
            } else {
                _ember['default'].set(widgetObject, 'value.disabled', false);
            }
            _ember['default'].run.next(this, function () {
                this.get('updateState').call(this, this.get('formActions'));
            });
        },

        uploadFileSignature: ['fileName', 'fileData', 'node'],
        uploadFile: function uploadFile(fileName, fileData, node, parameters) {
            var uri, xhr, deferred, value;
            return regeneratorRuntime.async(function uploadFile$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        if (!(typeof fileName.value === 'undefined')) {
                            context$1$0.next = 2;
                            break;
                        }

                        return context$1$0.abrupt('return');

                    case 2:
                        if (!(typeof fileData.value === 'undefined')) {
                            context$1$0.next = 4;
                            break;
                        }

                        return context$1$0.abrupt('return');

                    case 4:
                        if (typeof node.value === 'undefined') node.value = _collectionsConfigEnvironment['default'].NODE_GUID;
                        uri = _collectionsConfigEnvironment['default'].OSF.waterbutlerUrl + "v1/resources/" + node.value + "/providers/osfstorage/?kind=file&name=" + fileName.value;
                        xhr = new XMLHttpRequest();

                        xhr.open("PUT", uri, true);
                        xhr.withCredentials = false;
                        xhr.setRequestHeader('Authorization', 'Bearer ' + getToken());

                        deferred = _ember['default'].RSVP.defer();

                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 300) {
                                deferred.resolve(JSON.parse(xhr.responseText).data.links.download);
                            }
                        };
                        xhr.send(fileData.value);
                        context$1$0.next = 15;
                        return regeneratorRuntime.awrap(deferred.promise);

                    case 15:
                        value = context$1$0.sent;
                        return context$1$0.abrupt('return', value);

                    case 17:
                    case 'end':
                        return context$1$0.stop();
                }
            }, null, this);
        },

        saveSection: function saveSection(section) {
            return function () {
                var _this2 = this;

                widgets.filter(function (widget) {
                    return widget.section == section;
                }).map(function (widget) {
                    return _this2[widget.output];
                });
            };
        },

        saveParameterSignature: ['parameter', 'updatedParameter'],
        saveParameter: function saveParameter(parameter, updatedParameter, parameters) {
            if (typeof updatedParameter.value !== 'undefined') {
                _ember['default'].set(parameter, 'value', updatedParameter.value);
            }
            if (typeof updatedParameter.state !== 'undefined') {
                _ember['default'].set(parameter, 'state', updatedParameter.state);
            }
            _ember['default'].run.next(this, function () {
                this.get('updateState').call(this, this.get('formActions'));
            });
        },

        closeSectionSignature: ['sectionName'],
        closeSection: function closeSection(sectionName, parameters) {
            this.get('panelActions').close(this.get('_names.' + this.get('_names').indexOf(sectionName)));
            this.get('parameters')[this.get('sections').find(function (section) {
                return section.name === sectionName;
            }).param].state = ['closed', 'saved'];
            this.get('updateState').call(this, this.get('formActions'));
        },

        openSectionSignature: ['sectionName'],
        openSection: function openSection(sectionName, parameters) {
            this.get('panelActions').open(this.get('_names.' + this.get('_names').indexOf(sectionName)));
            this.get('parameters')[this.get('sections').find(function (section) {
                return section.name === sectionName;
            }).param].state = ['open', 'editing'];
        },

        browserAlertSignature: ['alertString'],
        browserAlert: function browserAlert(alertString) {
            this.toast.success(alertString);
        },

        actions: {

            updateProperty: function updateProperty(oldValue, newValue) {
                this.set(oldValue, newValue);
                this.set('methodSelected', true); // Change view to show the methods
            },

            transition: function transition(name, id) {
                this.transitionToRoute(name, id);
            }

        }

    });

    // Engine helper functions.
    // ////////////////////////////////////////////////////////////////////////////////////////////////

    function conditionDispatcher(condition) {

        var parameters = this.get('parameters');

        // Check if its a regular condition
        if (condition.parameter !== undefined) {
            // actualy check the condition is met;
            // the parameter has to have the given state.
            if (parameters[condition.parameter] === undefined) {
                parameters[condition.parameter] = {};
            }
            if (parameters[condition.parameter].state === undefined) {
                parameters[condition.parameter].state = [];
            }
            var parameterState = parameters[condition.parameter].state;
            // check that the state exists for this item
            return parameterState.some(function (state_item) {
                return state_item === condition.state;
            });
        }

        // Check if its an 'all' composite condition
        if (condition.all !== undefined && condition.all.constructor === Array) {
            // if any conditions fail, the whole check fails.
            return checkAll.call(this, condition.all);
        }

        // Check if its an 'any' composite condition
        if (condition.any !== undefined && condition.any.constructor === Array) {
            // if any conditions are met, the whole check passes.
            return checkAny.call(this, condition.any);
        }

        // Check if its a 'none' composite condition
        if (condition.none !== undefined && condition.none.constructor === Array) {
            // if any conditions are met, the whole check fails.
            return !checkAny.call(this, condition.none);
        }

        return false;
    }

    function checkAll(conditions) {
        var _this3 = this;

        var parameters = this.get('parameters');
        if (typeof conditions !== 'object') return false;
        if (conditions.constructor !== Array) return false;
        // if any conditions fail, the whole check fails.
        return !conditions.some(function (condition) {
            return !conditionDispatcher.call(_this3, condition);
        });
    }

    function checkAny(conditions) {
        // If any conditions are met, the whole check passes.
        return conditions.some(conditionDispatcher.bind(this));
    }

    // Constructs an array containing the parameters or arguments that are used by an
    // action function. Based on the action function's signature, which is an array of
    // strings that describe how to map the parameters from their keys on the controller
    // to the position in the function's arguments. This function constructs the array
    // that the action function gets applied with
    //
    // Future improvements:
    //
    // - Pass in only the signature, args, and parameters objects to the function;
    //   the function does not require the whole action object.

    function constructArgArr(action) {

        var parameters = this.get('parameters');
        var args = action.signature.map(function (key) {

            // Default to undefined.
            var value = undefined;

            // First try to use the parameter.
            if (typeof action.parameters === 'object' && typeof action.parameters[key] === 'object') {

                var exists = false;
                var parameterKeys = Object.keys(parameters);

                // There was a bug here where the parameters weren't matching up right;
                // this check ensures parameters aren't duplicated and the like.
                parameterKeys.forEach(function (parameterKey) {
                    if (parameters[parameterKey] === action.parameters[key]) {
                        value = parameters[parameterKey];
                        exists = true;
                    }
                });

                if (!exists) console.log("No action with that key exists in the controller's action array. client/app/controllers/collection/add.js, line 421]");
            }

            if (typeof action.parameters === 'object' && typeof action.parameters[key] === 'string') {

                if (typeof parameters[action.parameters[key]] !== 'object') {
                    parameters[action.parameters[key]] = {};
                }

                value = parameters[action.parameters[key]];
            }

            // If an arg is defined, it takes priority.
            if (typeof action.args === 'object' && action.args[key] !== undefined) {
                value = action.args[key];
            }

            return value;
        });

        args.push(action.parameters);
        return args;
    }

    //
});
define('collections/controllers/collection/browse', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            changeRoute: function changeRoute(path, params) {
                this.get('changeRoute')(path, params);
            }
        }
    });
});
define('collections/controllers/collection/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        session: _ember['default'].inject.service(),
        editMode: false,
        collectionSettings: {},
        resetModelCache: function resetModelCache() {
            var model = this.get('model');
            return {
                title: model.get('title'),
                description: model.get('description'),
                tags: model.get('tags'),
                settings: JSON.stringify(model.get('settings'))
            };
        },
        modelCache: _ember['default'].computed('model', function () {
            return this.resetModelCache();
        }),
        formattedTags: _ember['default'].computed('model.tags', function () {
            var tags = this.get('model.tags');
            if (tags) {
                return this.get('model.tags').split(',');
            }
            return [];
        }),
        settingsString: _ember['default'].computed('model.settings', function () {
            return JSON.stringify(this.get('model.settings'));
        }),
        actions: {
            showEdit: function showEdit() {
                this.set('editMode', true);
            },
            cancelEdit: function cancelEdit() {
                this.set('editMode', false);
                this.set('modelCache', this.resetModelCache());
            },
            saveEdit: function saveEdit() {
                var model = this.get('model');
                model.set('settings', JSON.parse(this.get('modelCache.settings')));
                model.set('title', this.get('modelCache.title'));
                model.set('description', this.get('modelCache.description'));
                model.set('tags', this.get('modelCache.tags'));
                model.save();
                this.set('editMode', false);
            },
            deleteCollection: function deleteCollection() {
                var _this = this;

                this.get('model').destroyRecord().then(function () {
                    return _this.transitionToRoute('/');
                });
            }
        }
    });
});
define("collections/controllers/collection/group", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({
        breadCrumb: _ember["default"].computed("model.title", function () {
            return this.get("model.title");
        }),
        organizeMode: false,
        actions: {
            toggleOrganizeMode: function toggleOrganizeMode() {
                this.toggleProperty('organizeMode');
            }
        }
    });
});
define('collections/controllers/collection/group/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        organizeMode: false,
        cardView: true,
        selectedItems: _ember['default'].A(),
        showDeleteItemConfirmation: false, // Modal for deleting items
        actions: {
            clearSelected: function clearSelected() {
                var selected = this.get('selectedItems');
                selected.clear();
            },
            clearModals: function clearModals() {
                this.set('showDeleteItemConfirmation', false);
            },
            deleteSelected: function deleteSelected() {
                var items = this.get('model.items');
                var selected = this.get('selectedItems');
                selected.forEach(function (item) {
                    return _ember['default'].run.once(function () {
                        return item.destroyRecord();
                    });
                });
                items.removeObjects(selected);
                this.send('clearSelected');
                this.send('clearModals');
            },
            // Adds or removes item to the selectedItems list
            toggleSelectedList: function toggleSelectedList(selected, item) {
                var currentList = this.get('selectedItems');
                if (!selected) {
                    currentList.removeObject(item);
                } else {
                    currentList.addObject(item);
                }
            },
            changeRoute: function changeRoute(path, params) {
                this.transitionToRoute(path, params);
            },
            changeView: function changeView(cardView) {
                this.set('cardView', cardView);
            }
        }
    });
});
define("collections/controllers/collection/group/item", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({
        breadCrumb: _ember["default"].computed("model.title", function () {
            return this.get("model.title");
        })
    });
});
define('collections/controllers/collection/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        session: _ember['default'].inject.service(),
        actions: {
            changeRoute: function changeRoute(path, params) {
                this.transitionToRoute(path, params);
            }
        }
    });
});
define('collections/controllers/collection/item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('collections/controllers/collection/search', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        searchText: '',
        results: _ember['default'].A(),
        actions: {
            search: function search() {
                var _this = this;

                var text = this.get('searchText');
                this.get('store').query('item', {
                    filter: {
                        title: text
                    }
                }).then(function (results) {
                    _this.set('results', results);
                });
            }
        }
    });
});
define('collections/controllers/create', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        typeList: _ember['default'].A(['Project', 'Registration', 'Preprint', 'Website', 'Meeting']),
        title: '',
        selectedType: 'Preprint',
        description: '',
        actions: {
            addCollection: function addCollection() {
                var _this = this;

                var collection = this.store.createRecord('collection', {
                    title: this.get('title'),
                    tags: '',
                    settings: JSON.stringify({ collectionType: this.get('selectedType') }),
                    description: this.get('description')
                });
                collection.save().then(function (record) {
                    _this.set('newCollectionTitle', '');
                    _this.transitionToRoute('collection', record);
                });
            },
            updateType: function updateType(value) {
                this.set('selectedType', value);
            }
        }
    });
});
define('collections/controllers/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        session: _ember['default'].inject.service(),
        newCollectionTitle: '',
        modelCache: null,
        filterText: '',
        currentPage: 1,
        loadingMore: false,
        showLoadMore: _ember['default'].computed('model.meta', function () {
            return this.get('model.meta.pagination.count') > this.get('model.length');
        }),
        actions: {
            filter: function filter() {
                var model = this.get('model');
                var text = this.get('filterText').toLowerCase();
                if (this.get('modelCache') === null) {
                    this.set('modelCache', model);
                }
                this.set('model', this.get('modelCache').filter(function (item) {
                    return item.get('title').toLowerCase().includes(text);
                }));
            },
            addCollection: function addCollection() {
                var _this = this;

                var collection = this.store.createRecord('collection', {
                    title: this.get('newCollectionTitle'),
                    tags: '',
                    description: ''
                });
                collection.save().then(function (record) {
                    _this.set('newCollectionTitle', '');
                    _this.set('filterText', '');
                    _this.transitionToRoute('collection', record);
                });
            },
            clearFilter: function clearFilter() {
                this.set('filterText', '');
            },
            enterPress: function enterPress() {
                this.get('actions').addCollection.call(this);
            },
            loadMore: function loadMore() {
                var _this2 = this;

                this.set('loadingMore', true);
                this.store.query('collection', {
                    page: this.get('currentPage') + 1
                }).then(function (data) {
                    _this2.incrementProperty('currentPage');
                    var currentModel = _this2.get('model').toArray();
                    var arr = data.toArray();
                    currentModel.pushObjects(arr);
                    _this2.set('model', currentModel);
                    _this2.set('loadingMore', false);
                });
            }
        }
    });
});
define('collections/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/conditions-for-contrib-removal', ['exports', 'ember', 'ember-osf/const/permissions'], function (exports, _ember, _emberOsfConstPermissions) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.conditionsForContribRemoval = conditionsForContribRemoval;

    /**
     * @module ember-preprints
     * @submodule helpers
     */

    /**
     * conditionsForContribRemoval helper - used to determine if removing a particular
     * contributor will still satisfy two conditions 1) @ least one registered admin 2) @ least one
     * bibliographic contributor
     *
     * @class conditionsForContribRemoval
     * @param {Object} contributorToRemove contributor you intend to remove
     * @param {Array} contributors list of all contributors on the preprint
     * @return {Boolean} Would removing contributor leave minimum number of registered
     * admins and bibliographic contributors?
     */

    function conditionsForContribRemoval(params /*, hash*/) {
        var _params = _slicedToArray(params, 2);

        var contributorToRemove = _params[0];
        var contributors = _params[1];

        var minRegisteredAdmins = false;
        var minBibliographic = false;
        contributors.forEach(function (contributor) {
            if (contributor.id !== contributorToRemove.id) {
                if (contributor.get('permission') === _emberOsfConstPermissions['default'].ADMIN && contributor.get('unregisteredContributor') === null) {
                    minRegisteredAdmins = true;
                }
                if (contributor.get('bibliographic')) {
                    minBibliographic = true;
                }
            }
        });
        return minRegisteredAdmins && minBibliographic;
    }

    exports['default'] = _ember['default'].Helper.helper(conditionsForContribRemoval);
});
define('collections/helpers/contributor-is-current-user', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.contributorIsCurrentUser = contributorIsCurrentUser;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * contributorIsCurrentUser helper. Checks to see if particular contributor listed is the current
   * logged in user
   *
   * @class contributorIsCurrentUser
   * @param {Object} contributor Contributor in question.
   * @param {Object} currentUser Current logged in user.
   * @return {Boolean} Is this contributor the current user?
   */

  function contributorIsCurrentUser(params /*, hash*/) {
    var _params = _slicedToArray(params, 2);

    var contributor = _params[0];
    var currentUser = _params[1];

    var currentUserId = currentUser.get('currentUserId') || currentUser.get('id');
    return contributor.get('userId') === currentUserId;
  }

  exports['default'] = _ember['default'].Helper.helper(contributorIsCurrentUser);
});
define('collections/helpers/elem-id', ['exports', 'ember-osf/helpers/elem-id'], function (exports, _emberOsfHelpersElemId) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersElemId['default'];
    }
  });
  Object.defineProperty(exports, 'elemId', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersElemId.elemId;
    }
  });
});
define('collections/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/filter-replace', ['exports', 'ember'], function (exports, _ember) {
  exports.filterReplace = filterReplace;

  var filters = {
    'Open Science Framework': 'OSF',
    'Cognitive Sciences ePrint Archive': 'Cogprints',
    OSF: 'OSF Preprints',
    'Research Papers in Economics': 'RePEc'
  };

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * filterReplace helper. Replaces long provider names without messing with search filter logic
   *
   * @class filterReplace
   * @param {String} filter Filter
   * @return {String} Return shortened provider filter, if present in filters.
   * Otherwise, return original filter.
   */

  function filterReplace(params) {
    return filters[params[0]] ? filters[params[0]] : params[0];
  }

  exports['default'] = _ember['default'].Helper.helper(filterReplace);
});
define('collections/helpers/fix-special-char', ['exports', 'ember-osf/helpers/fix-special-char'], function (exports, _emberOsfHelpersFixSpecialChar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersFixSpecialChar['default'];
    }
  });
  Object.defineProperty(exports, 'fixSpecialCharHelper', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersFixSpecialChar.fixSpecialCharHelper;
    }
  });
});
define('collections/helpers/fixed-grid-layout', ['exports', 'ember', 'ember-collection/layouts/grid'], function (exports, _ember, _emberCollectionLayoutsGrid) {
  exports['default'] = _ember['default'].Helper.helper(function (params, hash) {
    return new _emberCollectionLayoutsGrid['default'](params[0], params[1]);
  });
});
define('collections/helpers/get-ancestor-descriptor', ['exports', 'ember'], function (exports, _ember) {
    exports.getAncestorDescriptor = getAncestorDescriptor;

    function fetchIdFromRelationshipLink(node, relationship) {
        // If id is not embedded in request, Private node ids can be accessed under initializedRelationships.
        // May still return undefined if parent, for example, does not exist.
        if (node) {
            var initializedRelationship = node._internalModel._relationships.initializedRelationships[relationship];
            if (initializedRelationship && initializedRelationship.link) {
                return initializedRelationship.link.split('nodes')[1].replace(/\//g, '');
            }
        }
        return undefined;
    }

    function fetchTitle(node, relationship) {
        // Fetches parent or root title.  If null, marks 'Private'.
        var title = node.get(relationship + '.title');
        if (typeof title === 'undefined') {
            title = 'Private';
        }
        return title;
    }

    function getAncestorDescriptor(params /*, hash*/) {
        // Formats titles similar to the way they're displayed in the dashboard.  For example, Root Name / ... / Parent Name / Node Name.
        var node = params[0];
        var nodeId = node.get('id');
        var rootId = node.get('root.id');
        var parentId = node.get('parent.id');
        var parent = node.get('parent') instanceof _ember['default'].ObjectProxy ? node.get('parent.content') : node.get('parent');
        var parentParentId = parent ? parent.get('parent.id') : undefined;

        if (typeof rootId === 'undefined') rootId = fetchIdFromRelationshipLink(node, 'root');
        if (typeof parentId === 'undefined') parentId = fetchIdFromRelationshipLink(node, 'parent');
        if (typeof parentParentId === 'undefined') parentParentId = fetchIdFromRelationshipLink(parent, 'parent');

        var parentTitle = fetchTitle(node, 'parent');
        var rootTitle = fetchTitle(node, 'root');

        var rootDescriptor = undefined;
        if (rootId === nodeId) {
            // One level
            rootDescriptor = '';
        } else if (rootId === parentId) {
            // Two levels
            rootDescriptor = parentTitle + ' / ';
        } else if (rootId === parentParentId) {
            // Three levels
            rootDescriptor = rootTitle + ' / ' + parentTitle + ' / ';
        } else if (parentParentId === undefined) {
            // Cannot deduce number of levels.
            rootDescriptor = '... / ';
        } else {
            // Four + levels
            rootDescriptor = rootTitle + ' / ... / ' + parentTitle + ' / ';
        }
        return rootDescriptor;
    }

    exports['default'] = _ember['default'].Helper.helper(getAncestorDescriptor);
});
define('collections/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/if-filter', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.ifFilter = ifFilter;

    /**
     * @module ember-preprints
     * @submodule helpers
     */

    /**
      * ifFilter helper. To be used within an {#if} block, to only display an item if it matches a filter.
      *
      * @class ifFilter
      * @param {String} element
      * @param {Object} filter
      * @param {String} list intersection ??
      * @return {Boolean} Return if matches a filter.
      */

    function ifFilter(params) {
        var _params = _slicedToArray(params, 3);

        var element = _params[0];
        var filter = _params[1];
        var intersection = _params[2];

        if (intersection) {
            var match = element.filter(function (each) {
                return filter.includes(each);
            });
            return match.length;
        }
        if (typeof filter === 'object') {
            return filter.includes(element);
        }
        if (typeof filter === 'undefined' || element.toLowerCase().includes(filter.toLowerCase())) {
            return true;
        }
        return false;
    }

    exports['default'] = _ember['default'].Helper.helper(ifFilter);
});
define('collections/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/is-equal', ['exports', 'ember-truth-helpers/helpers/is-equal'], function (exports, _emberTruthHelpersHelpersIsEqual) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberTruthHelpersHelpersIsEqual['default'];
    }
  });
  Object.defineProperty(exports, 'isEqual', {
    enumerable: true,
    get: function get() {
      return _emberTruthHelpersHelpersIsEqual.isEqual;
    }
  });
});
define('collections/helpers/is-not', ['exports', 'ember-bootstrap/helpers/is-not'], function (exports, _emberBootstrapHelpersIsNot) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapHelpersIsNot['default'];
    }
  });
  Object.defineProperty(exports, 'isNot', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapHelpersIsNot.isNot;
    }
  });
});
define('collections/helpers/is-section-editable', ['exports', 'ember'], function (exports, _ember) {
  exports.isSectionEditable = isSectionEditable;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * isSectionEditable helper - determines if form section can be edited.
   *
   * @class isSectionEditable
   * @param {String} section form section name
   * @return {Boolean} Is this section editable?
   */

  function isSectionEditable(params /*, hash*/) {
    var section = params[0];
    var uneditableSections = ['Submit', 'location_of_preprint', 'Update'];
    return !uneditableSections.includes(section);
  }

  exports['default'] = _ember['default'].Helper.helper(isSectionEditable);
});
define('collections/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/min-admins', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.minAdmins = minAdmins;

    /**
     * @module ember-preprints
     * @submodule helpers
     */

    /**
     * minAdmins helper - used to determine if the user should be able to update permissions
     * of a particular contributor.  False if user is trying to update the permissions
     * of the sole admin.  All projects need at least one administrator.
     *
     * @class minAdmins
     * @param {Object} contrib contributor for which you intend to modify permissions
     * @param {Array} contributors list of all contributors on the preprint
     * @return {Boolean} Does updating this contributor leave minimum number of admins?
     */

    function minAdmins(params /*, hash*/) {
        var _params = _slicedToArray(params, 2);

        var contrib = _params[0];
        var contributors = _params[1];

        var registeredAdmins = 0;
        contributors.forEach(function (contributor) {
            if (contributor.get('permission') === 'admin' && contributor.get('unregisteredContributor') === null) {
                registeredAdmins++;
            }
        });
        if (registeredAdmins === 1 && contrib.get('permission') === 'admin' && contrib.get('unregisteredContributor') === null) {
            return false;
        } else {
            return true;
        }
    }

    exports['default'] = _ember['default'].Helper.helper(minAdmins);
});
define('collections/helpers/min-bibliographic', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.minBibliographic = minBibliographic;

    /**
     * @module ember-preprints
     * @submodule helpers
     */

    /**
     * minBibliographic helper - used to determine if the user should be able to update bibliographic
     * info of a particular contributor.  False if user is trying to toggle the bibliographic
     * attribute of the sole bibliographic contributor.
     *
     * @class minBibliographic
     * @param {Object} contrib contributor that you intend to modify bibliographic information
     * @param {Array} contributors list of all contributors on the preprint
     * @return {Boolean} Does updating this contributor leave minimum number of bibliographic contributors?
     */

    function minBibliographic(params /*, hash*/) {
        var _params = _slicedToArray(params, 2);

        var contrib = _params[0];
        var contributors = _params[1];

        var numBib = 0;
        contributors.forEach(function (contributor) {
            if (contributor.get('bibliographic')) {
                numBib++;
            }
        });
        if (numBib === 1 && contrib.get('bibliographic')) {
            return false;
        } else {
            return true;
        }
    }

    exports['default'] = _ember['default'].Helper.helper(minBibliographic);
});
define('collections/helpers/mixed-grid-layout', ['exports', 'ember', 'ember-collection/layouts/mixed-grid'], function (exports, _ember, _emberCollectionLayoutsMixedGrid) {
  exports['default'] = _ember['default'].Helper.helper(function (params, hash) {
    return new _emberCollectionLayoutsMixedGrid['default'](params[0]);
  });
});
define('collections/helpers/moment-calendar', ['exports', 'ember', 'collections/config/environment', 'ember-moment/helpers/moment-calendar'], function (exports, _ember, _collectionsConfigEnvironment, _emberMomentHelpersMomentCalendar) {
  exports['default'] = _emberMomentHelpersMomentCalendar['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_collectionsConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('collections/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('collections/helpers/moment-format', ['exports', 'ember', 'collections/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _collectionsConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_collectionsConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('collections/helpers/moment-from-now', ['exports', 'ember', 'collections/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _collectionsConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_collectionsConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('collections/helpers/moment-to-now', ['exports', 'ember', 'collections/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _collectionsConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_collectionsConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('collections/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/now', ['exports', 'ember-moment/helpers/now'], function (exports, _emberMomentHelpersNow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersNow['default'];
    }
  });
});
define('collections/helpers/number-format', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.numberFormat = numberFormat;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
    * numberFormat helper. Transforms 3500 into 3,500 for example, if in US English locale.
    *
    * @class numberFormat.
    * @param {Integer} element
    * @return {String} Return formatted string.
    */

  function numberFormat(params /*, hash*/) {
    var _params = _slicedToArray(params, 1);

    var number = _params[0];

    return number.toLocaleString();
  }

  exports['default'] = _ember['default'].Helper.helper(numberFormat);
});
define('collections/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('collections/helpers/percentage-columns-layout', ['exports', 'ember', 'ember-collection/layouts/percentage-columns'], function (exports, _ember, _emberCollectionLayoutsPercentageColumns) {
  exports['default'] = _ember['default'].Helper.helper(function (params, hash) {
    return new _emberCollectionLayoutsPercentageColumns['default'](params[0], params[1], params[2]);
  });
});
define('collections/helpers/permission-map', ['exports', 'ember', 'ember-osf/const/permissions'], function (exports, _ember, _emberOsfConstPermissions) {
  exports.permissionMap = permissionMap;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * permissionMap helper.  Maps short form of the contributor's permissions
   * passed in params to the long form.
   *
   * @class permissionMap
   * @param {String} permission Short form of permission
   * @return {String} permission Long form of permission
   */

  function permissionMap(params /*, hash*/) {
    var map = {};
    for (var i = 0; i < _emberOsfConstPermissions.permissionSelector.length; i++) {
      map[_emberOsfConstPermissions.permissionSelector[i].value] = _emberOsfConstPermissions.permissionSelector[i].text;
    }
    var permission = params[0];
    return map[permission];
  }

  exports['default'] = _ember['default'].Helper.helper(permissionMap);
});
define('collections/helpers/permission-to-remove-contributor', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.permissionToRemoveContributor = permissionToRemoveContributor;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * permissionToRemoveContributor helper.  Checks to see if user has proper permissions
   * to remove contributor.  The user must be an admin and cannot remove herself.
   * The project cannot be a registration.
   *
   * @class permissionToRemoveContributor
   * @param {Object} contributor Contributor you wish to remove.
   * @param {Object} currentUser Current logged in user.
   * @param {Boolean} isAdmin Whether current user is a preprint admin
   * @param {Object} node The preprint itself.
   * @return {Boolean} Does current user have permission to remove this particular contributor?
   */

  function permissionToRemoveContributor(params /*, hash*/) {
    var _params = _slicedToArray(params, 4);

    var contributor = _params[0];
    var currentUser = _params[1];
    var isAdmin = _params[2];
    var node = _params[3];

    var currentUserId = currentUser.get('currentUserId') || currentUser.get('id');
    var removeSelf = contributor.get('userId') === currentUserId;
    var isRegistration = null;
    if (node) {
      isRegistration = node.get('registration');
    }
    return !removeSelf && isAdmin && !isRegistration;
  }

  exports['default'] = _ember['default'].Helper.helper(permissionToRemoveContributor);
});
define('collections/helpers/permission-to-remove-contributors', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.permissionToRemoveContributor = permissionToRemoveContributor;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * permissionToRemoveContributor helper.  Checks to see if user has proper permissions
   * to remove contributor.  The user must be an admin and cannot remove herself.
   * The project cannot be a registration.
   *
   * @class permissionToRemoveContributor
   * @param {Object} contributor Contributor you wish to remove.
   * @param {Object} currentUser Current logged in user.
   * @param {Boolean} isAdmin Whether current user is a preprint admin
   * @param {Object} node The preprint itself.
   * @return {Boolean} Does current user have permission to remove this particular contributor?
   */

  function permissionToRemoveContributor(params /*, hash*/) {
    var _params = _slicedToArray(params, 4);

    var contributor = _params[0];
    var currentUser = _params[1];
    var isAdmin = _params[2];
    var node = _params[3];

    var currentUserId = currentUser.get('currentUserId') || currentUser.get('id');
    var removeSelf = contributor.get('userId') === currentUserId;
    var isRegistration = null;
    if (node) {
      isRegistration = node.get('registration');
    }
    return !removeSelf && isAdmin && !isRegistration;
  }

  exports['default'] = _ember['default'].Helper.helper(permissionToRemoveContributor);
});
define('collections/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('collections/helpers/read-path', ['exports', 'ember-bootstrap/helpers/read-path'], function (exports, _emberBootstrapHelpersReadPath) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapHelpersReadPath['default'];
    }
  });
  Object.defineProperty(exports, 'readPath', {
    enumerable: true,
    get: function get() {
      return _emberBootstrapHelpersReadPath.readPath;
    }
  });
});
define('collections/helpers/route-prefix', ['exports', 'ember'], function (exports, _ember) {

    /**
     * @module ember-preprints
     * @submodule helpers
     */

    /**
     * Needed for link-to for branded routing to get the correct route path
     *
     * @class route-prefix
     */
    exports['default'] = _ember['default'].Helper.extend({
        theme: _ember['default'].inject.service(),

        onSubRouteChange: _ember['default'].observer('theme.isSubRoute', function () {
            this.recompute();
        }),

        compute: function compute(params) {
            var route = params.join('');

            return this.get('theme.isSubRoute') ? 'provider.' + route : route;
        }
    });
});
define('collections/helpers/safe-markup', ['exports', 'ember'], function (exports, _ember) {
  exports.safeMarkup = safeMarkup;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
    * DO NOT USE THIS HELPER ON USER-ENTERED TEXT!!!
    * safeMarkup helper. Returns a string that will not be HTML escaped by Handlebars.
    *
    * @class safe-markup
    * @param {string} string
    * @return {Object} Returns Handlebars.SafeString
    */

  function safeMarkup(params /*, hash*/) {
    return _ember['default'].String.htmlSafe(params.join(''));
  }

  exports['default'] = _ember['default'].Helper.helper(safeMarkup);
});
define('collections/helpers/share-detail-url', ['exports', 'ember-osf/helpers/share-detail-url'], function (exports, _emberOsfHelpersShareDetailUrl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersShareDetailUrl['default'];
    }
  });
  Object.defineProperty(exports, 'shareDetailURL', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersShareDetailUrl.shareDetailURL;
    }
  });
});
define('collections/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('collections/helpers/slice-array', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.sliceArray = sliceArray;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * sliceArray - returns shallow copy of portion of array
   *
   * @class sliceArray
   * @param {Array} array
   * @param {Integer} startIndex
   * @param {Integer} stopIndex
   * @return {Array} sliced array
   */

  function sliceArray(params /*, hash*/) {
    var _params = _slicedToArray(params, 3);

    var array = _params[0];
    var start = _params[1];
    var finish = _params[2];

    return array.slice(start, finish);
  }

  exports['default'] = _ember['default'].Helper.helper(sliceArray);
});
define('collections/helpers/sort-option-display', ['exports', 'ember-osf/helpers/sort-option-display'], function (exports, _emberOsfHelpersSortOptionDisplay) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersSortOptionDisplay['default'];
    }
  });
  Object.defineProperty(exports, 'sortOptionDisplay', {
    enumerable: true,
    get: function get() {
      return _emberOsfHelpersSortOptionDisplay.sortOptionDisplay;
    }
  });
});
define('collections/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('collections/helpers/user-is-contributor', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.userIsContributor = userIsContributor;

  /**
   * @module ember-preprints
   * @submodule helpers
   */

  /**
   * userIsContributor - takes in a user and the list of all preprint contributors.
   * Returns true if the user is in the list of preprint contributors.
   *
   * @class userIsContributor
   * @param {Object} user User returned in search results.
   * @param {Array} contributors List of all contributors on the preprint.
   * @return {Boolean} Is the user a current contributor on the preprint?
   */

  function userIsContributor(params /*, hash*/) {
    var _params = _slicedToArray(params, 2);

    var user = _params[0];
    var contributors = _params[1];

    var userIds = contributors.map(function (contrib) {
      return contrib.get('userId');
    });
    return userIds.indexOf(user.id) > -1;
  }

  exports['default'] = _ember['default'].Helper.helper(userIsContributor);
});
define('collections/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('collections/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'collections/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _collectionsConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_collectionsConfigEnvironment['default'].APP.name, _collectionsConfigEnvironment['default'].APP.version)
  };
});
define("collections/initializers/bread-crumbs", ["exports"], function (exports) {
  exports["default"] = {
    name: "ember-breadcrumbs",
    initialize: function initialize() {
      var application = arguments[1] || arguments[0];
      application.inject("component:bread-crumbs", "router", "router:main");
      application.inject("component:bread-crumbs", "applicationController", "controller:application");
    }
  };
});
define('collections/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('collections/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('collections/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/index'], function (exports, _emberDataSetupContainer, _emberDataIndex) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.Controller.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define('collections/initializers/ember-faker', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize() /* container, application */{
    // application.inject('route', 'foo', 'service:foo');
  }

  ;

  exports['default'] = {
    name: 'ember-faker',
    initialize: initialize
  };
});
define("collections/initializers/ember-i18n", ["exports", "collections/instance-initializers/ember-i18n"], function (exports, _collectionsInstanceInitializersEmberI18n) {
  exports["default"] = {
    name: _collectionsInstanceInitializersEmberI18n["default"].name,

    initialize: function initialize() {
      var application = arguments[1] || arguments[0]; // depending on Ember version
      if (application.instanceInitializer) {
        return;
      }

      _collectionsInstanceInitializersEmberI18n["default"].initialize(application);
    }
  };
});
define('collections/initializers/ember-simple-auth', ['exports', 'ember', 'collections/config/environment', 'ember-simple-auth/configuration', 'ember-simple-auth/initializers/setup-session', 'ember-simple-auth/initializers/setup-session-service'], function (exports, _ember, _collectionsConfigEnvironment, _emberSimpleAuthConfiguration, _emberSimpleAuthInitializersSetupSession, _emberSimpleAuthInitializersSetupSessionService) {
  exports['default'] = {
    name: 'ember-simple-auth',
    initialize: function initialize(registry) {
      var config = _collectionsConfigEnvironment['default']['ember-simple-auth'] || {};
      config.baseURL = _collectionsConfigEnvironment['default'].baseURL;
      _emberSimpleAuthConfiguration['default'].load(config);

      (0, _emberSimpleAuthInitializersSetupSession['default'])(registry);
      (0, _emberSimpleAuthInitializersSetupSessionService['default'])(registry);
    }
  };
});
define('collections/initializers/export-application-global', ['exports', 'ember', 'collections/config/environment'], function (exports, _ember, _collectionsConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_collectionsConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _collectionsConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_collectionsConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('collections/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('collections/initializers/load-bootstrap-config', ['exports', 'collections/config/environment', 'ember-bootstrap/config'], function (exports, _collectionsConfigEnvironment, _emberBootstrapConfig) {
  exports.initialize = initialize;

  function initialize() /* container, application */{
    _emberBootstrapConfig['default'].load(_collectionsConfigEnvironment['default']['ember-bootstrap'] || {});
  }

  exports['default'] = {
    name: 'load-bootstrap-config',
    initialize: initialize
  };
});
define('collections/initializers/modals-container', ['exports', 'ember-bootstrap/initializers/modals-container'], function (exports, _emberBootstrapInitializersModalsContainer) {
  exports['default'] = _emberBootstrapInitializersModalsContainer['default'];
});
define('collections/initializers/promise', ['exports', 'ember'], function (exports, _ember) {
  exports.initialize = initialize;

  function initialize() {
    window.Promise = _ember['default'].RSVP.Promise;
  }

  exports['default'] = {
    name: 'promise',
    initialize: initialize
  };
});
define('collections/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: function initialize() {}
  };
});
define('collections/initializers/toastr', ['exports', 'ember-toastr/initializers/toastr', 'collections/config/environment'], function (exports, _emberToastrInitializersToastr, _collectionsConfigEnvironment) {

  var toastrOptions = {
    closeButton: true,
    debug: false,
    newestOnTop: true,
    progressBar: true,
    positionClass: 'toast-top-right',
    preventDuplicates: true,
    onclick: null,
    showDuration: '300',
    hideDuration: '1000',
    timeOut: '4000',
    extendedTimeOut: '1000',
    showEasing: 'swing',
    hideEasing: 'linear',
    showMethod: 'fadeIn',
    hideMethod: 'fadeOut'
  };
  var config = _collectionsConfigEnvironment['default']['ember-toastr'] || {
    injectAs: 'toast',
    toastrOptions: toastrOptions
  };

  exports['default'] = {
    name: 'ember-toastr',
    initialize: function initialize() {
      // support 1.x and 2.x
      var application = arguments[1] || arguments[0];

      if (!config.toastrOptions) {
        config.toastrOptions = toastrOptions;
      }

      if (!config.injectAs) {
        config.injectAs = 'toast';
      }

      (0, _emberToastrInitializersToastr.initialize)(application, config);
    }
  };
});
define('collections/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('collections/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define("collections/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define("collections/instance-initializers/ember-i18n", ["exports", "ember", "ember-i18n/stream", "ember-i18n/legacy-helper", "collections/config/environment"], function (exports, _ember, _emberI18nStream, _emberI18nLegacyHelper, _collectionsConfigEnvironment) {
  exports["default"] = {
    name: 'ember-i18n',

    initialize: function initialize(appOrAppInstance) {
      if (_emberI18nLegacyHelper["default"] != null) {
        (function () {
          // Used for Ember < 1.13
          var i18n = appOrAppInstance.container.lookup('service:i18n');

          i18n.localeStream = new _emberI18nStream["default"](function () {
            return i18n.get('locale');
          });

          _ember["default"].addObserver(i18n, 'locale', i18n, function () {
            this.localeStream.value(); // force the stream to be dirty
            this.localeStream.notify();
          });

          _ember["default"].HTMLBars._registerHelper('t', _emberI18nLegacyHelper["default"]);
        })();
      }
    }
  };
});
define('collections/instance-initializers/ember-osf', ['exports', 'ember-osf/instance-initializers/ember-osf'], function (exports, _emberOsfInstanceInitializersEmberOsf) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfInstanceInitializersEmberOsf['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberOsfInstanceInitializersEmberOsf.initialize;
    }
  });
});
define('collections/instance-initializers/ember-simple-auth', ['exports', 'ember-simple-auth/instance-initializers/setup-session-restoration'], function (exports, _emberSimpleAuthInstanceInitializersSetupSessionRestoration) {
  exports['default'] = {
    name: 'ember-simple-auth',
    initialize: function initialize(instance) {
      (0, _emberSimpleAuthInstanceInitializersSetupSessionRestoration['default'])(instance);
    }
  };
});
define("collections/locales/en/config", ["exports"], function (exports) {
  // Ember-I18n includes configuration for common locales. Most users
  // can safely delete this file. Use it if you need to override behavior
  // for a locale or define behavior for a locale that Ember-I18n
  // doesn't know about.
  exports["default"] = {
    rtl: false
    //
    // pluralForm: function(count) {
    //   if (count === 0) { return 'zero'; }
    //   if (count === 1) { return 'one'; }
    //   if (count === 2) { return 'two'; }
    //   if (count < 5) { return 'few'; }
    //   if (count >= 5) { return 'many'; }
    //   return 'other';
    // }
  };
});
define('collections/locales/en/translations', ['exports'], function (exports) {
    var preprints = 'Preprints';
    var brand = 'OSF ' + preprints;
    var arxiv_trademark_license = 'arXiv is a trademark of Cornell University, used under license.';

    exports['default'] = {
        global: {
            share: 'Share',
            complete: 'Complete',
            cancel: 'Cancel',
            discard: 'Discard changes',
            back: 'Back',
            prev: 'Prev',
            next: 'Next',
            none: 'None',
            abstract: 'Abstract',
            doi: 'DOI',
            tags: 'Tags',
            search: 'Search',
            preprints: preprints,
            brand: brand,
            brand_name: 'OSF',
            provider_brand: '{{name}} ' + preprints,
            add_preprint: 'Add a preprint',
            title: 'Title',
            search_preprints: 'Search preprints...',
            added_on: 'Added on',
            add: 'Add',
            restart: 'Restart',
            no_results_found: 'No results found.',
            authors: 'Authors',
            convert_project: 'The preprint will be organized in the current project',
            convert_component: 'The preprint will be organized in the current component',
            copy_inside_project: 'The preprint will be organized in a new component',
            open_science_framework: 'Open Science Framework',
            license: 'License'
        },
        application: {
            separator: ' | '
        },
        content: {
            header: {
                last_edited: 'Last edited'
            },
            share: {
                download: 'Download',
                downloads: 'Downloads',
                download_file: 'Download file',
                download_preprint: 'Download preprint'
            },
            see_more: 'See more',
            see_less: 'See less',
            version: 'Version',
            article_doi: 'Article DOI',
            citations: 'Citations',
            disciplines: 'Disciplines',
            project_button: {
                paragraph: 'The project for this paper is available on the OSF.',
                button: 'Visit project',
                edit_preprint: 'Edit preprint'
            },
            orphan_preprint: 'The user has removed this file.',
            private_preprint_warning: 'This Preprint is private. Make it discoverable by making',
            'public': 'public'
        },
        discover: {
            search: {
                heading: 'Preprint Archive Search',
                paragraph: 'powered by',
                partner: 'Partner Repositories',
                placeholder: 'Search preprints...'
            },
            sort_by: 'Sort by',
            sort_newest_oldest: 'Modified Date (newest to oldest)',
            sort_oldest_newest: 'Modified Date (oldest to newest)',
            modified_on: 'Modified on',
            relevance: 'Relevance',
            main: {
                active_filters: {
                    heading: 'Active Filters',
                    button: 'Clear filters'
                },
                refine: 'Refine your search by',
                providers: 'Providers',
                subject: 'Subject',
                box: {
                    paragraph: 'Do you want to add your own research as a preprint?',
                    button: 'Add your preprint'
                },
                results: {
                    of: 'of',
                    no_results: 'Try broadening your search terms'
                },
                otherRepositories: 'Other preprint repositories'
            }
        },
        index: {
            header: {
                title: {
                    paragraph: 'The <span class="f-w-lg">open</span> preprint repository network'
                },
                powered_by: 'Powered by ' + brand,
                search: '{{count}} searchable preprints',
                or: 'or',
                as_of: 'as of',
                example: 'See an example'
            },
            subjects: {
                heading: 'Browse <small>by subject</small>'
            },
            services: {
                top: {
                    heading: 'Preprint Services',
                    paragraph: 'Leading preprint service providers use this open source infrastructure to support their communities.'
                },
                bottom: {
                    p1: 'Create your own branded preprint servers backed by the OSF.',
                    div: {
                        line1: 'Check out the',
                        linkText1: 'open source code',
                        line2: 'and the',
                        linkText2: 'requirements and road map',
                        line3: '. Input welcome!'
                    },
                    contact: 'Contact us'
                }
            },
            advisory: {
                heading: 'Advisory Group',
                paragraph: 'Our advisory group includes leaders in preprints and scholarly communication'
            }
        },
        // Error pages
        'page-not-found': { // 404
            heading: 'Page not found',
            message: 'The page you were looking for is not found on the {{brand}} service.'
        },
        'page-forbidden': { // 403
            heading: 'Forbidden',
            message: 'User has restricted access to this page.'
        },
        'resource-deleted': { // 410
            heading: 'Resource deleted',
            message: 'User has deleted this content.'
        },
        submit: {
            add_heading: 'Add Preprint',
            edit_heading: 'Edit Preprint',
            body: {
                p_add: 'Follow these five easy steps to add your preprint to the {{name}} preprint repository.',
                p_edit: 'Edit your preprint sections below.',
                upload: 'Upload new preprint',
                connect: 'Connect preprint to existing OSF project',
                file: 'Preprint file',
                title: 'Preprint title',
                subjects_description: 'Select a discipline and subdiscipline, if relevant. Add more by clicking on a new discipline or subdiscipline.',
                remove_subject_aria: 'Remove subject',
                basics: {
                    doi: {
                        label: 'If published, DOI of associated journal article (optional)'
                    },
                    keywords: {
                        label: 'Keywords',
                        paragraph: 'Add keywords to increase discoverability of your preprint'
                    },
                    abstract: {
                        placeholder: 'Add a brief summary of your preprint'
                    },
                    license: {
                        apply_license_title: 'Apply this license to my OSF Project.',
                        apply_license_text: 'Selecting a license for your preprint does not automatically apply the license to your OSF project.'
                    }
                },
                authors: {
                    paragraph: 'Add preprint authors and order them appropriately. All changes to authors are saved immediately. Search looks for authors that have OSF accounts already. Unregistered users can be added and invited to join the preprint.'
                },
                submit: {
                    paragraph: {
                        line1: 'When you share this preprint, it will become publicly accessible via {{name}} Preprints. You will be unable to delete the preprint file, but you can update or modify it. This also creates an OSF project in case you would like to attach other content to your preprint such as supplementary materials, appendices, data, or protocols. If posting this preprint is your first exposure to the OSF, you will receive an email introducing OSF to you.',
                        line2: 'By clicking Share, you confirm that all Contributors agree with sharing this preprint, and that you have the right to share it.'
                    },
                    invalid: {
                        description: 'The following section(s) must be completed before sharing this preprint.',
                        discipline: 'Discipline',
                        basics: 'Basics',
                        upload: 'Upload'
                    }
                },
                update: {
                    paragraph: 'Edits to this preprint will update both the preprint and the OSF project and will become publicly accessible via {{name}} Preprints.'
                },
                save_continue: 'Save and continue'
            },
            could_not_update_title: 'Error updating title. Please try again.',
            error_copying_file: 'Error copying file; please try again.',
            error_accessing_parent_files: 'Error accessing parent files. Please try again.',
            could_not_create_component: 'Could not create component. Please try again.',
            abandoned_preprint_error: 'Error with abandoned preprint.',
            preprint_file_uploaded: 'Preprint file uploaded!',
            preprint_author_added: 'Preprint author added!',
            preprint_author_removed: 'Preprint author removed!',
            preprint_unregistered_author_added: 'Preprint unregistered author added!',
            error_adding_author: 'Could not add author. Please try again.',
            error_adding_unregistered_author: 'Could not add unregistered author. Please try again.',
            error_initiating_preprint: 'Could not initiate preprint. Please try again.',
            doi_error: 'Error saving DOI',
            basics_error: 'Error saving basics fields.',
            disciplines_error: 'Error saving discipline(s).',
            search_contributors_error: 'Could not perform search query.',
            error_completing_preprint: 'Error completing preprint.',
            error_saving_preprint: 'Could not save preprint; please try again later'
        },
        components: {
            'confirm-restart-submit-preprint': {
                title: 'Restart Preprint',
                body: 'Are you sure you want to restart this preprint? Your uploaded file and supplemental information will be deleted.'
            },
            'confirm-share-preprint': {
                title: 'Share Preprint',
                body: 'Once this preprint is made public, you should assume that it will always be public. Even if you delete it, search engines or others may access the files before you do so.'
            },
            'convert-or-copy': {
                organize_language_project: 'You can organize your preprint by storing the file in this project or in its own new component.  If you select ‘Make a new component’,\n            the preprint file will be stored in a new component inside this project.  If you select ‘Use the current project’, the preprint file will be stored in this project.\n            If you are unsure, select ‘Make a new component’.',
                organize_language_component: 'You can organize your preprint by storing the file in this component or in its own new component.  If you select ‘Make a new component’,\n            the preprint file will be stored in a new component inside this component.  If you select ‘Use the current component’, the preprint file will be stored in this component.\n            If you are unsure, select ‘Make a new component’.',
                copy: 'Make a new component',
                convert_project: 'Use the current project',
                convert_component: 'Use the current component',
                create_a_new_component: 'Create a new component',
                continue_with_this_project: 'Continue with this project',
                continue_with_this_component: 'Continue with this component',
                header_convert_confirmation_project: 'Your project details will be saved as you continue to work on this form.',
                header_convert_confirmation_component: 'Your component details will be saved as you continue to work on this form.',
                convert_confirmation_details_project: 'Changes you make on this page are saved immediately.  Create a new component under this project to avoid overwriting its details.',
                convert_confirmation_details_component: 'Changes you make on this page are saved immediately.  Create a new component under this component to avoid overwriting its details.'
            },
            'error-page': {
                email_message: 'If this should not have occurred and the issue persists, please report it to',
                go_to: 'Go to {{brand}}'
            },
            'file-uploader': {
                dropzone_message: 'Drop preprint file here to upload',
                title_placeholder: 'Enter preprint title',
                update_version: 'Update preprint file version.  File must have the same name as the original.',
                could_not_create_project: 'Could not create project. Please try again.',
                could_not_create_component: 'Could not create component. Please try again.',
                could_not_update_title: 'Could not update title. Please try again.',
                version_error: 'This is not a version of the current preprint file.',
                preprint_file_updated: 'Preprint file updated!',
                preprint_file_error: 'Could not set preprint file. Please try again.',
                file_exists_error: 'A file with that name already exists',
                upload_error: 'Upload Failed',
                dropzone_text_override: 'Click or drag another preprint file to replace'
            },
            'preprint-footer-branded': {
                twitter: 'Twitter',
                facebook: 'Facebook',
                instagram: 'Instagram',
                support: 'Support',
                contact: 'Contact'
            },
            'permission-language': {
                arxiv_trademark_license: arxiv_trademark_license,
                arxiv_non_endorsement: arxiv_trademark_license + ' This license should not be understood to indicate endorsement of content on {{provider}} by Cornell University or arXiv.',
                no_trademark: ''
            },
            'preprint-form-authors': {
                search: {
                    placeholder: 'Search by name'
                },
                unregistered_users: {
                    paragraph: 'Can\'t find the user you\'re looking for?',
                    button: 'Add author by email address'
                },
                results: 'Results',
                yourself: 'Yourself',
                already_added: 'Already added',
                add_email: 'Add author by email',
                authors: {
                    title: 'Author Information',
                    order_instructions: 'Drag and drop authors to change authorship order.',
                    name: 'Name',
                    permissions: 'Permissions',
                    permission_info: 'Permission Information',
                    citation: 'Citation',
                    in_citation: 'In citation',
                    citation_info: 'Citation Information',
                    parent_contributors: 'Add contributors from parent project',
                    remove_author: 'Remove author from authors list'
                },
                remove: 'Remove'
            },
            'preprint-form-body': {
                // Nothing to translate
            },
            'preprint-form-header': {
                changes_saved: 'Changes Saved!',
                file: 'Preprint file',
                title: 'Preprint title',
                location: 'Preprint location',
                click_edit: 'Click to Edit',
                name: {
                    Upload: 'Upload',
                    Discipline: 'Discipline',
                    Basics: 'Basics',
                    Authors: 'Authors',
                    Submit: 'Submit',
                    Update: 'Update',
                    choose_project: 'Choose Project',
                    choose_file: 'Choose File',
                    organize: 'Organize',
                    finalize_upload: 'Finalize Upload',
                    location_of_preprint: 'Preprint Location',
                    title_of_preprint: 'Preprint Title',
                    preprint_file: 'Preprint File'
                }
            },
            'preprint-form-project-select': {
                existing_project_selector: 'The list of projects appearing in the selector are projects and components for which you have admin access.  Registrations are not included here.',
                no_valid_existing_nodes: 'You have no available projects that can be converted into a preprint.  Go back to upload a new preprint.',
                upload_preprint: 'Upload preprint',
                select_existing_file: 'Select existing file as preprint',
                edit_preprint_title_project: 'Edit preprint title (will also become the name of the project)',
                edit_preprint_title_component: 'Edit preprint title (will also become the name of the component)',
                initiate_preprint_process: 'You have selected and organized your preprint file. Clicking "Save and continue" will immediately make changes to your OSF project. You will not be able to delete your Preprint file, but you will be able to update or modify it.',
                edit_organize_section: 'Edits to this preprint will update both the preprint and the OSF project.',
                admin_only: 'You must be the admin of this component to share it.  Please ask the admin of this project to make you an admin so you may share this component.'
            },
            'preprint-form-section': {
                // Nothing to translate
            },
            'preprint-navbar': {
                toggle: 'Toggle navigation'
            },
            'preprint-navbar-branded': {
                my_projects: 'My OSF Projects',
                headline: 'On the OSF'
            },
            'project-chooser': {
                file_upload_create: 'Upload a file and create an OSF project',
                provide_title: 'Please provide a title for your project',
                'continue': 'Continue',
                choose_project_component: 'Choose an existing project or component',
                file_upload_existing: 'Upload a file to an existing OSF project',
                choose_project: 'Choose project',
                file_choose_existing: 'Choose a file from an existing OSF project',
                choose_file: 'Choose file'
            },
            'search-preprints': {
                // Nothing to translate
            },
            'search-result': {
                // Nothing to translate
            },
            'share-popup': {
                tweet: 'Tweet',
                post_facebook: 'Post to Facebook',
                share_linkedin: 'Share on LinkedIn',
                send_email: 'Send in email'
            },
            'supplementary-file-browser': {
                primary: 'Primary'
            },
            'taxonomy-top-list': {
                // Nothing to translate
            },
            'taxonomy-tree': {
                // Nothing to translate
            },
            'unregistered-contributor-form': {
                full_name: 'Full Name',
                email: 'Email',
                paragraph: 'We will notify the user that they have been added to your preprint.'

            },
            'validated-input': {
                // Nothing to translate
            }
        }
    };
});
define('collections/locales/es/config', ['exports'], function (exports) {
  // Ember-I18n includes configuration for common locales. Most users
  // can safely delete this file. Use it if you need to override behavior
  // for a locale or define behavior for a locale that Ember-I18n
  // doesn't know about.
  exports['default'] = {
    rtl: false,

    pluralForm: function pluralForm(count) {
      if (count === 0) {
        return 'cero';
      }
      if (count === 1) {
        return 'uno/a';
      }
      if (count === 2) {
        return 'dos';
      }
      if (count < 5) {
        return 'algunos/as';
      }
      if (count >= 5) {
        return 'muchos/as';
      }
      return 'otros/as';
    }
  };
});
define('collections/locales/es/translations', ['exports'], function (exports) {
    var preprints = 'Preprints';
    var brand = 'OSF ' + preprints;
    var arxiv_trademark_license = 'arXiv is a trademark of Cornell University, used under license.';

    exports['default'] = {
        global: {
            share: 'Compartir',
            complete: 'Completar',
            cancel: 'Cancelar',
            discard: 'Descartar cambios',
            back: 'Volver',
            prev: 'Anterior',
            next: 'Siguiente',
            none: 'Ninguno/a',
            abstract: 'Resúmen',
            doi: 'DOI',
            tags: 'Tags',
            search: 'Buscar',
            preprints: preprints,
            brand: brand,
            brand_name: 'OSF',
            provider_brand: '{{name}} ' + preprints,
            add_preprint: 'Agregar un preprint',
            title: 'Título',
            search_preprints: 'Buscar preprints...',
            added_on: 'Agregado en',
            add: 'Agregar',
            restart: 'Reiniciar',
            no_results_found: 'No se encontraron resultados.',
            authors: 'Autores',
            convert_project: 'Los preprints seran reorganizados en el proyecto actual',
            convert_component: 'Los preprints seran reorganizados en el componente actual',
            copy_inside_project: 'Los preprints serán reorganizados en un nuevo componente',
            open_science_framework: 'Open Science Framework',
            license: 'Licencia'
        },
        application: {
            separator: ' | '
        },
        content: {
            header: {
                last_edited: 'Ultima edición'
            },
            share: {
                download: 'Descargar',
                downloads: 'Descargas',
                download_file: 'Descargar archivo',
                download_preprint: 'Descargar preprint'
            },
            see_more: 'ver más',
            see_less: 'ver menos',
            version: 'Versión',
            article_doi: 'DOI del artículo',
            citations: 'Citas',
            disciplines: 'Disciplinas',
            project_button: {
                paragraph: 'El proyecto para este artículo está disponible en el OSF.',
                button: 'Visitar el proyecto',
                edit_preprint: 'Editar el preprint'
            },
            orphan_preprint: 'El usuario ha removido este archivo.',
            private_preprint_warning: 'Este preprint es privado. Hága que pueda ser descubierto haciéndolo',
            'public': 'público'
        },
        discover: {
            search: {
                heading: 'Búsqueda en el Archivo de Preprints',
                paragraph: 'utilizando',
                partner: 'Repositorios Asociados',
                placeholder: 'Buscar preprints...'
            },
            sort_by: 'Ordenar por',
            sort_newest_oldest: 'Fecha modificada (reciente al más antiguo)',
            sort_oldest_newest: 'Fecha modificada (antiguo al más reciente)',
            modified_on: 'Modificada por',
            relevance: 'Pertinencia',
            main: {
                active_filters: {
                    heading: 'Activar Filtros',
                    button: 'Limpiar filtros'
                },
                refine: 'Clarificar la búsqueda',
                providers: 'Proveedores',
                subject: 'Asunto',
                box: {
                    paragraph: 'Quiere agregar su propio trabajo de investigación como un preprint?',
                    button: 'Agregar su preprint'
                },
                results: {
                    of: 'de',
                    no_results: 'Trate de ampliar sus términos de búsqueda'
                },
                otherRepositories: 'Otros repositorios de preprint'
            }
        },
        index: {
            header: {
                title: {
                    paragraph: 'La red <span class="f-w-lg">abierta</span> de repositorios de preprints'
                },
                powered_by: 'Utilizando ' + brand,
                search: '{{count}} preprints que pueden ser buscados',
                as_of: 'al día de',
                example: 'Ver un ejemplo',
                or: 'o'
            },
            subjects: {
                heading: 'Ver un catálogo <small>por tema</small>'
            },
            services: {
                top: {
                    heading: 'Servicios de Preprint',
                    paragraph: 'Los servicios proveedores de preprints usan esta infrastructura open source para darle soporte a sus comunidades.'
                },
                bottom: {
                    p1: 'Crée su propio servidor de preprints bajo su propia marca utilizando OSF.',
                    div: {
                        line1: 'Chequee el',
                        linkText1: 'código open source',
                        line2: 'y los',
                        linkText2: 'requerimientos y planes de trabajo',
                        line3: '. Feedback bienvenido!'
                    },
                    contact: 'Contáctenos'
                }
            },
            advisory: {
                heading: 'Grupo Consejero',
                paragraph: 'Nuestro grupo consejero incluye líderes en preprints y comunicación académica'
            }
        },
        'page-not-found': {
            heading: 'Página no encontrada',
            message: 'La página que Ud. está buscando no se encuentra en el servicio de {{brand}}.',
            go_to: 'Ir a {{brand}}'
        },
        'page-forbidden': {
            heading: 'No permitido',
            message: 'El/La usuario/a ha restringido el acceso a esta página.',
            go_to: 'Ir a {{brand}}'
        },
        'resource-deleted': {
            heading: 'Recurso borrado',
            message: 'El/La usuario/a ha borrado este contenido.',
            go_to: 'Ir a {{brand}}'
        },
        submit: {
            add_heading: 'Agregar un Preprint',
            edit_heading: 'Editar un Preprint',
            body: {
                p_add: 'Siga estos simples cinco pasos para agregar su preprint al repositorio de preprints de {{name}}.',
                p_edit: 'Edite las secciones de su preprint más abajo.',
                upload: 'Suba su nuevo preprint',
                connect: 'Conecte el preprint a un proyecto ya existente de la OSF',
                file: 'Archivo preprint',
                title: 'Título del preprint',
                subjects_description: 'Seleccionar una disciplina y una subdisciplina, si fuera relevante. Agregar otras haciendo click en nueva disciplina o subdisciplina.',
                remove_subject_aria: 'Elimine disciplina',
                basics: {
                    doi: {
                        label: 'Si ha sido publicado, DOI del artículo asociado (opcional)'
                    },
                    keywords: {
                        label: 'Palabras clave',
                        paragraph: 'Agregar palabras claves para mejorar las chances de que su preprint sea descubierto'
                    },
                    abstract: {
                        placeholder: 'Agregar un pequeño resúmen a su preprint'
                    },
                    license: {
                        apply_license_title: 'Utilizar esta licencia a mi Proyecto OSF.',
                        apply_license_text: 'Selectionar una licencia para su preprint no aplica de manera automática la licencia a su proyecto OSF.'
                    }
                },
                authors: {
                    paragraph: 'Agregar autores del preprint y ordenarlos de manera apropiada. Todos los cambios a los autores son grabados de manera inmediata. Buscar encuentra autores que ya tienen cuentas de OSF accounts already. Usuarios sin registro puede ser agregados e invitados a unirse al preprint.'
                },
                submit: {
                    paragraph: {
                        line1: 'Cuando Ud. comparta este preprint, estará disponible de manera inmediata vía {{name}} Preprints. No podrá borrar el archivo del preprint, pero puede actualizar o modificarlo. También create un proyecto OSF en caso de que quiera agregar contenido a su preprint como material suplementari, apendices, datos, o protocols. Si postear este preprint es su primera vez en el OSF, Ud. recibirá un email presentandole la OSF.',
                        line2: 'Haciendo clic en Compartir, Ud. confirma que todos colaboradores están de acuerdo en compartir esta preprint, y que tiene el derecho a compartirla. '
                    },
                    invalid: {
                        description: 'Las siguientes seccion(es) deben ser completadas antes de compartir su preprint.',
                        discipline: 'Disciplina',
                        basics: 'Campos básicos',
                        upload: 'Subir'
                    }
                },
                update: {
                    paragraph: 'Ediciones a este preprint serán actualizadas al preprint y al proyecto OSF de manera automática y estarán disponibles públicamente vía {{name}} Preprints.'
                },
                save_continue: 'Grabar y continuar'
            },
            could_not_update_title: 'Error al actualizar el título. Por favor, trate de nuevo.',
            error_copying_file: 'Error al copiar el archivo; por favor, trate de nuevo.',
            error_accessing_parent_files: 'Error al acceder archivos del padre. Por favor, trate de nuevo.',
            could_not_create_component: 'No pudo crearse un componente. Por favor, trate de nuevo.',
            abandoned_preprint_error: 'Error al abandonar el preprint.',
            preprint_file_uploaded: 'Archivo preprint cargado!',
            preprint_author_added: 'Autor de preprint añadido/a!',
            preprint_author_removed: 'Autor de preprint eliminado/a!',
            preprint_unregistered_author_added: 'Autor de preprint no registrado/a añadido/a!',
            error_adding_author: 'No puedo añadir autor. Por favor, trate de nuevo.',
            error_adding_unregistered_author: 'No puedo añadir autor no registrado/a. Por favor, trate de nuevo.',
            error_initiating_preprint: 'No puedo inicializar el preprint. Por favor, trate de nuevo.',
            doi_error: 'Error al grabar el DOI',
            basics_error: 'Error al grabar campos básicos.',
            disciplines_error: 'Error al grabar disciplina(s).',
            search_contributors_error: 'No se pudo realizar la búsqueda.',
            error_completing_preprint: 'Error completando el preprint.',
            error_saving_preprint: 'No se pudo grabar el preprint; por favor, trate de nuevo'
        },
        components: {
            'confirm-restart-submit-preprint': {
                title: 'Volver a empezar el Preprint',
                body: 'Está seguro que desea volver a comenzar este preprint? Su archivo cargado e información suplementaria serán borrados.'
            },
            'confirm-share-preprint': {
                title: 'Compartir el Preprint',
                body: 'Una vez este preprint sea hecho públic, Ud. debe asumir que será siempre público. Aún si Ud. intenta borrarlo, los buscadores y otras personas pueden haber accedido a los archivos antes de que Ud. lo haga.'
            },
            'convert-or-copy': {
                organize_language_project: 'Ud. puede organizar su preprint preprint almacenando el archivo en este proyecto o en su propio componente nuevo.  Si selecciona ‘Crear un componente nuevo’,\n            el archivo del preprint será guardado en un componente nuevo dentro de este proyecto.  Si selecciona ‘Usar el proyecto actual’, el archivo del preprint será guardado en este proyecto.\n            Si no está seguro, seleccione ‘Crear un componente nuevo’.',
                organize_language_component: 'Ud. puede organizar su preprint guardándo el archivo en este componente o en su propio componente nuevo.  Si selecciona ‘Crear un nuevo componente’,\n            el archivo del preprint será guardado en un nuevo componente dentro de este proyecto.  Si selecciona ‘Usar el componente actual’, el archivo del preprint será guardado en este componente.\n            Si no está seguro, seleccione ‘Crear un componente nuevo’.',
                copy: 'Crear un componente nuevo',
                convert_project: 'Usar el proyecto actual',
                convert_component: 'Usar el componente actual',
                create_a_new_component: 'Crear un componente nuevo',
                continue_with_this_project: 'Continuar con este proyecto',
                continue_with_this_component: 'Continuar con este componente',
                header_convert_confirmation_project: 'Los detalles de su proyecto serán grabados mientras que continua trabajando en este formulario.',
                header_convert_confirmation_component: 'Los detalles de su componente serán grabados mientras que continua trabajando en este formulario.',
                convert_confirmation_details_project: 'Los cambios que Ud. haga en esta página serán grabados inmediatamente.  Cree un componente nuevo bajo este proyecto para evitar reescribir sus detalles.',
                convert_confirmation_details_component: 'Los cambios que Ud. haga en esta página serán grabados inmediatamente.  Cree un componente nuevo bajo este componente para evitar reescribir sus detalles.'
            },
            'file-uploader': {
                dropzone_message: 'Haga drag&drop un archivo del preprint que quiera cargar',
                title_placeholder: 'Entre el preprint del título',
                update_version: 'Actualizar la versión del archivo del preprint.  El archivo debe tener el mismo nombre que el original.',
                could_not_create_project: 'No se pudo crear el proyecto. Por favor, trate de nuevo.',
                could_not_create_component: 'No se pudo crear el componente. Por favor, trate de nuevo.',
                could_not_update_title: 'Could not update title. Por favor, trate de nuevo.',
                version_error: 'Esta no es una versión del archivo actual del preprint.',
                preprint_file_updated: 'Archivo del preprint actualizado!',
                preprint_file_error: 'No puedo actualizar el archivo del preprint. Por favor, trate de nuevo.',
                file_exists_error: 'Un archivo con ese nombre ya existe',
                upload_error: 'La carga falló',
                dropzone_text_override: 'Haga click o drag&drop con otro archivo del preprint para ser reemplazado'
            },
            'preprint-footer-branded': {
                twitter: 'Twitter',
                facebook: 'Facebook',
                instagram: 'Instagram',
                support: 'Soporte',
                contact: 'Contacto'
            },
            'preprint-form-authors': {
                search: {
                    placeholder: 'Búsqueda por nombre'
                },
                unregistered_users: {
                    paragraph: '¿No puede encontrar al usuario/a que está buscando?',
                    button: 'Agregar un/a autor/a por dirección de email'
                },
                results: 'Resultados',
                yourself: 'Ud. mismo',
                already_added: 'Ya ha sido agregado',
                add_email: 'Agregue al autor/a por email',
                authors: {
                    title: 'Información sobre el Autor',
                    order_instructions: 'Drag&drop los autores para cambiar el orden de autoría.',
                    name: 'Nombre',
                    permissions: 'Permisos',
                    permission_info: 'Información de Permisos',
                    citation: 'Citas',
                    in_citation: 'En citas',
                    citation_info: 'Información de Citas',
                    parent_contributors: 'Agregar colaboradores del proyecto padre',
                    remove_author: 'Elimina al autor/a'
                },
                remove: 'Eliminar'
            },
            'preprint-form-body': {
                // Nothing to translate
            },
            'preprint-form-header': {
                changes_saved: 'Cambios Guardados!',
                file: 'Archivo preprint',
                title: 'Título del preprint',
                location: 'Ubicación preprint',
                click_edit: 'Cliquear para Editar',
                name: {
                    Upload: 'Cargar',
                    Discipline: 'Disciplinas',
                    Basics: 'Campos Básicos',
                    Authors: 'Autores',
                    Submit: 'Enviar',
                    Update: 'Actualizar',
                    choose_project: 'Elegir un Proyecto',
                    choose_file: 'Elegir un Archivo',
                    organize: 'Organizar',
                    finalize_upload: 'Finalizar la Carga',
                    location_of_preprint: 'Ubicación del Preprint',
                    title_of_preprint: 'Título del Preprint',
                    preprint_file: 'Archivo del Preprint'
                }
            },
            'preprint-form-project-select': {
                existing_project_selector: 'La lista de proyectos que aparecen en el seleccionador de proyectos y componentes para los cuales tiene acceso como administrador.  Registros no están incluídos.',
                no_valid_existing_nodes: 'No tiene proyectos disponibles que puedan ser convertidos en preprints.  Vuelva atrás para cargar un nuevo preprint.',
                upload_preprint: 'Cargar un preprint',
                select_existing_file: 'Seleccionar un archivo existente como un preprint',
                edit_preprint_title_project: 'Editar el título de un preprint (se transformará también en el nombre del proyecto)',
                edit_preprint_title_component: 'Editar el titulo del preprint (se transformará también en el nombre del componente)',
                initiate_preprint_process: 'Ud. ha seleccionado y organizado un archivo del preprint. Cliquear "Grabar y continuar" para cambiar su proyecto OSF de manera inmediata. No podrá borrar el archivo de preprint, pero Ud. podrá actualizarlo y modificarlo.',
                edit_organize_section: 'Cambios a este preprint actualizaran tanto el preprint como el proyecto OSF.',
                admin_only: 'Ud. debe ser el administrador de este componente para compartirlo.  Por favor, pídale al administrador de este proyecto que lo haga también administrador para que pueda compartir este componente.'
            },
            'preprint-form-section': {
                // Nothing to translate
            },
            'preprint-navbar': {
                toggle: 'Cambiar la navegación'
            },
            'preprint-navbar-branded': {
                my_projects: 'Mis Proyectos OSF',
                headline: 'En la OSF'
            },
            'project-chooser': {
                file_upload_create: 'Cargar un archivo y crear un proyecto OSF',
                provide_title: 'Por favor, provea el título para su proyecto',
                'continue': 'Continuar',
                choose_project_component: 'Elija un proyecto o componente existente',
                file_upload_existing: 'Cargar un archivo a un proyect OSF existente',
                choose_project: 'Elegir proyecto',
                file_choose_existing: 'Elegir un archivo desde un proyecto OSF existente',
                choose_file: 'Elegir archivo'
            },
            'search-preprints': {
                // Nothing to translate
            },
            'search-result': {
                // Nothing to translate
            },
            'error-page': {
                email_message: 'Si ésto no debería haber ocurrido y el problema persiste, por favor reportarlo a',
                go_to: 'Ir a {{brand}}'
            },
            'share-popup': {
                tweet: 'Tuitear',
                post_facebook: 'Publicar en Facebook',
                share_linkedin: 'Compartir en LinkedIn',
                send_email: 'Enviar por email'
            },
            'supplementary-file-browser': {
                primary: 'Primario'
            },
            'permission-language': {
                arxiv_trademark_license: arxiv_trademark_license,
                arxiv_non_endorsement: arxiv_trademark_license + ' This license should not be understood to indicate endorsement of content on {{provider}} by Cornell University or arXiv.',
                no_trademark: ''
            },
            'taxonomy-top-list': {
                // Nothing to translate
            },
            'taxonomy-tree': {
                // Nothing to translate
            },
            'unregistered-contributor-form': {
                full_name: 'Nombre Completo',
                email: 'Email',
                paragraph: 'Le notificaremos al usuario que han sido agregados al preprint.'

            },
            'validated-input': {
                // Nothing to translate
            }
        }
    };
});
define('collections/metrics-adapters/keen', ['exports', 'ember-osf/metrics-adapters/keen'], function (exports, _emberOsfMetricsAdaptersKeen) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfMetricsAdaptersKeen['default'];
    }
  });
});
define('collections/mixins/commentable', ['exports', 'ember-osf/mixins/commentable'], function (exports, _emberOsfMixinsCommentable) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfMixinsCommentable['default'];
    }
  });
});
define('collections/mixins/host-app-name', ['exports', 'ember-osf/mixins/host-app-name'], function (exports, _emberOsfMixinsHostAppName) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfMixinsHostAppName['default'];
    }
  });
});
define('collections/mixins/keen-tracker', ['exports', 'npm:js-md5', 'ember-get-config', 'npm:lodash/get', 'npm:js-cookie', 'npm:keen-tracking', 'ember-osf/mixins/keen-tracker'], function (exports, _npmJsMd5, _emberGetConfig, _npmLodashGet, _npmJsCookie, _npmKeenTracking, _emberOsfMixinsKeenTracker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfMixinsKeenTracker['default'];
    }
  });
});
/* eslint-disable no-unused-vars */
// This helps ember-browserify find npm modules in ember-cli addons
define('collections/mixins/osf-token-login-controller', ['exports', 'ember-osf/mixins/osf-token-login-controller'], function (exports, _emberOsfMixinsOsfTokenLoginController) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfMixinsOsfTokenLoginController['default'];
    }
  });
});
define('collections/mixins/osf-token-login-route', ['exports', 'ember-osf/mixins/osf-token-login-route'], function (exports, _emberOsfMixinsOsfTokenLoginRoute) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfMixinsOsfTokenLoginRoute['default'];
    }
  });
});
define('collections/models/citation', ['exports', 'ember-osf/models/citation'], function (exports, _emberOsfModelsCitation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsCitation['default'];
    }
  });
});
define('collections/models/collection', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        title: _emberData['default'].attr('string'),
        description: _emberData['default'].attr('string'),
        tags: _emberData['default'].attr('string'),
        createdBy: _emberData['default'].belongsTo('user'),
        dateCreated: _emberData['default'].attr('date'),
        dateUpdated: _emberData['default'].attr('date'),
        settings: _emberData['default'].attr('object'),
        groups: _emberData['default'].hasMany('group'),
        items: _emberData['default'].hasMany('items')
    });
});
define('collections/models/comment-report', ['exports', 'ember-osf/models/comment-report'], function (exports, _emberOsfModelsCommentReport) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsCommentReport['default'];
    }
  });
});
define('collections/models/comment', ['exports', 'ember-osf/models/comment'], function (exports, _emberOsfModelsComment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsComment['default'];
    }
  });
});
define('collections/models/contributor', ['exports', 'ember-osf/models/contributor'], function (exports, _emberOsfModelsContributor) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsContributor['default'];
    }
  });
});
define('collections/models/draft-registration', ['exports', 'ember-osf/models/draft-registration'], function (exports, _emberOsfModelsDraftRegistration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsDraftRegistration['default'];
    }
  });
});
define('collections/models/file-provider', ['exports', 'ember-osf/models/file-provider'], function (exports, _emberOsfModelsFileProvider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsFileProvider['default'];
    }
  });
});
define('collections/models/file-version', ['exports', 'ember-osf/models/file-version'], function (exports, _emberOsfModelsFileVersion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsFileVersion['default'];
    }
  });
});
define('collections/models/file', ['exports', 'ember-osf/models/file'], function (exports, _emberOsfModelsFile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsFile['default'];
    }
  });
});
define('collections/models/group', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        title: _emberData['default'].attr('string'),
        description: _emberData['default'].attr('string'),
        collection: _emberData['default'].belongsTo('collection'),
        tags: _emberData['default'].attr('string'),
        createdBy: _emberData['default'].belongsTo('user'),
        dateCreated: _emberData['default'].attr('date'),
        dateUpdated: _emberData['default'].attr('date'),
        items: _emberData['default'].hasMany('item')
    });
});
define('collections/models/institution', ['exports', 'ember-osf/models/institution'], function (exports, _emberOsfModelsInstitution) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsInstitution['default'];
    }
  });
});
define('collections/models/item', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        source_id: _emberData['default'].attr('string'),
        title: _emberData['default'].attr('string'),
        type: _emberData['default'].attr('string'),
        status: _emberData['default'].attr('string'),
        url: _emberData['default'].attr('string'),
        collection: _emberData['default'].belongsTo('collection'),
        group: _emberData['default'].belongsTo('group'),
        createdBy: _emberData['default'].belongsTo('user'),
        metadata: _emberData['default'].attr('string'),
        dateAdded: _emberData['default'].attr('date'),
        dateUpdated: _emberData['default'].attr('date')
    });
});
define('collections/models/license', ['exports', 'ember-osf/models/license'], function (exports, _emberOsfModelsLicense) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsLicense['default'];
    }
  });
});
define('collections/models/log', ['exports', 'ember-osf/models/log'], function (exports, _emberOsfModelsLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsLog['default'];
    }
  });
});
define('collections/models/metaschema', ['exports', 'ember-osf/models/metaschema'], function (exports, _emberOsfModelsMetaschema) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsMetaschema['default'];
    }
  });
});
define('collections/models/node-link', ['exports', 'ember-osf/models/node-link'], function (exports, _emberOsfModelsNodeLink) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsNodeLink['default'];
    }
  });
});
define('collections/models/node', ['exports', 'ember-osf/models/node'], function (exports, _emberOsfModelsNode) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsNode['default'];
    }
  });
});
define('collections/models/osf-model', ['exports', 'ember-osf/models/osf-model'], function (exports, _emberOsfModelsOsfModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsOsfModel['default'];
    }
  });
});
define('collections/models/preprint-provider', ['exports', 'ember-osf/models/preprint-provider'], function (exports, _emberOsfModelsPreprintProvider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsPreprintProvider['default'];
    }
  });
});
define('collections/models/preprint', ['exports', 'ember-osf/models/preprint'], function (exports, _emberOsfModelsPreprint) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsPreprint['default'];
    }
  });
});
define('collections/models/registration', ['exports', 'ember-osf/models/registration'], function (exports, _emberOsfModelsRegistration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsRegistration['default'];
    }
  });
});
define('collections/models/taxonomy', ['exports', 'ember-osf/models/taxonomy'], function (exports, _emberOsfModelsTaxonomy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsTaxonomy['default'];
    }
  });
});
define('collections/models/user', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        username: _emberData['default'].attr('string'),
        firstName: _emberData['default'].attr('string'),
        lastName: _emberData['default'].attr('string'),
        fullName: _emberData['default'].attr('string')
    });
});
define('collections/models/wiki', ['exports', 'ember-osf/models/wiki'], function (exports, _emberOsfModelsWiki) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfModelsWiki['default'];
    }
  });
});
define('collections/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('collections/router', ['exports', 'ember', 'collections/config/environment'], function (exports, _ember, _collectionsConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _collectionsConfigEnvironment['default'].locationType,
    rootURL: _collectionsConfigEnvironment['default'].rootURL
  });

  Router.map(function () {
    this.route('index', { path: '/' });
    this.route('collection', { path: 'collection/:collection_id' }, function () {
      this.route('item', { path: 'item/:item_id' });
      this.route('group', { path: 'group/:group_id' }, function () {
        this.route('item', { path: 'item/:group_item_id' });
      });
      this.route('add');
      this.route('search');
      this.route('browse');
      this.route('edit');
    });
    this.route('create');
    this.route('not-found', { path: '/*path' });
  });

  exports['default'] = Router;
});
define('collections/routes/application', ['exports', 'ember', 'ember-simple-auth/mixins/application-route-mixin'], function (exports, _ember, _emberSimpleAuthMixinsApplicationRouteMixin) {
    exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsApplicationRouteMixin['default'], {
        session: _ember['default'].inject.service(),

        beforeModel: function beforeModel() {
            var session = this.get('session');
            if (!session.get('isAuthenticated')) {
                session.authenticate('authenticator:osf-token', false)['catch'](function () {});
            }
        }
    });
});
define('collections/routes/collection', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            var _this = this;

            return this.store.findRecord('collection', params.collection_id).then(function (data) {
                return data;
            })['catch'](function () {
                _this.transitionTo('/not-found');
            });
        }
    });
});
define('collections/routes/collection/add', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        panelActions: _ember['default'].inject.service('panelActions'),
        model: function model() {
            var collectionSettings = this.modelFor('collection').get('settings');
            var collectionType = JSON.parse(collectionSettings).collectionType;
            var preprintForm = {
                submissionFormType: collectionType,
                submission_form_name: 'Preprints Submission Form',
                sections: [{ name: 'upload', divId: 'preprint-form-upload', param: 'uploadSection' }, { name: 'disciplines', divId: 'preprint-form-subjects', param: 'disciplinesSection' }, { name: 'basic info', divId: 'preprint-form-basics', param: 'basicInfoSection' }, { name: 'authors', divId: 'preprint-form-authors', param: 'authorsSection' }, { name: 'submit', divId: 'preprint-form-submit', param: 'submitVutton' }],
                initialParameters: {
                    uploadSection: {
                        state: ['unsaved', 'editing'],
                        allowOpen: true,
                        open: true,
                        showValidationIndicator: true,
                        value: undefined,
                        isSectionSaved: false
                    },
                    disciplinesSection: {
                        state: ['disabled'],
                        allowOpen: true,
                        open: false,
                        showValidationIndicator: true,
                        value: undefined,
                        isSectionSaved: false
                    },
                    basicInfoSection: {
                        state: ['disabled'],
                        allowOpen: true,
                        open: false,
                        showValidationIndicator: true,
                        value: undefined,
                        isSectionSaved: false
                    },
                    authorsSection: {
                        state: ['disabled'],
                        allowOpen: true,
                        open: false,
                        showValidationIndicator: true,
                        value: undefined,
                        isSectionSaved: false
                    },
                    submitButton: {
                        state: ['disabled'],
                        allowOpen: true,
                        open: false,
                        showValidationIndicator: false,
                        value: undefined,
                        isSectionSaved: false
                    },
                    preprintFileUploadWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    preprintTitleWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    preprintFileUrl: {
                        state: ['undefined'],
                        value: undefined
                    },
                    saveUploadSectionWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    subjectPickerWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    basicInfoWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    authorsWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    fileUrlMissingNotice: {
                        state: ['undefined'],
                        value: undefined
                    },
                    editUploadSectionWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    saveAuthorsSectionWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    editAuthorsSectionWidget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    submitButtonWidget: {
                        state: ['undefined'],
                        value: undefined
                    }
                },
                initialWidgets: [],
                actions: [{
                    id: '2bf24381-75f5-4e73-aa6e-ec25b3300600',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'file-uploader',
                        description: 'Choose the preprint file to upload',
                        section: 'upload'
                    },
                    parameters: {
                        fileName: 'preprintFileName',
                        fileData: 'preprintFileData'
                    },
                    outputParameter: 'preprintFileUploadWidget',
                    conditions: [{
                        all: [{
                            parameter: 'uploadSection',
                            state: 'unsaved'
                        }, {
                            parameter: 'preprintFileUploadWidget',
                            state: 'undefined'
                        }]
                    }]
                }, {
                    id: 'c6e5a8ff-e1e9-49fe-8ee4-7d12d2fb56dd',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'text-field',
                        description: 'Enter the title for this preprint',
                        section: 'upload'
                    },
                    parameters: {
                        output: 'preprintFileName'
                    },
                    outputParameter: 'preprintTitleWidget',
                    conditions: [{
                        all: [{
                            parameter: 'preprintTitleWidget',
                            state: 'undefined'
                        }, {
                            parameter: 'preprintFileData',
                            state: 'defined'
                        }, {
                            parameter: 'uploadSection',
                            state: 'editing'
                        }]
                    }]
                }, {
                    id: '99e941be-3fae-41d7-b481-89764a1561b6',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'button-widget',
                        description: 'Edit this section',
                        section: 'upload',
                        cssClasses: ['section-submit-button'],
                        actionId: '28fe8c59-fab7-4a0c-8e7e-38a5176ae34d'
                    },
                    parameters: {
                        outputParameter: 'uploadSection'
                    },
                    outputParameter: 'editUploadSectionWidget',
                    conditions: [{
                        all: [{
                            parameter: 'editUploadSectionWidget',
                            state: 'undefined'
                        }, {
                            parameter: 'preprintFileData',
                            state: 'defined'
                        }, {
                            parameter: 'preprintFileName',
                            state: 'defined'
                        }, {
                            parameter: 'uploadSection',
                            state: 'closed'
                        }]
                    }]
                }, {
                    id: '28fe8c59-fab7-4a0c-8e7e-38a5176ae34d',
                    type: 'saveParameter',
                    args: {
                        updatedParameter: {
                            state: ['editing', 'saved']
                        }
                    },
                    parameters: {
                        parameter: 'uploadSection'
                    }
                }, {
                    id: '5d46c582-7335-43cc-bf15-fb30ba52a39c',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'button-widget',
                        description: 'Save and continue',
                        section: 'upload',
                        cssClasses: ['section-submit-button'],
                        actionId: '5db3456b-cef7-4c87-bb60-16a04ee89bad'
                    },
                    parameters: {
                        parameter: 'preprintFileUrl'
                    },
                    outputParameter: 'saveUploadSectionWidget',
                    conditions: [{
                        all: [{
                            parameter: 'saveUploadSectionWidget',
                            state: 'undefined'
                        }, {
                            parameter: 'preprintFileData',
                            state: 'defined'
                        }, {
                            parameter: 'preprintFileName',
                            state: 'defined'
                        }, {
                            parameter: 'uploadSection',
                            state: 'editing'
                        }]
                    }]
                }, {
                    id: '5db3456b-cef7-4c87-bb60-16a04ee89bad',
                    type: 'uploadFile',
                    parameters: {
                        fileData: 'preprintFileData',
                        fileName: 'preprintFileName',
                        node: 'preprintNode'
                    },
                    outputParameter: 'preprintFileUrl',
                    then: 'cec150d6-0396-49a9-b6cb-8ab375b2d09e'
                }, {
                    id: 'cec150d6-0396-49a9-b6cb-8ab375b2d09e',
                    type: 'saveParameter',
                    args: {
                        updatedParameter: {
                            state: ['closed', 'saved']
                        }
                    },
                    parameters: {
                        parameter: 'uploadSection'
                    },
                    then: 'cdefb5db-2486-4466-8c1c-5d24ffd7e6ab'
                }, {
                    id: 'cdefb5db-2486-4466-8c1c-5d24ffd7e6ab',
                    type: 'closeSection',
                    args: {
                        sectionName: 'upload'
                    },
                    then: '7fb38183-d1f2-41a2-aef5-1bc99743762e'
                }, {
                    id: '7fb38183-d1f2-41a2-aef5-1bc99743762e',
                    type: 'disableWidget',
                    parameters: {
                        widgetObject: 'saveUploadSectionWidget'
                    },
                    then: '6606b697-9a53-4fc7-aab6-898a2904c579'
                }, {
                    id: '6606b697-9a53-4fc7-aab6-898a2904c579',
                    type: 'openSection',
                    args: {
                        sectionName: 'disciplines'
                    }
                }, {
                    id: '2726a848-6240-4e24-8492-6aab673f1f6d',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'subject-picker',
                        description: 'Save this section',
                        section: 'disciplines',
                        actionId: 'a11388e0-c3b2-488a-a100-60de46172adf'
                    },
                    parameters: {
                        subjects: 'selectedSubjects'
                    },
                    outputParameter: 'subjectPickerWidget',
                    conditions: [{
                        all: [{
                            parameter: 'subjectPickerWidget',
                            state: 'undefined'
                        }]
                    }]
                }, {
                    id: 'a11388e0-c3b2-488a-a100-60de46172adf',
                    type: 'openSection',
                    args: {
                        sectionName: 'basic info'
                    },
                    then: '39cb9157-617e-404a-ac1d-77e9d273b478'
                }, {
                    id: '39cb9157-617e-404a-ac1d-77e9d273b478',
                    type: 'closeSection',
                    args: {
                        sectionName: 'disciplines'
                    }
                }, {
                    id: '9ac6cdb6-1ae4-47ad-b25b-7f7f8d627265',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'preprint-basics',
                        description: 'License and other things',
                        section: 'basic info',
                        actionId: '886cde3c-9e25-4950-b02f-832fad8923cc'
                    },
                    parameters: {
                        basicInfo: 'basicInfo'
                    },
                    outputParameter: 'basicInfoWidget',
                    conditions: [{
                        all: [{
                            parameter: 'basicInfoWidget',
                            state: 'undefined'
                        }]
                    }]
                }, {
                    id: '886cde3c-9e25-4950-b02f-832fad8923cc',
                    type: 'closeSection',
                    args: {
                        sectionName: 'basic info'
                    },
                    then: '1eaae481-1a80-4dfe-9c12-1a7f7383c1a7'
                }, {
                    id: '1eaae481-1a80-4dfe-9c12-1a7f7383c1a7',
                    type: 'openSection',
                    args: {
                        sectionName: 'authors'
                    }
                }, {
                    id: 'd82139b4-4975-4410-92d1-ab0dee02b4e8',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'paragraph-display',
                        description: 'The preprint\'s file has not yet been uploaded.',
                        section: 'submit'
                    },
                    parameters: {
                        outputParameter: 'null'
                    },
                    outputParameter: 'fileUrlMissingNotice',
                    conditions: [{
                        all: [{
                            parameter: 'fileUrlMissingNotice',
                            state: 'undefined'
                        }, {
                            parameter: 'preprintFileUrl',
                            state: 'undefined'
                        }]
                    }]
                }, {
                    id: 'a91f560f-b8c1-4087-be3b-3490c2861f24',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'preprint-form-authors',
                        description: 'Add and manage authors',
                        section: 'authors'
                    },
                    parameters: {
                        authorsList: 'authorsList'
                    },
                    outputParameter: 'authorsWidget',
                    conditions: [{
                        all: [{
                            parameter: 'authorsWidget',
                            state: 'undefined'
                        }]
                    }]
                }, {
                    id: '7231cc6f-b861-439e-a628-a01fe0a20587',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'button-widget',
                        cssClasses: ['section-submit-button'],
                        description: 'Save and continue',
                        section: 'authors',
                        actionId: '60d11fd0-c2da-4fdd-9d08-0310aa17a3e4'
                    },
                    parameters: {
                        parameter: 'authorsSection'
                    },
                    outputParameter: 'saveAuthorsSectionWidget',
                    conditions: [{
                        all: [{
                            parameter: 'saveAuthorsSectionWidget',
                            state: 'undefined'
                        }, {
                            parameter: 'authorsSection',
                            state: 'editing'
                        }]
                    }]
                }, {
                    id: '60d11fd0-c2da-4fdd-9d08-0310aa17a3e4',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'button-widget',
                        description: 'Edit this section',
                        cssClasses: ['section-submit-button'],
                        section: 'authors',
                        actionId: '0dcc508a-9946-437a-a0b2-73c7f88aa2fe'
                    },
                    parameters: {
                        parameter: 'authorsSection'
                    },
                    outputParameter: 'editAuthorsSectionWidget',
                    then: '3f5d1d8e-a01c-4c22-bbba-c7d5ad385a88'
                }, {
                    id: '3f5d1d8e-a01c-4c22-bbba-c7d5ad385a88',
                    type: 'deleteWidget',
                    parameters: {
                        widgetObject: 'saveAuthorsSectionWidget'
                    },
                    then: '18db45c2-029e-4c0a-b662-69a6a14d3d3d'
                }, {
                    id: '18db45c2-029e-4c0a-b662-69a6a14d3d3d',
                    type: 'closeSection',
                    args: {
                        sectionName: 'authors'
                    }
                }, {
                    id: '0dcc508a-9946-437a-a0b2-73c7f88aa2fe',
                    type: 'openSection',
                    args: {
                        sectionName: 'authors'
                    },
                    then: '1cf0323c-72c5-4344-b238-f3d8c5bd7b63'
                }, {
                    id: '1cf0323c-72c5-4344-b238-f3d8c5bd7b63',
                    type: 'deleteWidget',
                    parameters: {
                        widgetObject: 'editAuthorsSectionWidget'
                    },
                    then: '7231cc6f-b861-439e-a628-a01fe0a20587'
                }, {
                    id: '1d4bcab7-c454-450d-95c5-113d89121f89',
                    type: 'createWidget',
                    args: {
                        widgetComponent: 'button-widget',
                        section: 'submit',
                        description: 'Submit',
                        disabled: 'true',
                        cssClasses: ['submit_button', 'btn-lg', 'btn-success'],
                        actionId: 'afa2e526-ea5f-47f7-a99d-459536e24fd1'
                    },
                    conditions: [{
                        all: [{
                            parameter: 'submitButtonWidget',
                            state: 'undefined'
                        }]
                    }],
                    outputParameter: 'submitButtonWidget'
                }, {
                    id: 'afa2e526-ea5f-47f7-a99d-459536e24fd1',
                    type: 'browserAlert',
                    args: {
                        alertString: 'FORM SUBMITTTED'
                    }
                }, {
                    id: 'a58fcc41-ed0c-43ab-a765-d83cb36f6a9b',
                    type: 'saveParameter',
                    args: {
                        updatedParameter: {
                            state: ['enabled']
                        }
                    },
                    parameters: {
                        parameter: 'submitButton'
                    },
                    conditions: [{
                        all: [{
                            parameter: 'preprintFileData',
                            state: 'defined'
                        }, {
                            parameter: 'submitButton',
                            state: 'disabled'
                        }, {
                            parameter: 'preprintFileUrl',
                            state: 'defined'
                        }, {
                            parameter: 'selectedSubjects',
                            state: 'defined'
                        }, {
                            parameter: 'basicInfo',
                            state: 'defined'
                        }, {
                            parameter: 'authorsList',
                            state: 'defined'
                        }]
                    }],
                    outputParameter: 'null',
                    then: '60edeef7-189c-4189-b44a-157b79ce88ef'
                }, {
                    id: '60edeef7-189c-4189-b44a-157b79ce88ef',
                    type: 'enableWidget',
                    parameters: {
                        widgetObject: 'submitButtonWidget'
                    }
                }]
            };
            var meetingForm = {
                submissionFormType: collectionType,
                submission_form_name: 'Meeting Submission Form',
                sections: [{ name: 'upload', divId: 'preprint-form-upload', param: 'upload_section' }, { name: 'authors', divId: 'preprint-form-authors', param: 'authors_section' }, { name: 'submit', divId: 'preprint-form-submit', param: 'submit_button' }],
                initial_parameters: {
                    upload_section: {
                        state: ['unsaved', 'editing'],
                        allowOpen: true,
                        open: true,
                        showValidationIndicator: true,
                        value: undefined
                    },
                    authors_section: {
                        state: ['disabled'],
                        allowOpen: true,
                        open: false,
                        showValidationIndicator: true,
                        value: undefined
                    },
                    submit_button: {
                        state: ['disabled'],
                        allowOpen: true,
                        open: false,
                        showValidationIndicator: false,
                        value: undefined
                    },
                    preprint_file_upload_widget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    preprint_title_widget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    save_upload_section_widget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    authors_widget: {
                        state: ['undefined'],
                        value: undefined
                    },
                    edit_upload_section_widget: {
                        state: ['undefined'],
                        value: undefined
                    }
                },
                initial_widgets: [],
                actions: [{
                    type: 'create_widget',
                    args: {
                        widget_component: 'file-uploader',
                        description: 'Choose the preprint file to upload',
                        section: 'upload'
                    },
                    parameters: {
                        output_parameter: 'preprint_file_data'
                    },
                    output_parameter: 'preprint_file_upload_widget',
                    conditions: [{
                        all: [{
                            parameter: 'upload_section',
                            state: 'unsaved'
                        }, {
                            parameter: 'preprint_file_upload_widget',
                            state: 'undefined'
                        }]
                    }]
                }, {
                    type: 'create_widget',
                    args: {
                        widget_component: 'text-field',
                        description: 'Enter the title for this meeting.',
                        section: 'upload'
                    },
                    parameters: {
                        output_parameter: 'preprint_file_name'
                    },
                    output_parameter: 'preprint_title_widget',
                    conditions: [{
                        all: [{
                            parameter: 'preprint_title_widget',
                            state: 'undefined'
                        }, {
                            parameter: 'preprint_file_data',
                            state: 'defined'
                        }, {
                            parameter: 'upload_section',
                            state: 'editing'
                        }]
                    }]
                }, {
                    type: 'create_widget',
                    args: {
                        widget_component: 'button-widget',
                        description: 'Edit this section',
                        section: 'upload',
                        action_id: '28fe8c59-fab7-4a0c-8e7e-38a5176ae34d'
                    },
                    parameters: {
                        output_parameter: 'upload_section'
                    },
                    output_parameter: 'edit_upload_section_widget',
                    conditions: [{
                        all: [{
                            parameter: 'edit_upload_section_widget',
                            state: 'undefined'
                        }, {
                            parameter: 'preprint_file_data',
                            state: 'defined'
                        }, {
                            parameter: 'preprint_file_name',
                            state: 'defined'
                        }, {
                            parameter: 'upload_section',
                            state: 'closed'
                        }]
                    }]
                }, {
                    id: '28fe8c59-fab7-4a0c-8e7e-38a5176ae34d',
                    type: 'saveParameter',
                    args: {
                        updated_parameter: {
                            state: ['editing', 'saved']
                        }
                    },
                    parameters: {
                        parameter: 'upload_section'
                    }
                }, {
                    type: 'create_widget',
                    args: {
                        widget_component: 'button-widget',
                        description: 'Save this section',
                        section: 'upload',
                        action_id: '5db3456b-cef7-4c87-bb60-16a04ee89bad'
                    },
                    parameters: {
                        output_parameter: 'preprint_file_url'
                    },
                    output_parameter: 'save_upload_section_widget',
                    conditions: [{
                        all: [{
                            parameter: 'save_upload_section_widget',
                            state: 'undefined'
                        }, {
                            parameter: 'preprint_file_data',
                            state: 'defined'
                        }, {
                            parameter: 'preprint_file_name',
                            state: 'defined'
                        }, {
                            parameter: 'upload_section',
                            state: 'editing'
                        }]
                    }]
                }, {
                    id: '5db3456b-cef7-4c87-bb60-16a04ee89bad',
                    type: 'upload_file',
                    parameters: {
                        file_data: 'preprint_file_data',
                        file_name: 'preprint_file_name',
                        node: 'preprint_node'
                    },
                    output_parameter: 'preprint_file_url',
                    then: 'cec150d6-0396-49a9-b6cb-8ab375b2d09e'
                }, {
                    id: 'cec150d6-0396-49a9-b6cb-8ab375b2d09e',
                    type: 'saveParameter',
                    args: {
                        updated_parameter: {
                            state: ['closed', 'saved']
                        }
                    },
                    parameters: {
                        parameter: 'upload_section'
                    }
                }, {
                    type: 'delete_widget',
                    parameters: {
                        widget_object: 'save_upload_section_widget'
                    },
                    output_parameter: 'null',
                    conitions: [{
                        all: [{
                            parameter: 'upload_section',
                            state: 'saved'
                        }]
                    }]
                }, {
                    type: 'delete_widget',
                    parameters: {
                        widget_object: 'save_upload_section_widget'
                    },
                    output_parameter: 'null',
                    conditions: [{
                        all: [{
                            parameter: 'preprint_file_url',
                            state: 'defined'
                        }]
                    }]
                }, {
                    type: 'create_widget',
                    args: {
                        widget_component: 'preprint-form-authors',
                        description: 'Add and manage authors',
                        section: 'authors'
                    },
                    parameters: {
                        output_parameter: 'authors_list'
                    },
                    output_parameter: 'authors_widget',
                    conditions: [{
                        all: [{
                            parameter: 'authors_widget',
                            state: 'undefined'
                        }]
                    }]
                }]

            };
            debugger;
            if (collectionType === 'Preprint') {
                return preprintForm;
            } else if (collectionType === 'Meeting') {
                return meetingForm;
            }
        },

        setupController: function setupController(controller, model) {
            // Set up state defined on the model.
            controller.set('model', model);
            controller.set('sections', model.sections);
            controller.set('parameters', model.initialParameters);

            // Hydrate actions in preperation for engine ignition
            var actions = model.actions.map(controller.hydrateAction.bind(controller));
            controller.set('formActions', actions);

            // Start the engine.
            controller.updateState.call(controller, actions);
        }

    });
});
define('collections/routes/collection/browse', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/routes/collection/edit', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/routes/collection/group', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.get('store').findRecord('group', params.group_id).then(function (group) {
                return group;
            });
        }
    });
});
define('collections/routes/collection/group/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/routes/collection/group/item', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.store.findRecord('item', params['group_item_id']);
        }
    });
});
define('collections/routes/collection/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/routes/collection/item', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.store.findRecord('item', params['item_id']);
        }
    });
});
define('collections/routes/collection/search', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/routes/create', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/routes/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.query('collection', {
                page: 1
            }).then(function (data) {
                return data;
            });
        }
    });
});
define('collections/routes/not-found', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('collections/serializers/application', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].JSONAPISerializer.extend({
        keyForAttribute: function keyForAttribute(key) {
            return _ember['default'].String.underscore(key);
        },
        keyForRelationship: function keyForRelationship(key) {
            return _ember['default'].String.underscore(key);
        }
    });
});
define('collections/serializers/citation', ['exports', 'ember-osf/serializers/citation'], function (exports, _emberOsfSerializersCitation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersCitation['default'];
    }
  });
});
define('collections/serializers/collection', ['exports', 'collections/serializers/application'], function (exports, _collectionsSerializersApplication) {
  exports['default'] = _collectionsSerializersApplication['default'].extend({});
});
define('collections/serializers/comment-report', ['exports', 'ember-osf/serializers/comment-report'], function (exports, _emberOsfSerializersCommentReport) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersCommentReport['default'];
    }
  });
});
define('collections/serializers/comment', ['exports', 'ember-osf/serializers/comment'], function (exports, _emberOsfSerializersComment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersComment['default'];
    }
  });
});
define('collections/serializers/contributor', ['exports', 'ember-osf/serializers/contributor'], function (exports, _emberOsfSerializersContributor) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersContributor['default'];
    }
  });
});
define('collections/serializers/draft-registration', ['exports', 'ember-osf/serializers/draft-registration'], function (exports, _emberOsfSerializersDraftRegistration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersDraftRegistration['default'];
    }
  });
});
define('collections/serializers/file-contents', ['exports', 'ember-osf/serializers/file-contents'], function (exports, _emberOsfSerializersFileContents) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersFileContents['default'];
    }
  });
});
define('collections/serializers/file-provider', ['exports', 'ember-osf/serializers/file-provider'], function (exports, _emberOsfSerializersFileProvider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersFileProvider['default'];
    }
  });
});
define('collections/serializers/file-version', ['exports', 'ember-osf/serializers/file-version'], function (exports, _emberOsfSerializersFileVersion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersFileVersion['default'];
    }
  });
});
define('collections/serializers/file', ['exports', 'ember-osf/serializers/file'], function (exports, _emberOsfSerializersFile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersFile['default'];
    }
  });
});
define('collections/serializers/institution', ['exports', 'ember-osf/serializers/institution'], function (exports, _emberOsfSerializersInstitution) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersInstitution['default'];
    }
  });
});
define('collections/serializers/item', ['exports', 'collections/serializers/application'], function (exports, _collectionsSerializersApplication) {
  exports['default'] = _collectionsSerializersApplication['default'].extend({});
});
define('collections/serializers/license', ['exports', 'ember-osf/serializers/license'], function (exports, _emberOsfSerializersLicense) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersLicense['default'];
    }
  });
});
define('collections/serializers/linked-node', ['exports', 'ember-osf/serializers/linked-node'], function (exports, _emberOsfSerializersLinkedNode) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersLinkedNode['default'];
    }
  });
});
define('collections/serializers/metaschema', ['exports', 'ember-osf/serializers/metaschema'], function (exports, _emberOsfSerializersMetaschema) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersMetaschema['default'];
    }
  });
});
define('collections/serializers/node-link', ['exports', 'ember-osf/serializers/node-link'], function (exports, _emberOsfSerializersNodeLink) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersNodeLink['default'];
    }
  });
});
define('collections/serializers/node', ['exports', 'ember-osf/serializers/node'], function (exports, _emberOsfSerializersNode) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersNode['default'];
    }
  });
});
define('collections/serializers/osf-serializer', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersOsfSerializer['default'];
    }
  });
});
define('collections/serializers/preprint-provider', ['exports', 'ember-osf/serializers/preprint-provider'], function (exports, _emberOsfSerializersPreprintProvider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersPreprintProvider['default'];
    }
  });
});
define('collections/serializers/preprint', ['exports', 'ember-osf/serializers/preprint'], function (exports, _emberOsfSerializersPreprint) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersPreprint['default'];
    }
  });
});
define('collections/serializers/registration', ['exports', 'ember-osf/serializers/registration'], function (exports, _emberOsfSerializersRegistration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersRegistration['default'];
    }
  });
});
define('collections/serializers/taxonomy', ['exports', 'ember-osf/serializers/taxonomy'], function (exports, _emberOsfSerializersTaxonomy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersTaxonomy['default'];
    }
  });
});
define('collections/serializers/user', ['exports', 'collections/serializers/application'], function (exports, _collectionsSerializersApplication) {
  exports['default'] = _collectionsSerializersApplication['default'].extend({});
});
define('collections/serializers/wiki', ['exports', 'ember-osf/serializers/wiki'], function (exports, _emberOsfSerializersWiki) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfSerializersWiki['default'];
    }
  });
});
define('collections/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('collections/services/current-user', ['exports', 'ember-osf/services/current-user'], function (exports, _emberOsfServicesCurrentUser) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfServicesCurrentUser['default'];
    }
  });
});
define('collections/services/dependency-checker', ['exports', 'ember', 'collections/config/environment'], function (exports, _ember, _collectionsConfigEnvironment) {
  exports['default'] = _ember['default'].Service.extend({

    hasLiquidFire: _ember['default'].computed('', function () {
      return _collectionsConfigEnvironment['default']['ember-collapsible-panel'].hasLiquidFire;
    })

  });
});
define('collections/services/file-manager', ['exports', 'ember-osf/services/file-manager'], function (exports, _emberOsfServicesFileManager) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfServicesFileManager['default'];
    }
  });
});
define('collections/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('collections/services/moment', ['exports', 'ember', 'collections/config/environment', 'ember-moment/services/moment'], function (exports, _ember, _collectionsConfigEnvironment, _emberMomentServicesMoment) {
  exports['default'] = _emberMomentServicesMoment['default'].extend({
    defaultFormat: _ember['default'].get(_collectionsConfigEnvironment['default'], 'moment.outputFormat')
  });
});
define('collections/services/panel-actions', ['exports', 'ember-collapsible-panel/services/panel-actions'], function (exports, _emberCollapsiblePanelServicesPanelActions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCollapsiblePanelServicesPanelActions['default'];
    }
  });
});
define('collections/services/session', ['exports', 'ember-simple-auth/services/session'], function (exports, _emberSimpleAuthServicesSession) {
  exports['default'] = _emberSimpleAuthServicesSession['default'];
});
define('collections/services/theme', ['exports', 'ember', 'ember-get-config'], function (exports, _ember, _emberGetConfig) {

    /**
     * @module ember-preprints
     * @submodule services
     */

    /**
     * Detects preprint provider and allows you to inject that provider's theme into parts of your application
     *
     * @class theme
     * @extends Ember.Service
     */
    exports['default'] = _ember['default'].Service.extend({
        store: _ember['default'].inject.service(),
        session: _ember['default'].inject.service(),

        // If we're using a provider domain
        isDomain: false,

        // The id of the current provider
        id: _emberGetConfig['default'].PREPRINTS.defaultProvider,

        currentLocation: null,

        // The provider object
        provider: _ember['default'].computed('id', function () {
            var id = this.get('id');

            if (!id) return;

            return this.get('store').findRecord('preprint-provider', id);
        }),

        // If we're using a branded provider
        isProvider: _ember['default'].computed('id', function () {
            return this.get('id') !== 'osf';
        }),

        // If we're using a branded provider and not under a branded domain (e.g. /preprints/<provider>)
        isSubRoute: _ember['default'].computed('isProvider', 'isDomain', function () {
            return this.get('isProvider') && !this.get('isDomain');
        }),

        pathPrefix: _ember['default'].computed('isProvider', 'isDomain', 'id', function () {
            var pathPrefix = '/';

            if (!this.get('isDomain')) {
                pathPrefix += 'preprints/';

                if (this.get('isProvider')) {
                    pathPrefix += this.get('id') + '/';
                }
            }

            return pathPrefix;
        }),

        // Needed for the content route
        guidPathPrefix: _ember['default'].computed('isSubRoute', 'id', function () {
            var pathPrefix = '/';

            if (this.get('isSubRoute')) {
                pathPrefix += 'preprints/' + this.get('id') + '/';
            }

            return pathPrefix;
        }),

        // The URL for the branded stylesheet
        stylesheet: _ember['default'].computed('id', function () {
            var id = this.get('id');

            if (!id) return;

            var prefix = this.get('isDomain') ? '' : '/preprints';
            var suffix = _emberGetConfig['default'].ASSET_SUFFIX ? '-' + _emberGetConfig['default'].ASSET_SUFFIX : '';
            return prefix + '/assets/css/' + id + suffix + '.css';
        }),

        // The logo object for social sharing
        logoSharing: _ember['default'].computed('id', function () {
            var id = this.get('id');

            var logo = _emberGetConfig['default'].PREPRINTS.providers.find(function (provider) {
                return provider.id === id;
            }).logoSharing;

            logo.path = '/preprints' + logo.path;

            return logo;
        }),

        // The url to redirect users to sign up to
        signupUrl: _ember['default'].computed('id', function () {
            var query = _ember['default'].$.param({
                campaign: this.get('id') + '-preprints',
                next: window.location.href
            });

            return _emberGetConfig['default'].OSF.url + 'register?' + query;
        }),

        redirectUrl: _ember['default'].computed('currentLocation', function () {
            return this.get('currentLocation');
        }),

        // The translation key for the provider's permission language
        permissionLanguage: _ember['default'].computed('id', function () {
            var id = this.get('id');

            return _emberGetConfig['default'].PREPRINTS.providers.find(function (provider) {
                return provider.id === id;
            }).permissionLanguage;
        })
    });
});
define('collections/services/toast', ['exports', 'ember-toastr/services/toast'], function (exports, _emberToastrServicesToast) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberToastrServicesToast['default'];
    }
  });
});
define('collections/session-stores/application', ['exports', 'ember-simple-auth/session-stores/adaptive'], function (exports, _emberSimpleAuthSessionStoresAdaptive) {
  exports['default'] = _emberSimpleAuthSessionStoresAdaptive['default'].extend();
});
define("collections/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "collections/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "coll-alert");
          var el2 = dom.createTextNode(" Collections demo requires signing in to an osf account. Sign in or sign up above. ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "collections/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "osf-navbar", [], ["loginAction", ["subexpr", "action", ["login"], [], ["loc", [null, [1, 25], [1, 41]]], 0, 0], "hideSearch", true], ["loc", [null, [1, 0], [1, 59]]], 0, 0], ["block", "unless", [["get", "session.isAuthenticated", ["loc", [null, [2, 10], [2, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [4, 11]]]], ["content", "outlet", ["loc", [null, [6, 0], [6, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/collection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "collection-nav", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 23], [1, 28]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 30]]], 0, 0], ["content", "outlet", ["loc", [null, [2, 0], [2, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/collection/add", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 20
            },
            "end": {
              "line": 17,
              "column": 20
            }
          },
          "moduleName": "collections/templates/collection/add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "add-website", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [16, 44], [16, 49]]], 0, 0, 0, 0]], [], [], 0, 0], "transition", ["subexpr", "action", ["transition"], [], ["loc", [null, [16, 61], [16, 82]]], 0, 0]], ["loc", [null, [16, 24], [16, 84]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 24,
                        "column": 36
                      },
                      "end": {
                        "line": 36,
                        "column": 36
                      }
                    },
                    "moduleName": "collections/templates/collection/add.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "component", [["get", "widget.widgetComponent", ["loc", [null, [25, 52], [25, 74]]], 0, 0, 0, 0]], ["saveParameter", ["subexpr", "action", [["get", "saveParameter", ["loc", [null, [26, 66], [26, 79]]], 0, 0, 0, 0]], [], ["loc", [null, [26, 58], [26, 80]]], 0, 0], "action", ["subexpr", "@mut", [["get", "widget.action", ["loc", [null, [27, 51], [27, 64]]], 0, 0, 0, 0]], [], [], 0, 0], "description", ["subexpr", "@mut", [["get", "widget.description", ["loc", [null, [28, 56], [28, 74]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "section.name", ["loc", [null, [29, 49], [29, 61]]], 0, 0, 0, 0]], [], [], 0, 0], "isOpen", ["subexpr", "@mut", [["get", "isOpen", ["loc", [null, [30, 51], [30, 57]]], 0, 0, 0, 0]], [], [], 0, 0], "isSectionSaved", ["subexpr", "@mut", [["get", "section.isSectionSaved", ["loc", [null, [31, 59], [31, 81]]], 0, 0, 0, 0]], [], [], 0, 0], "closeSection", ["subexpr", "action", [["get", "closeSection", ["loc", [null, [32, 65], [32, 77]]], 0, 0, 0, 0]], [], ["loc", [null, [32, 57], [32, 78]]], 0, 0], "disabled", ["subexpr", "@mut", [["get", "widget.disabled", ["loc", [null, [33, 53], [33, 68]]], 0, 0, 0, 0]], [], [], 0, 0], "widget", ["subexpr", "@mut", [["get", "widget", ["loc", [null, [34, 51], [34, 57]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [25, 40], [35, 42]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 23,
                      "column": 32
                    },
                    "end": {
                      "line": 37,
                      "column": 32
                    }
                  },
                  "moduleName": "collections/templates/collection/add.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["subexpr", "eq", [["get", "widget.section", ["loc", [null, [24, 46], [24, 60]]], 0, 0, 0, 0], ["get", "section.name", ["loc", [null, [24, 61], [24, 73]]], 0, 0, 0, 0]], [], ["loc", [null, [24, 42], [24, 74]]], 0, 0]], [], 0, null, ["loc", [null, [24, 36], [36, 43]]]]],
                locals: ["widget"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 28
                  },
                  "end": {
                    "line": 38,
                    "column": 30
                  }
                },
                "moduleName": "collections/templates/collection/add.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "preprint-form-header", [], ["name", ["subexpr", "@mut", [["get", "section.name", ["loc", [null, [22, 60], [22, 72]]], 0, 0, 0, 0]], [], [], 0, 0], "valid", ["subexpr", "@mut", [["get", "section.isSectionSaved", ["loc", [null, [22, 79], [22, 101]]], 0, 0, 0, 0]], [], [], 0, 0], "showValidationIndicator", ["subexpr", "get", [["subexpr", "get", [["get", "parameters", ["loc", [null, [22, 136], [22, 146]]], 0, 0, 0, 0], ["get", "section.param", ["loc", [null, [22, 147], [22, 160]]], 0, 0, 0, 0]], [], ["loc", [null, [22, 131], [22, 161]]], 0, 0], "showValidationIndicator"], [], ["loc", [null, [22, 126], [22, 188]]], 0, 0], "isValidationActive", ["subexpr", "@mut", [["get", "hasOpened", ["loc", [null, [22, 208], [22, 217]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [22, 32], [22, 219]]], 0, 0], ["block", "each", [["get", "widgets", ["loc", [null, [23, 40], [23, 47]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 32], [37, 41]]]]],
              locals: ["hasOpened", "isOpen"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 24
                },
                "end": {
                  "line": 39,
                  "column": 24
                }
              },
              "moduleName": "collections/templates/collection/add.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "preprint-form-section", [], ["id", ["subexpr", "@mut", [["get", "section.divId", ["loc", [null, [21, 56], [21, 69]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "preprint-form-block", "editMode", ["subexpr", "@mut", [["get", "editMode", ["loc", [null, [21, 107], [21, 115]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "section.name", ["loc", [null, [21, 121], [21, 133]]], 0, 0, 0, 0]], [], [], 0, 0], "open", ["subexpr", "get", [["subexpr", "get", [["get", "parameters", ["loc", [null, [21, 149], [21, 159]]], 0, 0, 0, 0], ["get", "section.param", ["loc", [null, [21, 160], [21, 173]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 144], [21, 174]]], 0, 0], "open"], [], ["loc", [null, [21, 139], [21, 182]]], 0, 0], "allowOpen", ["subexpr", "get", [["subexpr", "get", [["get", "parameters", ["loc", [null, [21, 203], [21, 213]]], 0, 0, 0, 0], ["get", "section.param", ["loc", [null, [21, 214], [21, 227]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 198], [21, 228]]], 0, 0], "allowOpen"], [], ["loc", [null, [21, 193], [21, 241]]], 0, 0]], 0, null, ["loc", [null, [21, 28], [38, 56]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 20
              },
              "end": {
                "line": 40,
                "column": 22
              }
            },
            "moduleName": "collections/templates/collection/add.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment(" The step to add existing projects has to be put back here at some point. Do not remove this comment. ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "cp-panels", [], ["accordion", true], 0, null, ["loc", [null, [20, 24], [39, 38]]]]],
          locals: ["section"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 20
            },
            "end": {
              "line": 41,
              "column": 20
            }
          },
          "moduleName": "collections/templates/collection/add.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "sections", ["loc", [null, [18, 28], [18, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [18, 20], [40, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/add.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1, "style", "\n    margin-top: 0;\n    padding-top: 80px;\n    padding-bottom: 50px;\n    background: url('/img/submit.jpg') top center no-repeat;\n    border-bottom: 1px solid #f0f0f0;\n    background-size: cover;\n    text-align: center;\n");
        var el2 = dom.createTextNode("Add ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-add-choice");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "preprint-submit-body");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "container");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "row m-t-lg");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-xs-12 col-md-10 col-md-offset-1 ");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1, 1, 1]), 1, 1);
        return morphs;
      },
      statements: [["content", "model.submissionFormType", ["loc", [null, [9, 6], [9, 34]]], 0, 0, 0, 0], ["block", "if", [["subexpr", "eq", [["get", "model.submissionFormType", ["loc", [null, [15, 30], [15, 54]]], 0, 0, 0, 0], "Website"], [], ["loc", [null, [15, 26], [15, 65]]], 0, 0]], [], 0, 1, ["loc", [null, [15, 20], [41, 27]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/collection/browse", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/browse.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "browse-list", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 20], [1, 25]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 27]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/collection/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "collections/templates/collection/edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "collectionTitle");
          var el4 = dom.createTextNode("Title");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "collectionDescription");
          var el4 = dom.createTextNode("Description");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "collectionTags");
          var el4 = dom.createTextNode("Tags");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "collectionSettings");
          var el4 = dom.createTextNode("Settings");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "text-right");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createTextNode("Cancel");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-success");
          var el4 = dom.createTextNode("Save");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var element12 = dom.childAt(element11, [9]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element12, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(element11, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(element11, [3]), 3, 3);
          morphs[2] = dom.createMorphAt(dom.childAt(element11, [5]), 3, 3);
          morphs[3] = dom.createMorphAt(dom.childAt(element11, [7]), 3, 3);
          morphs[4] = dom.createElementMorph(element13);
          morphs[5] = dom.createElementMorph(element14);
          return morphs;
        },
        statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "modelCache.title", ["loc", [null, [8, 47], [8, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter title", "id", "collectionTitle"], ["loc", [null, [8, 12], [8, 112]]], 0, 0], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "modelCache.description", ["loc", [null, [12, 50], [12, 72]]], 0, 0, 0, 0]], [], [], 0, 0], "id", "collectionDescription"], ["loc", [null, [12, 12], [12, 101]]], 0, 0], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "modelCache.tags", ["loc", [null, [16, 47], [16, 62]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter comma separated tags", "id", "collectionTags"], ["loc", [null, [16, 12], [16, 125]]], 0, 0], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "modelCache.settings", ["loc", [null, [20, 50], [20, 69]]], 0, 0, 0, 0]], [], [], 0, 0], "id", "collectionSettings", "rows", 12], ["loc", [null, [20, 12], [20, 103]]], 0, 0], ["element", "action", ["cancelEdit"], [], ["loc", [null, [23, 44], [23, 67]]], 0, 0], ["element", "action", ["saveEdit"], [], ["loc", [null, [24, 44], [24, 65]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 12
              },
              "end": {
                "line": 33,
                "column": 12
              }
            },
            "moduleName": "collections/templates/collection/edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.description", ["loc", [null, [32, 16], [32, 37]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 12
              },
              "end": {
                "line": 35,
                "column": 12
              }
            },
            "moduleName": "collections/templates/collection/edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "text-muted");
            var el2 = dom.createTextNode("Add description ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element9);
            return morphs;
          },
          statements: [["element", "action", ["showEdit"], [], ["loc", [null, [34, 41], [34, 62]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 12
              },
              "end": {
                "line": 40,
                "column": 12
              }
            },
            "moduleName": "collections/templates/collection/edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "coll-item-tag");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "tag", ["loc", [null, [39, 44], [39, 51]]], 0, 0, 0, 0]],
          locals: ["tag"],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 6
              },
              "end": {
                "line": 54,
                "column": 6
              }
            },
            "moduleName": "collections/templates/collection/edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "pull-right");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-danger btn-collection");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "fa fa-times");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" Delete ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-info btn-collection");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "fa fa-pencil");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" Edit");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var element8 = dom.childAt(element6, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element7);
            morphs[1] = dom.createElementMorph(element8);
            return morphs;
          },
          statements: [["element", "action", [["get", "toggleProperty", ["loc", [null, [50, 67], [50, 81]]], 0, 0, 0, 0], "showDeleteConfirmation"], [], ["loc", [null, [50, 58], [50, 108]]], 0, 0], ["element", "action", ["showEdit"], [], ["loc", [null, [52, 56], [52, 77]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "moduleName": "collections/templates/collection/edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "m-b-md");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "m-b-md");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Type: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Created by: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Date created: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Date updated : ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Settings : ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [9]);
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          morphs[4] = dom.createMorphAt(element10, 1, 1);
          morphs[5] = dom.createMorphAt(element10, 3, 3);
          morphs[6] = dom.createMorphAt(dom.childAt(fragment, [11]), 1, 1);
          morphs[7] = dom.createMorphAt(dom.childAt(fragment, [13]), 1, 1);
          morphs[8] = dom.createMorphAt(dom.childAt(fragment, [15]), 1, 1);
          morphs[9] = dom.createMorphAt(fragment, 17, 17, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "model.title", ["loc", [null, [29, 12], [29, 27]]], 0, 0, 0, 0], ["block", "if", [["get", "model.description", ["loc", [null, [31, 18], [31, 35]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [31, 12], [35, 19]]]], ["block", "each", [["get", "formattedTags", ["loc", [null, [38, 20], [38, 33]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [38, 12], [40, 21]]]], ["content", "model.settings.collectionType", ["loc", [null, [42, 17], [42, 50]]], 0, 0, 0, 0], ["content", "model.createdBy.firstName", ["loc", [null, [43, 23], [43, 52]]], 0, 0, 0, 0], ["content", "model.createdBy.lastName", ["loc", [null, [43, 53], [43, 81]]], 0, 0, 0, 0], ["content", "model.dateCreated", ["loc", [null, [44, 25], [44, 46]]], 0, 0, 0, 0], ["content", "model.dateUpdated", ["loc", [null, [45, 26], [45, 47]]], 0, 0, 0, 0], ["content", "settingsString", ["loc", [null, [46, 22], [46, 40]]], 0, 0, 0, 0], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [48, 12], [48, 35]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [48, 6], [54, 13]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 0
            },
            "end": {
              "line": 79,
              "column": 0
            }
          },
          "moduleName": "collections/templates/collection/edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal fade in");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "role", "dialog");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-dialog");
          dom.setAttribute(el2, "role", "document");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "modal-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-header");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "close");
          dom.setAttribute(el5, "aria-label", "Close");
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "aria-hidden", "true");
          var el7 = dom.createTextNode("×");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5, "class", "modal-title");
          var el6 = dom.createTextNode("Delete collection \"");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\"?");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-body");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          var el6 = dom.createTextNode("This will remove all groups and items inside collections. Original projects are not deleted.");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "modal-footer");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-default");
          var el6 = dom.createTextNode("Close");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-danger");
          var el6 = dom.createTextNode("Delete");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment(" /.modal-content ");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment(" /.modal-dialog ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" /.modal ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-backdrop fade in");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element0, [5]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["element", "action", [["get", "toggleProperty", ["loc", [null, [65, 72], [65, 86]]], 0, 0, 0, 0], "showDeleteConfirmation"], [], ["loc", [null, [65, 63], [65, 113]]], 0, 0], ["content", "model.title", ["loc", [null, [66, 51], [66, 66]]], 0, 0, 0, 0], ["element", "action", [["get", "toggleProperty", ["loc", [null, [72, 63], [72, 77]]], 0, 0, 0, 0], "showDeleteConfirmation"], [], ["loc", [null, [72, 54], [72, 104]]], 0, 0], ["element", "action", ["deleteCollection"], [], ["loc", [null, [73, 53], [73, 82]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-add-layer p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "editMode", ["loc", [null, [3, 11], [3, 19]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [55, 11]]]], ["block", "if", [["get", "showDeleteConfirmation", ["loc", [null, [60, 6], [60, 28]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [60, 0], [79, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("collections/templates/collection/group", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/group.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/collection/group/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/group/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "group-detail", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 21], [1, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "changeRoute", ["subexpr", "action", ["changeRoute"], [], ["loc", [null, [1, 39], [1, 61]]], 0, 0]], ["loc", [null, [1, 0], [1, 63]]], 0, 0], ["inline", "browse-list", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 20], [2, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "groupView", true], ["loc", [null, [2, 0], [2, 42]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/collection/group/item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/group/item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "item-detail-page", [], ["item", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 24], [1, 29]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 31]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/collection/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "collections/templates/collection/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["get", "view.type", ["loc", [null, [3, 20], [3, 29]]], 0, 0, 0, 0]], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 36], [3, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "layout", ["subexpr", "@mut", [["get", "view", ["loc", [null, [3, 49], [3, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "branding", ["subexpr", "@mut", [["get", "model.settings.branding", ["loc", [null, [3, 63], [3, 86]]], 0, 0, 0, 0]], [], [], 0, 0], "changeRoute", ["subexpr", "action", ["changeRoute"], [], ["loc", [null, [3, 99], [3, 121]]], 0, 0]], ["loc", [null, [3, 8], [3, 124]]], 0, 0]],
          locals: ["view"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "collections/templates/collection/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "model.settings.layout", ["loc", [null, [2, 12], [2, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [4, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "collections/templates/collection/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "landing-default", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 28], [6, 33]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 4], [6, 35]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.settings.layout", ["loc", [null, [1, 6], [1, 27]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/collection/item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-item-page");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "item-detail-page", [], ["item", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 28], [2, 33]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 4], [2, 35]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/collection/search", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 12
            },
            "end": {
              "line": 23,
              "column": 12
            }
          },
          "moduleName": "collections/templates/collection/search.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "search-result p-sm m-sm");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "item.title", ["loc", [null, [22, 54], [22, 68]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "collections/templates/collection/search.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-add-choice text-center");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode(" Search content ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "search-panel m-t-lg p-md");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "row");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-6 col-sm-offset-3");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-2 text-left");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "class", "btn btn-success ");
        var el7 = dom.createTextNode("Search");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "text-muted");
        var el4 = dom.createTextNode(" Search is for demo purpose only. Results will show all items. ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "search-results-panel");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "m-t-md");
        var el4 = dom.createTextNode(" Results ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "search-results-wrapper m-t-md");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 3, 1]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "searchText", ["loc", [null, [7, 55], [7, 65]]], 0, 0, 0, 0]], [], [], 0, 0], "enter", "search"], ["loc", [null, [7, 20], [7, 82]]], 0, 0], ["element", "action", ["search"], [], ["loc", [null, [10, 53], [10, 72]]], 0, 0], ["block", "each", [["get", "results", ["loc", [null, [21, 20], [21, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [21, 12], [23, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bread-crumbs", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 10
                  },
                  "end": {
                    "line": 8,
                    "column": 10
                  }
                },
                "moduleName": "collections/templates/components/bread-crumbs.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "crumb.label", ["loc", [null, [7, 12], [7, 27]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "collections/templates/components/bread-crumbs.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "crumb.path", ["loc", [null, [6, 21], [6, 31]]], 0, 0, 0, 0], ["get", "crumb.model", ["loc", [null, [6, 32], [6, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 10], [8, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 10
                  },
                  "end": {
                    "line": 12,
                    "column": 10
                  }
                },
                "moduleName": "collections/templates/components/bread-crumbs.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "crumb.label", ["loc", [null, [11, 12], [11, 27]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "collections/templates/components/bread-crumbs.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "crumb.path", ["loc", [null, [10, 21], [10, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 10], [12, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "collections/templates/components/bread-crumbs.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "crumb.model", ["loc", [null, [5, 14], [5, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [5, 8], [13, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 16,
                "column": 6
              }
            },
            "moduleName": "collections/templates/components/bread-crumbs.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "crumb.label", ["loc", [null, [15, 8], [15, 23]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "collections/templates/components/bread-crumbs.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["subexpr", "if", [["get", "crumb.isCurrent", ["loc", [null, [3, 19], [3, 34]]], 0, 0, 0, 0], "current"], [], ["loc", [null, [null, null], [3, 46]]], 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "crumb.linkable", ["loc", [null, [4, 12], [4, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 6], [16, 13]]]]],
        locals: ["crumb"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/bread-crumbs.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "breadcrumbs");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "breadCrumbs", ["loc", [null, [2, 10], [2, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 2], [18, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bs-accordion-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-accordion-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel-body");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [10, 8], [10, 17]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 16
          }
        },
        "moduleName": "collections/templates/components/bs-accordion-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "tab");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2, "class", "panel-title");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "href", "#");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["panel-heading ", ["subexpr", "if", [["get", "collapsed", ["loc", [null, [1, 68], [1, 77]]], 0, 0, 0, 0], "collapsed"], [], ["loc", [null, [1, 63], [1, 91]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["toggleActive"], [], ["loc", [null, [1, 16], [1, 41]]], 0, 0], ["content", "title", ["loc", [null, [4, 12], [4, 21]]], 0, 0, 0, 0], ["block", "bs-collapse", [], ["collapsed", ["subexpr", "@mut", [["get", "collapsed", ["loc", [null, [8, 25], [8, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "panel-collapse"], 0, null, ["loc", [null, [8, 0], [12, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bs-alert", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 0
              }
            },
            "moduleName": "collections/templates/components/bs-alert.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "close");
            dom.setAttribute(el1, "aria-label", "Close");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "aria-hidden", "true");
            var el3 = dom.createTextNode("×");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["dismiss"], [], ["loc", [null, [3, 59], [3, 79]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-alert.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "dismissible", ["loc", [null, [2, 6], [2, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/bs-alert.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "hidden", ["loc", [null, [1, 10], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [6, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bs-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 37
            }
          },
          "moduleName": "collections/templates/components/bs-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "icon", ["loc", [null, [1, 24], [1, 28]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 61
          }
        },
        "moduleName": "collections/templates/components/bs-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "icon", ["loc", [null, [1, 6], [1, 10]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [1, 44]]]], ["content", "text", ["loc", [null, [1, 44], [1, 52]]], 0, 0, 0, 0], ["content", "yield", ["loc", [null, [1, 52], [1, 61]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bs-form-element", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "collections/templates/components/bs-form-element.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "formElementTemplate", ["loc", [null, [1, 10], [1, 29]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 31]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/components/bs-form-group", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-form-group.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "aria-hidden", "true");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["form-control-feedback ", ["get", "iconName", ["loc", [null, [3, 41], [3, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 7
          }
        },
        "moduleName": "collections/templates/components/bs-form-group.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["block", "if", [["get", "hasFeedback", ["loc", [null, [2, 6], [2, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bs-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "collections/templates/components/bs-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/components/bs-modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 5,
              "column": 8
            }
          },
          "moduleName": "collections/templates/components/bs-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "bs-modal-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [4, 36], [4, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "closeButton", ["subexpr", "@mut", [["get", "closeButton", ["loc", [null, [4, 54], [4, 65]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 12], [4, 67]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 12
              },
              "end": {
                "line": 9,
                "column": 12
              }
            },
            "moduleName": "collections/templates/components/bs-modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [8, 16], [8, 25]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 10,
              "column": 8
            }
          },
          "moduleName": "collections/templates/components/bs-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "bs-modal-body", [], [], 0, null, ["loc", [null, [7, 12], [9, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 8
            },
            "end": {
              "line": 12,
              "column": 8
            }
          },
          "moduleName": "collections/templates/components/bs-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [11, 12], [11, 21]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": 8
            }
          },
          "moduleName": "collections/templates/components/bs-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "bs-modal-footer", ["loc", [null, [15, 12], [15, 31]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 6
          }
        },
        "moduleName": "collections/templates/components/bs-modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "modal-content");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 2, 2);
        morphs[3] = dom.createMorphAt(element1, 4, 4);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["modal-dialog ", ["get", "sizeClass", ["loc", [null, [1, 27], [1, 36]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "header", ["loc", [null, [3, 14], [3, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 8], [5, 15]]]], ["block", "if", [["get", "body", ["loc", [null, [6, 14], [6, 18]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [6, 8], [12, 15]]]], ["block", "if", [["get", "footer", ["loc", [null, [14, 14], [14, 20]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [14, 8], [16, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("collections/templates/components/bs-modal-footer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-modal-footer.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [2, 12], [2, 16]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 4], [2, 18]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 66
                }
              },
              "moduleName": "collections/templates/components/bs-modal-footer.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "closeTitle", ["loc", [null, [5, 52], [5, 66]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 6,
                  "column": 96
                }
              },
              "moduleName": "collections/templates/components/bs-modal-footer.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "submitTitle", ["loc", [null, [6, 81], [6, 96]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "collections/templates/components/bs-modal-footer.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "bs-button", [], ["type", "default", "action", "close"], 0, null, ["loc", [null, [5, 8], [5, 80]]]], ["block", "bs-button", [], ["type", "primary", "buttonType", "submit", "disabled", ["subexpr", "@mut", [["get", "submitDisabled", ["loc", [null, [6, 65], [6, 79]]], 0, 0, 0, 0]], [], [], 0, 0]], 1, null, ["loc", [null, [6, 8], [6, 110]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 66
                }
              },
              "moduleName": "collections/templates/components/bs-modal-footer.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "closeTitle", ["loc", [null, [8, 52], [8, 66]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "collections/templates/components/bs-modal-footer.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "bs-button", [], ["type", "primary", "action", "close"], 0, null, ["loc", [null, [8, 8], [8, 80]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-modal-footer.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasSubmitButton", ["loc", [null, [4, 10], [4, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 4], [9, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 7
          }
        },
        "moduleName": "collections/templates/components/bs-modal-footer.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/bs-modal-header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-modal-header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "close");
          dom.setAttribute(el1, "aria-label", "Close");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "aria-hidden", "true");
          var el3 = dom.createTextNode("×");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["close"], [], ["loc", [null, [2, 59], [2, 77]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-modal-header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [5, 12], [5, 16]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 4], [5, 18]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-modal-header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1, "class", "modal-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [7, 28], [7, 37]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/bs-modal-header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "closeButton", ["loc", [null, [1, 6], [1, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [4, 6], [4, 14]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [4, 0], [8, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("collections/templates/components/bs-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 0
              }
            },
            "moduleName": "collections/templates/components/bs-modal.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "this", ["loc", [null, [4, 10], [4, 14]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 2], [4, 16]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 0
              },
              "end": {
                "line": 9,
                "column": 0
              }
            },
            "moduleName": "collections/templates/components/bs-modal.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'id');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["modal-backdrop ", ["subexpr", "if", [["get", "fade", ["loc", [null, [8, 34], [8, 38]]], 0, 0, 0, 0], "fade"], [], ["loc", [null, [8, 29], [8, 47]]], 0, 0], " ", ["subexpr", "if", [["get", "in", ["loc", [null, [8, 53], [8, 55]]], 0, 0, 0, 0], "in"], [], ["loc", [null, [8, 48], [8, 62]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "id", ["concat", [["get", "backdropId", ["loc", [null, [8, 70], [8, 80]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "bs-modal-dialog", [], ["close", ["subexpr", "action", ["close"], [], ["loc", [null, [3, 25], [3, 41]]], 0, 0], "fade", ["subexpr", "@mut", [["get", "fade", ["loc", [null, [3, 47], [3, 51]]], 0, 0, 0, 0]], [], [], 0, 0], "in", ["subexpr", "@mut", [["get", "in", ["loc", [null, [3, 55], [3, 57]]], 0, 0, 0, 0]], [], [], 0, 0], "id", ["subexpr", "@mut", [["get", "modalId", ["loc", [null, [3, 61], [3, 68]]], 0, 0, 0, 0]], [], [], 0, 0], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 75], [3, 80]]], 0, 0, 0, 0]], [], [], 0, 0], "closeButton", ["subexpr", "@mut", [["get", "closeButton", ["loc", [null, [3, 93], [3, 104]]], 0, 0, 0, 0]], [], [], 0, 0], "keyboard", ["subexpr", "@mut", [["get", "keyboard", ["loc", [null, [3, 114], [3, 122]]], 0, 0, 0, 0]], [], [], 0, 0], "header", ["subexpr", "@mut", [["get", "header", ["loc", [null, [3, 130], [3, 136]]], 0, 0, 0, 0]], [], [], 0, 0], "body", ["subexpr", "@mut", [["get", "body", ["loc", [null, [3, 142], [3, 146]]], 0, 0, 0, 0]], [], [], 0, 0], "footer", ["subexpr", "@mut", [["get", "footer", ["loc", [null, [3, 154], [3, 160]]], 0, 0, 0, 0]], [], [], 0, 0], "size", ["subexpr", "@mut", [["get", "size", ["loc", [null, [3, 166], [3, 170]]], 0, 0, 0, 0]], [], [], 0, 0], "backdropClose", ["subexpr", "@mut", [["get", "backdropClose", ["loc", [null, [3, 185], [3, 198]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [3, 0], [5, 20]]]], ["block", "if", [["get", "showBackdrop", ["loc", [null, [7, 6], [7, 18]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [7, 0], [9, 7]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 19
          }
        },
        "moduleName": "collections/templates/components/bs-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ember-wormhole", [], ["to", "ember-bootstrap-modal-container", "renderInPlace", ["subexpr", "@mut", [["get", "renderInPlace", ["loc", [null, [1, 69], [1, 82]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [1, 0], [11, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/bs-progress-bar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "collections/templates/components/bs-progress-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "percentRounded", ["loc", [null, [4, 16], [4, 30]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 8], [4, 32]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "collections/templates/components/bs-progress-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("%\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "percentRounded", ["loc", [null, [6, 8], [6, 26]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-progress-bar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [3, 10], [3, 18]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [7, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "collections/templates/components/bs-progress-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "sr-only");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "percentRounded", ["loc", [null, [10, 38], [10, 52]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 30], [10, 54]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "collections/templates/components/bs-progress-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "sr-only");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("%");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "percentRounded", ["loc", [null, [12, 30], [12, 48]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-progress-bar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [9, 10], [9, 18]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [9, 4], [13, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/bs-progress-bar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showLabel", ["loc", [null, [2, 6], [2, 15]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 0], [15, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/bs-progress", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/bs-progress.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/components/bs-select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-select.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "disabled", "");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'selected');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "selected", ["subexpr", "is-not", [["get", "value", ["loc", [null, [2, 39], [2, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [2, 46]]], 0, 0], 0, 0, 0, 0], ["content", "prompt", ["loc", [null, [3, 8], [3, 18]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/bs-select.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createAttrMorph(element0, 'selected');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["subexpr", "read-path", [["get", "item", ["loc", [null, [8, 31], [8, 35]]], 0, 0, 0, 0], ["get", "optionValuePath", ["loc", [null, [8, 36], [8, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [8, 19], [8, 53]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "selected", ["subexpr", "is-equal", [["get", "item", ["loc", [null, [9, 32], [9, 36]]], 0, 0, 0, 0], ["get", "value", ["loc", [null, [9, 37], [9, 42]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [9, 44]]], 0, 0], 0, 0, 0, 0], ["inline", "read-path", [["get", "item", ["loc", [null, [10, 20], [10, 24]]], 0, 0, 0, 0], ["get", "optionLabelPath", ["loc", [null, [10, 25], [10, 40]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 8], [10, 42]]], 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 9
          }
        },
        "moduleName": "collections/templates/components/bs-select.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "prompt", ["loc", [null, [1, 6], [1, 12]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["block", "each", [["get", "content", ["loc", [null, [7, 8], [7, 15]]], 0, 0, 0, 0]], ["key", "@identity"], 1, null, ["loc", [null, [7, 0], [12, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/cp-panel-body", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "collections/templates/components/cp-panel-body.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cp-Panel-body-inner");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [5, 6], [5, 15]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/cp-panel-body.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "liquid-if", [["get", "isOpen", ["loc", [null, [3, 15], [3, 21]]], 0, 0, 0, 0]], ["use", "crossFade"], 0, null, ["loc", [null, [3, 2], [7, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "collections/templates/components/cp-panel-body.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cp-Panel-body-inner");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [13, 6], [13, 15]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/cp-panel-body.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "isOpen", ["loc", [null, [11, 8], [11, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [11, 2], [15, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/cp-panel-body.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "shouldAnimate", ["loc", [null, [1, 6], [1, 19]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [17, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/form-element/errors", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/errors.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "help-block");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "errors.firstObject", ["loc", [null, [2, 29], [2, 51]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 7
          }
        },
        "moduleName": "collections/templates/components/form-element/errors.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showErrors", ["loc", [null, [1, 6], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/form-element/feedback-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/feedback-icon.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "aria-hidden", "true");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["form-control-feedback ", ["get", "iconName", ["loc", [null, [2, 41], [2, 49]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 7
          }
        },
        "moduleName": "collections/templates/components/form-element/feedback-icon.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasFeedback", ["loc", [null, [1, 6], [1, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/form-element/horizontal/checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "collections/templates/components/form-element/horizontal/checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [1, 14], [1, 38]]], 0, 0, 0, 0], " ", ["get", "horizontalInputOffsetGridClass", ["loc", [null, [1, 43], [1, 73]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "input", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 25], [4, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "type", "checkbox", "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 54], [4, 59]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 69], [4, 77]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 87], [4, 95]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 12], [4, 97]]], 0, 0], ["content", "label", ["loc", [null, [4, 98], [4, 107]]], 0, 0, 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [7, 4], [7, 48]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/components/form-element/horizontal/default", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 8
              },
              "end": {
                "line": 6,
                "column": 8
              }
            },
            "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "value", ["loc", [null, [5, 20], [5, 25]]], 0, 0, 0, 0], ["get", "formElementId", ["loc", [null, [5, 26], [5, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 12], [5, 41]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 8,
                "column": 8
              }
            },
            "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "bs-input", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [7, 26], [7, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 45], [7, 49]]], 0, 0, 0, 0]], [], [], 0, 0], "type", ["subexpr", "@mut", [["get", "controlType", ["loc", [null, [7, 55], [7, 66]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 73], [7, 78]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 91], [7, 102]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [7, 113], [7, 122]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 132], [7, 140]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [7, 150], [7, 158]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [7, 12], [7, 160]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(fragment, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'for');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          morphs[3] = dom.createAttrMorph(element2, 'class');
          morphs[4] = dom.createMorphAt(element2, 1, 1);
          morphs[5] = dom.createMorphAt(element2, 3, 3);
          morphs[6] = dom.createMorphAt(element2, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["control-label ", ["get", "horizontalLabelGridClass", ["loc", [null, [2, 34], [2, 58]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 69], [2, 82]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 86], [2, 95]]], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [3, 18], [3, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [4, 14], [4, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 8], [8, 15]]]], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [9, 8], [9, 59]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [10, 8], [10, 52]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": 8
              }
            },
            "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "value", ["loc", [null, [15, 20], [15, 25]]], 0, 0, 0, 0]], [], ["loc", [null, [15, 12], [15, 27]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 8
              }
            },
            "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "bs-input", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [17, 28], [17, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "type", ["subexpr", "@mut", [["get", "controlType", ["loc", [null, [17, 38], [17, 49]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [17, 56], [17, 61]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [17, 74], [17, 85]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [17, 96], [17, 105]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [17, 115], [17, 123]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [17, 133], [17, 141]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [17, 12], [17, 143]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [13, 18], [13, 42]]], 0, 0, 0, 0], " ", ["get", "horizontalInputOffsetGridClass", ["loc", [null, [13, 47], [13, 77]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [14, 14], [14, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [14, 8], [18, 15]]]], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [19, 8], [19, 59]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [20, 8], [20, 52]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/form-element/horizontal/default.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [22, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/form-element/horizontal/select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/horizontal/select.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(fragment, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'for');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          morphs[3] = dom.createAttrMorph(element2, 'class');
          morphs[4] = dom.createMorphAt(element2, 1, 1);
          morphs[5] = dom.createMorphAt(element2, 3, 3);
          morphs[6] = dom.createMorphAt(element2, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["control-label ", ["get", "horizontalLabelGridClass", ["loc", [null, [2, 34], [2, 58]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 69], [2, 82]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 86], [2, 95]]], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [3, 18], [3, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "bs-select", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [4, 23], [4, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 42], [4, 46]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [4, 55], [4, 62]]], 0, 0, 0, 0]], [], [], 0, 0], "optionValuePath", ["subexpr", "@mut", [["get", "choiceValueProperty", ["loc", [null, [4, 79], [4, 98]]], 0, 0, 0, 0]], [], [], 0, 0], "optionLabelPath", ["subexpr", "@mut", [["get", "choiceLabelProperty", ["loc", [null, [4, 115], [4, 134]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 141], [4, 146]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 156], [4, 164]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 174], [4, 182]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 8], [4, 184]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [5, 8], [5, 59]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [6, 8], [6, 52]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/horizontal/select.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [9, 18], [9, 42]]], 0, 0, 0, 0], " ", ["get", "horizontalInputOffsetGridClass", ["loc", [null, [9, 47], [9, 77]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "bs-select", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [10, 25], [10, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [10, 38], [10, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "optionValuePath", ["subexpr", "@mut", [["get", "choiceValueProperty", ["loc", [null, [10, 62], [10, 81]]], 0, 0, 0, 0]], [], [], 0, 0], "optionLabelPath", ["subexpr", "@mut", [["get", "choiceLabelProperty", ["loc", [null, [10, 98], [10, 117]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [10, 124], [10, 129]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 8], [10, 131]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [11, 8], [11, 59]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [12, 8], [12, 52]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/form-element/horizontal/select.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [14, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/form-element/horizontal/textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/horizontal/textarea.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(fragment, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'for');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          morphs[3] = dom.createAttrMorph(element2, 'class');
          morphs[4] = dom.createMorphAt(element2, 1, 1);
          morphs[5] = dom.createMorphAt(element2, 3, 3);
          morphs[6] = dom.createMorphAt(element2, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["control-label ", ["get", "horizontalLabelGridClass", ["loc", [null, [2, 34], [2, 58]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 69], [2, 82]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 86], [2, 95]]], 0, 0, 0, 0], ["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [3, 18], [3, 42]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "bs-textarea", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [4, 25], [4, 38]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 44], [4, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 55], [4, 60]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [4, 73], [4, 84]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [4, 95], [4, 104]]], 0, 0, 0, 0]], [], [], 0, 0], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [4, 110], [4, 114]]], 0, 0, 0, 0]], [], [], 0, 0], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [4, 120], [4, 124]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 134], [4, 142]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 152], [4, 160]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 8], [4, 162]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [5, 8], [5, 59]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [6, 8], [6, 52]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/horizontal/textarea.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "horizontalInputGridClass", ["loc", [null, [9, 18], [9, 42]]], 0, 0, 0, 0], " ", ["get", "horizontalInputOffsetGridClass", ["loc", [null, [9, 47], [9, 77]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "bs-textarea", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [10, 27], [10, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [10, 38], [10, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 56], [10, 67]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [10, 78], [10, 87]]], 0, 0, 0, 0]], [], [], 0, 0], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [10, 93], [10, 97]]], 0, 0, 0, 0]], [], [], 0, 0], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [10, 103], [10, 107]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [10, 117], [10, 125]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [10, 135], [10, 143]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 8], [10, 145]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [11, 8], [11, 59]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [12, 8], [12, 52]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/form-element/horizontal/textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [14, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/form-element/inline/checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 6
          }
        },
        "moduleName": "collections/templates/components/form-element/inline/checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "checkbox");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "input", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [3, 21], [3, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "type", "checkbox", "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 50], [3, 55]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 65], [3, 73]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [3, 83], [3, 91]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 8], [3, 93]]], 0, 0], ["content", "label", ["loc", [null, [3, 94], [3, 103]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/components/form-element/inline/default", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/inline/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'for');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 40], [2, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 57], [2, 66]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/inline/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "value", ["loc", [null, [5, 12], [5, 17]]], 0, 0, 0, 0], ["get", "formElementId", ["loc", [null, [5, 18], [5, 31]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 4], [5, 33]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/inline/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "bs-input", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [7, 18], [7, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 37], [7, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "type", ["subexpr", "@mut", [["get", "controlType", ["loc", [null, [7, 47], [7, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 65], [7, 70]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 83], [7, 94]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [7, 105], [7, 114]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 124], [7, 132]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [7, 142], [7, 150]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [7, 4], [7, 152]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/form-element/inline/default.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [4, 6], [4, 14]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [4, 0], [8, 7]]]], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [9, 0], [9, 51]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("collections/templates/components/form-element/inline/select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/inline/select.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'for');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 40], [2, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 57], [2, 66]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/form-element/inline/select.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "bs-select", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [4, 15], [4, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 34], [4, 38]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [4, 47], [4, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "optionValuePath", ["subexpr", "@mut", [["get", "choiceValueProperty", ["loc", [null, [4, 71], [4, 90]]], 0, 0, 0, 0]], [], [], 0, 0], "optionLabelPath", ["subexpr", "@mut", [["get", "choiceLabelProperty", ["loc", [null, [4, 107], [4, 126]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 133], [4, 138]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 148], [4, 156]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 166], [4, 174]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 0], [4, 176]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [5, 0], [5, 51]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/form-element/inline/textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/inline/textarea.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'for');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 40], [2, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 57], [2, 66]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "moduleName": "collections/templates/components/form-element/inline/textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "bs-textarea", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [4, 17], [4, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 36], [4, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 47], [4, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [4, 65], [4, 76]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [4, 87], [4, 96]]], 0, 0, 0, 0]], [], [], 0, 0], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [4, 102], [4, 106]]], 0, 0, 0, 0]], [], [], 0, 0], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [4, 112], [4, 116]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 126], [4, 134]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 144], [4, 152]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 0], [4, 154]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [5, 0], [5, 51]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [6, 0], [6, 44]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/form-element/vertical/checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "moduleName": "collections/templates/components/form-element/vertical/checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "checkbox");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "input", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [3, 21], [3, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "type", "checkbox", "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 50], [3, 55]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 65], [3, 73]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [3, 83], [3, 91]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 8], [3, 93]]], 0, 0], ["content", "label", ["loc", [null, [3, 94], [3, 103]]], 0, 0, 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [6, 0], [6, 44]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("collections/templates/components/form-element/vertical/default", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/vertical/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'for');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 40], [2, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 57], [2, 66]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/vertical/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "value", ["loc", [null, [5, 12], [5, 17]]], 0, 0, 0, 0], ["get", "formElementId", ["loc", [null, [5, 18], [5, 31]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 4], [5, 33]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/vertical/default.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "bs-input", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [7, 18], [7, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 37], [7, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "type", ["subexpr", "@mut", [["get", "controlType", ["loc", [null, [7, 47], [7, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 65], [7, 70]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 83], [7, 94]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [7, 105], [7, 114]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 124], [7, 132]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [7, 142], [7, 150]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [7, 4], [7, 152]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 44
          }
        },
        "moduleName": "collections/templates/components/form-element/vertical/default.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [4, 6], [4, 14]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [4, 0], [8, 7]]]], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [9, 0], [9, 51]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [10, 0], [10, 44]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("collections/templates/components/form-element/vertical/select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/vertical/select.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'for');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 40], [2, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 57], [2, 66]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "moduleName": "collections/templates/components/form-element/vertical/select.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "bs-select", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [4, 15], [4, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 34], [4, 38]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [4, 47], [4, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "optionValuePath", ["subexpr", "@mut", [["get", "choiceValueProperty", ["loc", [null, [4, 71], [4, 90]]], 0, 0, 0, 0]], [], [], 0, 0], "optionLabelPath", ["subexpr", "@mut", [["get", "choiceLabelProperty", ["loc", [null, [4, 107], [4, 126]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 133], [4, 138]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 148], [4, 156]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 166], [4, 174]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 0], [4, 176]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [5, 0], [5, 51]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [6, 0], [6, 44]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/form-element/vertical/textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/form-element/vertical/textarea.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'for');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "for", ["concat", [["get", "formElementId", ["loc", [null, [2, 40], [2, 53]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 57], [2, 66]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "moduleName": "collections/templates/components/form-element/vertical/textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasLabel", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "bs-textarea", [], ["id", ["subexpr", "@mut", [["get", "formElementId", ["loc", [null, [4, 17], [4, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 37], [4, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [4, 48], [4, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [4, 65], [4, 76]]], 0, 0, 0, 0]], [], [], 0, 0], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [4, 87], [4, 96]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 106], [4, 114]]], 0, 0, 0, 0]], [], [], 0, 0], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [4, 124], [4, 132]]], 0, 0, 0, 0]], [], [], 0, 0], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [4, 138], [4, 142]]], 0, 0, 0, 0]], [], [], 0, 0], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [4, 148], [4, 152]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 0], [4, 154]]], 0, 0], ["inline", "partial", ["components/form-element/feedback-icon"], [], ["loc", [null, [5, 0], [5, 51]]], 0, 0], ["inline", "partial", ["components/form-element/errors"], [], ["loc", [null, [6, 0], [6, 44]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("collections/templates/components/page-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/page-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "page", ["loc", [null, [2, 5], [2, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/page-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "url", ["loc", [null, [4, 13], [4, 16]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["select"], [], ["loc", [null, [4, 20], [4, 39]]], 0, 0], ["content", "page", ["loc", [null, [4, 40], [4, 48]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/page-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isDots", ["loc", [null, [1, 6], [1, 12]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/components/pagination-pager", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "collections/templates/components/pagination-pager.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "page-item", [], ["disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 25], [7, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "page", ["subexpr", "@mut", [["get", "page", ["loc", [null, [7, 39], [7, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "@mut", [["get", "this.current", ["loc", [null, [7, 53], [7, 65]]], 0, 0, 0, 0]], [], [], 0, 0], "seperator", ["subexpr", "@mut", [["get", "seperator", ["loc", [null, [7, 76], [7, 85]]], 0, 0, 0, 0]], [], [], 0, 0], "urlTemplate", ["subexpr", "@mut", [["get", "urlTemplate", ["loc", [null, [7, 98], [7, 109]]], 0, 0, 0, 0]], [], [], 0, 0], "pageSet", "pageChanged"], ["loc", [null, [7, 4], [7, 133]]], 0, 0]],
          locals: ["page"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/pagination-pager.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(fragment, [5]);
          var element11 = dom.childAt(element10, [1]);
          var morphs = new Array(9);
          morphs[0] = dom.createAttrMorph(element8, 'class');
          morphs[1] = dom.createAttrMorph(element9, 'href');
          morphs[2] = dom.createElementMorph(element9);
          morphs[3] = dom.createUnsafeMorphAt(element9, 0, 0);
          morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[5] = dom.createAttrMorph(element10, 'class');
          morphs[6] = dom.createAttrMorph(element11, 'href');
          morphs[7] = dom.createElementMorph(element11);
          morphs[8] = dom.createUnsafeMorphAt(element11, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["previous ", ["subexpr", "if", [["get", "isFirstDisabled", ["loc", [null, [2, 27], [2, 42]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [2, 22], [2, 55]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "previousUrl", ["loc", [null, [3, 15], [3, 26]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["previous"], [], ["loc", [null, [3, 30], [3, 51]]], 0, 0], ["content", "paginationPrevious", ["loc", [null, [3, 52], [3, 76]]], 0, 0, 0, 0], ["block", "each", [["get", "pages", ["loc", [null, [6, 10], [6, 15]]], 0, 0, 0, 0]], ["key", "@index"], 0, null, ["loc", [null, [6, 2], [8, 11]]]], ["attribute", "class", ["concat", ["next ", ["subexpr", "if", [["get", "isLastDisabled", ["loc", [null, [10, 23], [10, 37]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [10, 18], [10, 50]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "nextUrl", ["loc", [null, [11, 15], [11, 22]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["next"], [], ["loc", [null, [11, 26], [11, 43]]], 0, 0], ["content", "paginationNext", ["loc", [null, [11, 44], [11, 64]]], 0, 0, 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "collections/templates/components/pagination-pager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createAttrMorph(element3, 'href');
            morphs[2] = dom.createElementMorph(element3);
            morphs[3] = dom.createUnsafeMorphAt(element3, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isFirstDisabled", ["loc", [null, [15, 20], [15, 35]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [15, 15], [15, 48]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "firstUrl", ["loc", [null, [16, 17], [16, 25]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["first"], [], ["loc", [null, [16, 29], [16, 47]]], 0, 0], ["content", "pagerFirst", ["loc", [null, [16, 48], [16, 64]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "collections/templates/components/pagination-pager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "pager-inner");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [25, 28], [25, 37]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "collections/templates/components/pagination-pager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element1, 'href');
            morphs[2] = dom.createElementMorph(element1);
            morphs[3] = dom.createUnsafeMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["last ", ["subexpr", "if", [["get", "isLastDisabled", ["loc", [null, [33, 25], [33, 39]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [33, 20], [33, 52]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "lastUrl", ["loc", [null, [34, 17], [34, 24]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["last"], [], ["loc", [null, [34, 28], [34, 45]]], 0, 0], ["content", "pagerLast", ["loc", [null, [34, 46], [34, 61]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "collections/templates/components/pagination-pager.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [2]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(fragment, [6]);
          var element7 = dom.childAt(element6, [1]);
          var morphs = new Array(11);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element4, 'class');
          morphs[2] = dom.createAttrMorph(element5, 'href');
          morphs[3] = dom.createElementMorph(element5);
          morphs[4] = dom.createUnsafeMorphAt(element5, 0, 0);
          morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[6] = dom.createAttrMorph(element6, 'class');
          morphs[7] = dom.createAttrMorph(element7, 'href');
          morphs[8] = dom.createElementMorph(element7);
          morphs[9] = dom.createUnsafeMorphAt(element7, 0, 0);
          morphs[10] = dom.createMorphAt(fragment, 8, 8, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "pagerFirst", ["loc", [null, [14, 8], [14, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [14, 2], [18, 9]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "pagerSpread", ["loc", [null, [20, 18], [20, 29]]], 0, 0, 0, 0], "previous"], [], ["loc", [null, [20, 13], [20, 42]]], 0, 0], " ", ["subexpr", "if", [["get", "isFirstDisabled", ["loc", [null, [20, 48], [20, 63]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [20, 43], [20, 76]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "previousUrl", ["loc", [null, [21, 15], [21, 26]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["previous"], [], ["loc", [null, [21, 30], [21, 51]]], 0, 0], ["content", "pagerPrevious", ["loc", [null, [21, 52], [21, 71]]], 0, 0, 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [24, 8], [24, 16]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [24, 2], [26, 9]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "pagerSpread", ["loc", [null, [28, 18], [28, 29]]], 0, 0, 0, 0], "next"], [], ["loc", [null, [28, 13], [28, 38]]], 0, 0], " ", ["subexpr", "if", [["get", "isLastDisabled", ["loc", [null, [28, 44], [28, 58]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [28, 39], [28, 71]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "nextUrl", ["loc", [null, [29, 15], [29, 22]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["next"], [], ["loc", [null, [29, 26], [29, 43]]], 0, 0], ["content", "pagerNext", ["loc", [null, [29, 44], [29, 59]]], 0, 0, 0, 0], ["block", "if", [["get", "pagerLast", ["loc", [null, [32, 8], [32, 17]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [32, 2], [36, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "collections/templates/components/pagination-pager.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "pager", ["loc", [null, [1, 10], [1, 15]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [37, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/create", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 20
            },
            "end": {
              "line": 26,
              "column": 20
            }
          },
          "moduleName": "collections/templates/create.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-3 text-center");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "coll-radio");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["pointer m-b-md p-md box-round osf-box ", ["subexpr", "if", [["subexpr", "eq", [["get", "selectedType", ["loc", [null, [21, 87], [21, 99]]], 0, 0, 0, 0], ["get", "type", ["loc", [null, [21, 100], [21, 104]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 83], [21, 105]]], 0, 0], "osf-box-lt coll-active", "osf-box"], [], ["loc", [null, [21, 78], [21, 142]]], 0, 0], " "], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["updateType", ["get", "type", ["loc", [null, [21, 167], [21, 171]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 145], [21, 173]]], 0, 0], ["content", "type", ["loc", [null, [23, 32], [23, 40]]], 0, 0, 0, 0]],
        locals: ["type"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 16
            },
            "end": {
              "line": 40,
              "column": 67
            }
          },
          "moduleName": "collections/templates/create.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "collections/templates/create.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-create-header p-xl");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "text-center");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode(" Create a collection ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-create");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-10 col-sm-offset-1 m-t-lg");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        var el6 = dom.createTextNode("1. Add title  ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("hr");
        dom.setAttribute(el3, "class", "soften");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-10 col-sm-offset-1");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        var el6 = dom.createTextNode("2. Select collection type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "row");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("hr");
        dom.setAttribute(el3, "class", "soften");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-10 col-sm-offset-1");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        var el6 = dom.createTextNode(" 3. Add description ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "text-muted");
        var el7 = dom.createTextNode("Optional ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-6 col-sm-offset-3 m-t-lg text-center");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        var el6 = dom.createTextNode("Continue");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2, 1]);
        var element2 = dom.childAt(element1, [11, 1]);
        var element3 = dom.childAt(element2, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 3, 3);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [5, 1, 3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [9, 1]), 3, 3);
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createAttrMorph(element3, 'class');
        morphs[5] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "title", ["loc", [null, [11, 51], [11, 56]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Enter collection name"], ["loc", [null, [11, 16], [11, 94]]], 0, 0], ["block", "each", [["get", "typeList", ["loc", [null, [19, 28], [19, 36]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [19, 20], [26, 29]]]], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "description", ["loc", [null, [35, 54], [35, 65]]], 0, 0, 0, 0]], [], [], 0, 0], "rows", "6"], ["loc", [null, [35, 16], [35, 76]]], 0, 0], ["block", "link-to", ["index"], ["class", "btn btn-default"], 1, null, ["loc", [null, [40, 16], [40, 79]]]], ["attribute", "class", ["concat", ["btn btn-primary ", ["subexpr", "unless", [["get", "title", ["loc", [null, [40, 120], [40, 125]]], 0, 0, 0, 0], "disabled"], [], ["loc", [null, [40, 111], [40, 138]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["addCollection"], [], ["loc", [null, [40, 140], [40, 166]]], 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("collections/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 12
              },
              "end": {
                "line": 7,
                "column": 90
              }
            },
            "moduleName": "collections/templates/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Start a collection ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 8
            }
          },
          "moduleName": "collections/templates/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["create"], ["class", "btn btn-success btn-lg m-t-lg"], 0, null, ["loc", [null, [7, 12], [7, 102]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 16
              },
              "end": {
                "line": 22,
                "column": 123
              }
            },
            "moduleName": "collections/templates/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("View");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["element", "action", ["clearFilter"], [], ["loc", [null, [22, 87], [22, 111]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 20
              },
              "end": {
                "line": 23,
                "column": 105
              }
            },
            "moduleName": "collections/templates/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["clearFilter"], [], ["loc", [null, [23, 59], [23, 83]]], 0, 0], ["content", "item.title", ["loc", [null, [23, 84], [23, 98]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 16
              },
              "end": {
                "line": 27,
                "column": 16
              }
            },
            "moduleName": "collections/templates/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("Tags: ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "item.tags", ["loc", [null, [26, 31], [26, 44]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 8
            },
            "end": {
              "line": 30,
              "column": 8
            }
          },
          "moduleName": "collections/templates/index.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "coll-single");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "text-muted");
          var el3 = dom.createTextNode("Created on ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(element3, 7, 7);
          morphs[4] = dom.createMorphAt(dom.childAt(element3, [9]), 1, 1);
          return morphs;
        },
        statements: [["block", "link-to", ["collection", ["get", "item.id", ["loc", [null, [22, 40], [22, 47]]], 0, 0, 0, 0]], ["class", "btn btn-info pull-right"], 0, null, ["loc", [null, [22, 16], [22, 135]]]], ["block", "link-to", ["collection", ["get", "item.id", ["loc", [null, [23, 44], [23, 51]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [23, 20], [23, 117]]]], ["content", "item.description", ["loc", [null, [24, 19], [24, 39]]], 0, 0, 0, 0], ["block", "if", [["get", "item.tags", ["loc", [null, [25, 22], [25, 31]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [25, 16], [27, 23]]]], ["inline", "moment-format", [["get", "item.dateCreated", ["loc", [null, [28, 67], [28, 83]]], 0, 0, 0, 0], "MMMM DD, YYYY"], [], ["loc", [null, [28, 51], [28, 101]]], 0, 0]],
        locals: ["item"],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 16
              },
              "end": {
                "line": 36,
                "column": 16
              }
            },
            "moduleName": "collections/templates/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-circle-o-notch fa-spin fa-3x fa-fw text-muted m-t-md");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.3",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 16
              },
              "end": {
                "line": 38,
                "column": 16
              }
            },
            "moduleName": "collections/templates/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode(" Load more ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["loadMore"], [], ["loc", [null, [37, 52], [37, 73]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 12
            },
            "end": {
              "line": 39,
              "column": 12
            }
          },
          "moduleName": "collections/templates/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "loadingMore", ["loc", [null, [34, 22], [34, 33]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [34, 16], [38, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "collections/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "coll-banner text-center");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        dom.setAttribute(el3, "class", "f-w-lg");
        var el4 = dom.createTextNode(" OSF Collections ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "lead f-w-md");
        var el4 = dom.createTextNode("Integrate your research interests into groups");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "coll-toolbar row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-6");
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode(" All collections");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-6");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pull-right");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" shown ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment(" <input type=text placeholder=\"Filter collections\" onkeyup={{action 'filter'}}> ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "coll-group");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "text-center");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [4]);
        var element5 = dom.childAt(element4, [1, 3, 1]);
        var element6 = dom.childAt(element4, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 5, 5);
        morphs[2] = dom.createMorphAt(element5, 0, 0);
        morphs[3] = dom.createMorphAt(element5, 2, 2);
        morphs[4] = dom.createMorphAt(element6, 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [6, 14], [6, 37]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 8], [8, 15]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [15, 71], [15, 81]]], 0, 0, 0, 0]], [], [], 0, 0], "key-up", "filter", "placeholder", "Filter"], ["loc", [null, [15, 36], [15, 120]]], 0, 0], ["content", "model.length", ["loc", [null, [15, 122], [15, 138]]], 0, 0, 0, 0], ["block", "each", [["get", "model", ["loc", [null, [20, 16], [20, 21]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [20, 8], [30, 17]]]], ["block", "if", [["get", "showLoadMore", ["loc", [null, [33, 18], [33, 30]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [33, 12], [39, 19]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("collections/templates/not-found", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 86
            },
            "end": {
              "line": 6,
              "column": 114
            }
          },
          "moduleName": "collections/templates/not-found.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Go home ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "collections/templates/not-found.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "text-center m-t-lg");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "p-xl");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-exclamation-triangle fa-5x");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h1");
        var el5 = dom.createTextNode(" Not Found ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "lead");
        var el5 = dom.createTextNode(" Sorry, the page you are looking for is not here anymore. ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" instead");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1, 5]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["index"], [], 0, null, ["loc", [null, [6, 86], [6, 126]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('collections/transforms/embed', ['exports', 'ember-osf/transforms/embed'], function (exports, _emberOsfTransformsEmbed) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfTransformsEmbed['default'];
    }
  });
});
define('collections/transforms/fixstring', ['exports', 'ember-osf/transforms/fixstring'], function (exports, _emberOsfTransformsFixstring) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfTransformsFixstring['default'];
    }
  });
});
define('collections/transforms/links', ['exports', 'ember-osf/transforms/links'], function (exports, _emberOsfTransformsLinks) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfTransformsLinks['default'];
    }
  });
});
define("collections/transforms/object", ["exports", "ember-data", "ember"], function (exports, _emberData, _ember) {
  exports["default"] = _emberData["default"].Transform.extend({
    deserialize: function deserialize(serialized) {
      return _ember["default"].isBlank(serialized) ? {} : serialized;
    },
    serialize: function serialize(deserialized) {
      return _ember["default"].isBlank(deserialized) ? {} : deserialized;
    }
  });
});
define('collections/utils/ajax-helpers', ['exports', 'ember-osf/utils/ajax-helper'], function (exports, _emberOsfUtilsAjaxHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfUtilsAjaxHelper['default'];
    }
  });
  Object.defineProperty(exports, 'authenticatedAJAX', {
    enumerable: true,
    get: function get() {
      return _emberOsfUtilsAjaxHelper.authenticatedAJAX;
    }
  });
});
define('collections/utils/auth', ['exports', 'ember-osf/utils/auth'], function (exports, _emberOsfUtilsAuth) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfUtilsAuth['default'];
    }
  });
});
define('collections/utils/fix-special-char', ['exports', 'ember-osf/utils/fix-special-char'], function (exports, _emberOsfUtilsFixSpecialChar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfUtilsFixSpecialChar['default'];
    }
  });
});
define('collections/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('collections/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('collections/utils/itemClasses', ['exports', 'ember', 'ember-get-config', 'ember-osf/utils/load-relationship'], function (exports, _ember, _emberGetConfig, _emberOsfUtilsLoadRelationship) {

    /*
     *  Construct the individual data pieces shown to user and their states
     */
    var ViewData = _ember['default'].Object.extend({
        value: null,
        loaded: false,
        visible: true,
        setValue: function setValue(newValue) {
            if (_ember['default'].isNone(newValue)) {
                return;
            }
            this.set('value', newValue);
            this.set('loaded', true);
        },
        show: function show() {
            this.set('visible', true);
        },
        hide: function hide() {
            this.set('visible', false);
        },
        reset: function reset() {
            this.set('value', null);
            this.set('loaded', false);
        }
    });

    /*
     *  Base item variavles and helpers, sets content common to all or most
     */
    var Item = _ember['default'].Object.extend({
        viewContent: null,
        setAuthors: function setAuthors() {
            var _this = this;

            var contributors = _ember['default'].A();
            var node = this.get('node');
            (0, _emberOsfUtilsLoadRelationship['default'])(node, 'contributors', contributors).then(function () {
                _this.get('viewContent.authors').setValue(contributors);
            });
        },
        setCommonNodeContent: function setCommonNodeContent(node) {
            this.set('node', node);
            this.get('viewContent.description').setValue(node.get('description'));
            var tags = node.get('tags');
            if (tags.length === 0) {
                this.get('viewContent.tags').set('visible', false);
            } else {
                this.get('viewContent.tags').setValue(tags);
            }
            if (node.get('links.html')) {
                this.get('viewContent.sourceLink').setValue(node.get('links.html'));
            } else {
                this.get('viewContent.sourceLink').set('visible', false);
            }
            this.setAuthors();
        },
        resetContent: function resetContent() {
            this.set('viewContent', _ember['default'].Object.create({
                title: ViewData.create(),
                description: ViewData.create(),
                tags: ViewData.create(),
                authors: ViewData.create(),
                sourceLink: ViewData.create(),
                wiki: ViewData.create({ visible: false }),
                file: ViewData.create({ visible: false })
            }));
        },
        init: function init() {
            this.resetContent();
            this.get('viewContent.title').setValue(this.get('item.title'));
        }
    });

    /*
     *  Builds data points for website type item
     */
    var Website = Item.extend({
        init: function init() {
            this._super();
            this.get('viewContent.description').setValue(this.get('item.metadata'));
            this.get('viewContent.sourceLink').setValue(this.get('item.url'));
            this.get('viewContent.tags').hide();
            this.get('viewContent.authors').hide();
        }
    });

    /*
     *  Builds data points for project ('node') type item
     */
    var Project = Item.extend({
        setWiki: function setWiki() {
            var _this2 = this;

            var node = this.get('node');
            var wikis = node.get('wikis');
            this.get('viewContent.wiki').show();
            if (wikis) {
                wikis.then(function (result) {
                    if (result.objectAt(0)) {
                        (function () {
                            var url = result.objectAt(0).get('links.download');
                            var headers = {};
                            var authType = _emberGetConfig['default']['ember-simple-auth'].authorizer;
                            _this2.get('session').authorize(authType, function (headerName, content) {
                                headers[headerName] = content;
                            });

                            _ember['default'].$.ajax({
                                method: 'GET',
                                headers: headers,
                                url: url
                            }).done(function (data) {
                                _this2.get('viewContent.wiki').setValue(data);
                            });
                        })();
                    } else {
                        _this2.get('viewContent.wiki').setValue('This project does not have wikis.');
                    }
                });
            } else {
                this.get('viewContent.wiki').setValue('Could not find wiki for this project.');
            }
        },
        init: function init() {
            var _this3 = this;

            this._super();
            this.get('store').findRecord('node', this.get('item.source_id')).then(function (node) {
                _this3.setCommonNodeContent(node);
                _this3.setWiki();
            });
        }
    });

    /*
     *  Builds data points for preprint type item
     */
    var Preprint = Item.extend({
        setPreprint: function setPreprint() {
            var _this4 = this;

            var node = this.get('node');
            this.get('viewContent.file').show();
            node.get('preprints').then(function (result) {
                if (result.objectAt(0)) {
                    result.objectAt(0).get('primaryFile').then(function (pf) {
                        _this4.get('viewContent.file').setValue(pf.get('links').download);
                    });
                }
            });
        },
        init: function init() {
            var _this5 = this;

            this._super();
            this.get('store').findRecord('node', this.get('item.source_id')).then(function (node) {
                _this5.setCommonNodeContent(node);
                _this5.setPreprint();
            });
        }
    });

    /*
     *  Builds data points for registration type item
     */
    var Registration = Item.extend({
        init: function init() {
            var _this6 = this;

            this._super();
            this.get('store').findRecord('registration', this.get('item.source_id')).then(function (node) {
                _this6.setCommonNodeContent(node);
            });
        }
    });

    var itemClasses = {
        viewData: ViewData,
        item: Item,
        website: Website,
        project: Project,
        preprint: Preprint,
        registration: Registration
    };

    exports.itemClasses = itemClasses;
});
/*
 *  Classes for the Item detail view
 */
define('collections/utils/load-relationship', ['exports', 'ember-osf/utils/load-relationship'], function (exports, _emberOsfUtilsLoadRelationship) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOsfUtilsLoadRelationship['default'];
    }
  });
});
define('collections/utils/sampleLandingSettings', ['exports'], function (exports) {
  var collectionSettings = {
    branding: {
      colors: {
        primary: '#215264',
        secondary: '#eeeeee',
        background: '#e14b5a',
        backgroundText: '#ffffff'
      },
      logo: {
        label: 'socarxiv',
        url: 'https://osf.io/preprints/assets/img/provider_logos/socarxiv-small-ee6338993da17d8c871e23ae39d0b29e3c171abf.png',
        height: '140px'
      }
    },
    layout: [{
      type: 'landing-hero',
      title: 'You can override collection title here',
      tagline: 'Open archive of the social sciences',
      data: null,
      settings: {
        useLogo: true
      }
    }, {
      type: 'landing-list',
      title: 'Subjects',
      data: 'subjects',
      settings: null
    }, {
      type: 'landing-board',
      title: 'Steering Committee',
      data: 'people',
      settings: null
    }, {
      type: 'landing-copyright',
      title: null,
      data: 'links',
      settings: null
    }],
    data: {
      subjects: [{
        name: 'Arts and Humanities',
        label: 'Fine Arts, History, Music, Philosophy, Religion',
        link: '/preprints/socarxiv/discover?subject=Arts%20and%20Humanities'
      }, {
        name: 'Arts and Humanities',
        label: 'Fine Arts, History, Music, Philosophy, Religion',
        link: '/preprints/socarxiv/discover?subject=Arts%20and%20Humanities'
      }, {
        name: 'Arts and Humanities',
        label: 'Fine Arts, History, Music, Philosophy, Religion',
        link: '/preprints/socarxiv/discover?subject=Arts%20and%20Humanities'
      }, {
        name: 'Arts and Humanities',
        label: 'Fine Arts, History, Music, Philosophy, Religion',
        link: '/preprints/socarxiv/discover?subject=Arts%20and%20Humanities'
      }],
      people: [{
        firstName: 'Donna',
        lastName: 'Brown',
        institution: 'Massachusetts Institute of Technology'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }, {
        firstName: 'George',
        lastName: 'Wu',
        institution: 'Massachusetts Institute of Technology'
      }, {
        firstName: 'Donna',
        lastName: 'Brown',
        institution: 'University of Maryland, College Park'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }, {
        firstName: 'George',
        lastName: 'Wu',
        institution: 'University of Maryland, College Park'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }, {
        firstName: 'George',
        lastName: 'Wu',
        institution: 'University of Maryland, College Park'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }, {
        firstName: 'George',
        lastName: 'Wu',
        institution: 'University of Maryland, College Park'
      }, {
        firstName: 'Maria',
        lastName: 'Gonzales',
        institution: 'University of North Carolina at Chapel Hill'
      }],
      links: [{
        label: 'Support',
        url: '/support'
      }, {
        label: 'Contact',
        url: '/contact'
      }, {
        label: 'Twitter',
        url: '/twitter/somearchive',
        icon: 'fa-twitter'
      }]
    }
  };

  exports.collectionSettings = collectionSettings;
});
define('collections/validators/alias', ['exports', 'ember-cp-validations/validators/alias'], function (exports, _emberCpValidationsValidatorsAlias) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsAlias['default'];
    }
  });
});
define('collections/validators/belongs-to', ['exports', 'ember-cp-validations/validators/belongs-to'], function (exports, _emberCpValidationsValidatorsBelongsTo) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsBelongsTo['default'];
    }
  });
});
define('collections/validators/collection', ['exports', 'ember-cp-validations/validators/collection'], function (exports, _emberCpValidationsValidatorsCollection) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsCollection['default'];
    }
  });
});
define('collections/validators/confirmation', ['exports', 'ember-cp-validations/validators/confirmation'], function (exports, _emberCpValidationsValidatorsConfirmation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsConfirmation['default'];
    }
  });
});
define('collections/validators/date', ['exports', 'ember-cp-validations/validators/date'], function (exports, _emberCpValidationsValidatorsDate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsDate['default'];
    }
  });
});
define('collections/validators/dependent', ['exports', 'ember-cp-validations/validators/dependent'], function (exports, _emberCpValidationsValidatorsDependent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsDependent['default'];
    }
  });
});
define('collections/validators/ds-error', ['exports', 'ember-cp-validations/validators/ds-error'], function (exports, _emberCpValidationsValidatorsDsError) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsDsError['default'];
    }
  });
});
define('collections/validators/exclusion', ['exports', 'ember-cp-validations/validators/exclusion'], function (exports, _emberCpValidationsValidatorsExclusion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsExclusion['default'];
    }
  });
});
define('collections/validators/format', ['exports', 'ember-cp-validations/validators/format'], function (exports, _emberCpValidationsValidatorsFormat) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsFormat['default'];
    }
  });
});
define('collections/validators/has-many', ['exports', 'ember-cp-validations/validators/has-many'], function (exports, _emberCpValidationsValidatorsHasMany) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsHasMany['default'];
    }
  });
});
define('collections/validators/inclusion', ['exports', 'ember-cp-validations/validators/inclusion'], function (exports, _emberCpValidationsValidatorsInclusion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsInclusion['default'];
    }
  });
});
define('collections/validators/length', ['exports', 'ember-cp-validations/validators/length'], function (exports, _emberCpValidationsValidatorsLength) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsLength['default'];
    }
  });
});
define('collections/validators/messages', ['exports', 'ember-cp-validations/validators/messages'], function (exports, _emberCpValidationsValidatorsMessages) {
  /**
   * Copyright 2016, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsMessages['default'];
    }
  });
});
define('collections/validators/number', ['exports', 'ember-cp-validations/validators/number'], function (exports, _emberCpValidationsValidatorsNumber) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsNumber['default'];
    }
  });
});
define('collections/validators/presence', ['exports', 'ember-cp-validations/validators/presence'], function (exports, _emberCpValidationsValidatorsPresence) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCpValidationsValidatorsPresence['default'];
    }
  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('collections/config/environment', ['ember'], function(Ember) {
  var prefix = 'collections';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("collections/app")["default"].create({"usingCors":true,"corsWithCreds":true,"apiURL":"http://localhost:8000/api","name":"collections","version":"0.0.0+db97edbe"});
}

/* jshint ignore:end */
//# sourceMappingURL=collections.map
